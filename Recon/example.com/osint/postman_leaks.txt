
[1m                      __          _          __     
   ___  ___  ________/ /    ___  (_)______ _/ /____ 
  / _ \/ _ \/ __/ __/ _ \  / _ \/ / __/ _ `/ __/ -_)
 / .__/\___/_/  \__/_//_/ / .__/_/_/  \_,_/\__/\__/ 
/_/                      /_/                    
              by [34mMand Consulting Group[0m
                 [36m@zer0pwn @xixasec[0m

[1m[32m[+][0m Query returned [32m284652[0m search results.[0m

[1m- Requests:[0m[32m194847[0m
[1m- Workspaces:[0m[32m18541[0m
[1m- Collections:[0m[32m71158[0m
[1m- Teams:[0m[32m3[0m
[1m- APIs:[0m[32m101[0m
[1m- Flows:[0m[32m2[0m


[33m[*][0m Querying workspace ID [36m53b162bb-5d65-4d71-9d14-0f0136893501[0m

[1m
Request ID [0m[33m29850-a22a0439-95b1-4728-ab0c-3d0774113cd9[0m
[1m- Name: [0m[36mGet Bearer Token[0m
[1m- URL: [0m[33m{{baseUrl}}/api/v1/session[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33mpassword[0m=[32m{{argoCDLocalAdminPassword}}[0m
  [1m- [0m[33musername[0m=[32madmin[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m29850-1035a412-70eb-45d7-bf1b-76faa28734fe[0m
[1m- Name: [0m[36mReturns current alertmanager discovery[0m
[1m- URL: [0m[33m{{baseUrl}}/alertmanagers[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m
Request ID [0m[33m29850-2e056eba-cac7-44c7-9139-9a1e3472cbbe[0m
[1m- Name: [0m[36mReturns metric metadata[0m
[1m- URL: [0m[33m{{baseUrl}}/metadata[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mlimit[0m=[32m100[0m
[1m- Parameter: [0m[33mmetric[0m=[32mirure[0m
[1m
Request ID [0m[33m29850-5b3b30aa-0545-465f-bb77-45bc3102a39c[0m
[1m- Name: [0m[36mReturns label values[0m
[1m- URL: [0m[33m{{baseUrl}}/label/:label_name/values?start=irure&end=irure&match[]=irure[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mstart[0m=[32mirure[0m
[1m- Parameter: [0m[33mend[0m=[32mirure[0m
[1m- Parameter: [0m[33mmatch[][0m=[32mirure[0m
[1m
Request ID [0m[33m29850-828fe41f-eb91-4ddb-8ce7-67a4a5603e07[0m
[1m- Name: [0m[36mReturns currently loaded rules[0m
[1m- URL: [0m[33m{{baseUrl}}/rules?type=alert[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mtype[0m=[32malert[0m
[1m
Request ID [0m[33m29850-da4a78c4-7de2-4067-b300-0769f4c19c7c[0m
[1m- Name: [0m[36mReturns active alerts[0m
[1m- URL: [0m[33m{{baseUrl}}/alerts[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m
Request ID [0m[33m29850-2574a3fc-b567-430b-bb99-3e43e8eccedf[0m
[1m- Name: [0m[36mGet Document Doc[0m
[1m- URL: [0m[33m{{baseUrl}}/:index/_doc/:id[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mpreference[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mrealtime[0m=[32mtrue[0m
[1m- Parameter: [0m[33mrefresh[0m=[32mtrue[0m
[1m- Parameter: [0m[33mrouting[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mstored_fields[0m=[32mtrue[0m
[1m- Parameter: [0m[33m_source[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33m_source_excludes[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33m_source_includes[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mversion[0m=[32m-57209597.64903877[0m
[1m- Parameter: [0m[33mversion_type[0m=[32mexternal_gte[0m
[1m
Request ID [0m[33m29850-2fe57ea4-f5bd-4514-aa7a-01ac1c5beec1[0m
[1m- Name: [0m[36mPost Search With Index[0m
[1m- URL: [0m[33m{{baseUrl}}/:index/_search[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
  "docvalue_fields": "Lorem nostrud",
  "explain": true,
  "from": 19877495.855500355,
  "seq_no_primary_term": false,
  "size": -91872867.16205505,
  "source": "dolore nisi ullamco",
  "stats": "fugiat nostrud pariatur",
  "terminate_after": -32518985.131831884,
  "timeout": "76nanos",
  "version": true,
  "fields": [
    "deserunt dolore tempor laboris",
    "elit proident ut"
  ],
  "min_score": -89416608.40422672,
  "query": {
    "bool": {},
    "boosting": {},
    "combined_fields": {},
    "constant_score": {},
    "dis_max": {},
    "distance_feature": {},
    "exists": {},
    "function_score": {},
    "fuzzy": {
      "dolor9e8": {}
    },
    "geo_bounding_box": {},
    "geo_distance": {},
    "geo_polygon": {},
    "geo_shape": {},
    "has_child": {},
    "has_parent": {},
    "ids": {},
    "intervals": {
      "elit424": {},
      "minim_": {}
    },
    "knn": {},
    "match": {
      "laborum1": {},
      "proidentca2": {},
      "enim3": {}
    },
    "match_all": {},
    "match_bool_prefix": {
      "Lorem618": {}
    },
    "match_none": {},
    "match_phrase": {
      "laborum7f": {},
      "enim_178": {}
    },
    "match_phrase_prefix": {
      "laboris_5": {}
    },
    "more_like_this": {},
    "multi_match": {},
    "nested": {},
    "parent_id": {},
    "percolate": {},
    "pinned": {},
    "prefix": {
      "incididunta": {},
      "sed8": {}
    },
    "query_string": {},
    "range": {
      "cillum0a3": {},
      "eu_a4e": {},
      "nisi55": {}
    },
    "rank_feature": {},
    "regexp": {
      "non3d8": {},
      "proident_572": {},
      "quis_4_3": {}
    },
    "script": {},
    "script_score": {},
    "shape": {},
    "simple_query_string": {},
    "span_containing": {},
    "field_masking_span": {},
    "span_first": {},
    "span_multi": {},
    "span_near": {},
    "span_not": {},
    "span_or": {},
    "span_term": {
      "Utc": {}
    },
    "span_within": {},
    "term": {
      "cupidatatd6": {},
      "do_6e3": {}
    },
    "terms": {},
    "terms_set": {
      "non_6": {}
    },
    "wildcard": {
      "Ut_cb": {}
    },
    "wrapper": {}
  }
}[0m[0m
[1m- Parameter: [0m[33mallow_no_indices[0m=[32mtrue[0m
[1m- Parameter: [0m[33mallow_partial_search_results[0m=[32mtrue[0m
[1m- Parameter: [0m[33manalyzer[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33manalyze_wildcard[0m=[32mtrue[0m
[1m- Parameter: [0m[33mbatched_reduce_size[0m=[32m-57209597.64903877[0m
[1m- Parameter: [0m[33mccs_minimize_roundtrips[0m=[32mtrue[0m
[1m- Parameter: [0m[33mdefault_operator[0m=[32m<string>[0m
[1m- Parameter: [0m[33mdf[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mdocvalue_fields[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mexpand_wildcards[0m=[32m<string>[0m
[1m- Parameter: [0m[33mexplain[0m=[32mtrue[0m
[1m- Parameter: [0m[33mfrom[0m=[32m-57209597.64903877[0m
[1m- Parameter: [0m[33mignore_throttled[0m=[32mtrue[0m
[1m- Parameter: [0m[33mignore_unavailable[0m=[32mtrue[0m
[1m- Parameter: [0m[33mlenient[0m=[32mtrue[0m
[1m- Parameter: [0m[33mmax_concurrent_shard_requests[0m=[32m-42299660.42396787[0m
[1m- Parameter: [0m[33mpre_filter_shard_size[0m=[32m-42299660.42396787[0m
[1m- Parameter: [0m[33mpreference[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mq[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mrequest_cache[0m=[32mtrue[0m
[1m- Parameter: [0m[33mrest_total_hits_as_int[0m=[32mtrue[0m
[1m- Parameter: [0m[33mrouting[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mscroll[0m=[32m693640828ms[0m
[1m- Parameter: [0m[33msearch_type[0m=[32m<string>[0m
[1m- Parameter: [0m[33mseq_no_primary_term[0m=[32mtrue[0m
[1m- Parameter: [0m[33msize[0m=[32m-57209597.64903877[0m
[1m- Parameter: [0m[33msort[0m=[32mExcepteur sed cillum[0m
[1m- Parameter: [0m[33msort[0m=[32min aute tempor sunt[0m
[1m- Parameter: [0m[33msource[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33msource_excludes[0m=[32mExcepteur sed cillum[0m
[1m- Parameter: [0m[33msource_excludes[0m=[32min aute tempor sunt[0m
[1m- Parameter: [0m[33msource_includes[0m=[32mExcepteur sed cillum[0m
[1m- Parameter: [0m[33msource_includes[0m=[32min aute tempor sunt[0m
[1m- Parameter: [0m[33mstats[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mstored_fields[0m=[32mtrue[0m
[1m- Parameter: [0m[33msuggest_field[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33msuggest_mode[0m=[32m<string>[0m
[1m- Parameter: [0m[33msuggest_size[0m=[32m-42299660.42396787[0m
[1m- Parameter: [0m[33msuggest_text[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mterminate_after[0m=[32m-57209597.64903877[0m
[1m- Parameter: [0m[33mtimeout[0m=[32m693640828ms[0m
[1m- Parameter: [0m[33mtrack_scores[0m=[32mtrue[0m
[1m- Parameter: [0m[33mtrack_total_hits[0m=[32m-57209597.64903877[0m
[1m- Parameter: [0m[33mtyped_keys[0m=[32mtrue[0m
[1m- Parameter: [0m[33mversion[0m=[32mtrue[0m
[1m
Request ID [0m[33m29850-33f584f2-8813-4fc5-8a97-6549a6d81d58[0m
[1m- Name: [0m[36mPost Aliases[0m
[1m- URL: [0m[33m{{baseUrl}}/_aliases[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
  "actions": {
    "add": {
      "alias": "dolore sed Excepteur reprehe",
      "aliases": [
        "in labore irure",
        "enim minim"
      ],
      "filter": {},
      "index": "adipisicing sed in esse occaecat",
      "indices": [
        "reprehenderit occaecat sunt aliqua",
        "ex aliquip id ad"
      ],
      "index_routing": "inci",
      "is_hidden": false,
      "is_write_index": false,
      "must_exist": "et sunt cillum quis",
      "routing": "eu veniam enim mollit",
      "search_routing": "in adipisicing anim sed consectetur"
    },
    "remove": {
      "alias": "culpa anim",
      "aliases": [
        "incididunt adipisicing",
        "id aliqua ex veniam"
      ],
      "filter": {},
      "index": "dolor aute",
      "indices": [
        "consequat in occaecat Ut",
        "elit velit commodo in"
      ],
      "index_routing": "dolore eiusmod sit veniam",
      "is_hidden": true,
      "is_write_index": false,
      "must_exist": "irure id",
      "routing": "proident labore Excepteur",
      "search_routing": "laboris"
    },
    "remove_index": {
      "alias": "e",
      "aliases": [
        "ut reprehenderit",
        "consequat incididunt d"
      ],
      "filter": {},
      "index": "do pariatur occaecat exercitation",
      "indices": [
        "officia",
        "sunt veniam tempor"
      ],
      "index_routing": "culpa ul",
      "is_hidden": false,
      "is_write_index": true,
      "must_exist": "ad sint",
      "routing": "esse nisi in",
      "search_routing": "dolor minim"
    }
  }
}[0m[0m
[1m- Parameter: [0m[33mmaster_timeout[0m=[32m693640828ms[0m
[1m- Parameter: [0m[33mtimeout[0m=[32m693640828ms[0m
[1m
Request ID [0m[33m29850-a19c62f9-82ab-4a58-8628-902ff9d2fbbd[0m
[1m- Name: [0m[36mGet Document Source[0m
[1m- URL: [0m[33m{{baseUrl}}/:index/_source/:id[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mpreference[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mrealtime[0m=[32mtrue[0m
[1m- Parameter: [0m[33mrefresh[0m=[32mtrue[0m
[1m- Parameter: [0m[33mrouting[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mstored_fields[0m=[32mtrue[0m
[1m- Parameter: [0m[33m_source[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33m_source_excludes[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33m_source_includes[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mversion[0m=[32m-57209597.64903877[0m
[1m- Parameter: [0m[33mversion_type[0m=[32m<string>[0m
[1m
Request ID [0m[33m29850-eff9a4f5-ddaf-40be-b47f-893a48af27cb[0m
[1m- Name: [0m[36mPost Search[0m
[1m- URL: [0m[33m{{baseUrl}}/_search[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
  "docvalue_fields": "Lorem nostrud",
  "explain": true,
  "from": 19877495.855500355,
  "seq_no_primary_term": false,
  "size": -91872867.16205505,
  "source": "dolore nisi ullamco",
  "stats": "fugiat nostrud pariatur",
  "terminate_after": -32518985.131831884,
  "timeout": "76nanos",
  "version": true,
  "fields": [
    "deserunt dolore tempor laboris",
    "elit proident ut"
  ],
  "min_score": -89416608.40422672,
  "query": {
    "bool": {},
    "boosting": {},
    "combined_fields": {},
    "constant_score": {},
    "dis_max": {},
    "distance_feature": {},
    "exists": {},
    "function_score": {},
    "fuzzy": {
      "dolor9e8": {}
    },
    "geo_bounding_box": {},
    "geo_distance": {},
    "geo_polygon": {},
    "geo_shape": {},
    "has_child": {},
    "has_parent": {},
    "ids": {},
    "intervals": {
      "elit424": {},
      "minim_": {}
    },
    "knn": {},
    "match": {
      "laborum1": {},
      "proidentca2": {},
      "enim3": {}
    },
    "match_all": {},
    "match_bool_prefix": {
      "Lorem618": {}
    },
    "match_none": {},
    "match_phrase": {
      "laborum7f": {},
      "enim_178": {}
    },
    "match_phrase_prefix": {
      "laboris_5": {}
    },
    "more_like_this": {},
    "multi_match": {},
    "nested": {},
    "parent_id": {},
    "percolate": {},
    "pinned": {},
    "prefix": {
      "incididunta": {},
      "sed8": {}
    },
    "query_string": {},
    "range": {
      "cillum0a3": {},
      "eu_a4e": {},
      "nisi55": {}
    },
    "rank_feature": {},
    "regexp": {
      "non3d8": {},
      "proident_572": {},
      "quis_4_3": {}
    },
    "script": {},
    "script_score": {},
    "shape": {},
    "simple_query_string": {},
    "span_containing": {},
    "field_masking_span": {},
    "span_first": {},
    "span_multi": {},
    "span_near": {},
    "span_not": {},
    "span_or": {},
    "span_term": {
      "Utc": {}
    },
    "span_within": {},
    "term": {
      "cupidatatd6": {},
      "do_6e3": {}
    },
    "terms": {},
    "terms_set": {
      "non_6": {}
    },
    "wildcard": {
      "Ut_cb": {}
    },
    "wrapper": {}
  }
}[0m[0m
[1m- Parameter: [0m[33mallow_no_indices[0m=[32mtrue[0m
[1m- Parameter: [0m[33mallow_partial_search_results[0m=[32mtrue[0m
[1m- Parameter: [0m[33manalyzer[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33manalyze_wildcard[0m=[32mtrue[0m
[1m- Parameter: [0m[33mbatched_reduce_size[0m=[32m-57209597.64903877[0m
[1m- Parameter: [0m[33mccs_minimize_roundtrips[0m=[32mtrue[0m
[1m- Parameter: [0m[33mdefault_operator[0m=[32mAND[0m
[1m- Parameter: [0m[33mdf[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mdocvalue_fields[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mexpand_wildcards[0m=[32m<string>[0m
[1m- Parameter: [0m[33mexplain[0m=[32mtrue[0m
[1m- Parameter: [0m[33mfrom[0m=[32m-57209597.64903877[0m
[1m- Parameter: [0m[33mignore_throttled[0m=[32mtrue[0m
[1m- Parameter: [0m[33mignore_unavailable[0m=[32mtrue[0m
[1m- Parameter: [0m[33mlenient[0m=[32mtrue[0m
[1m- Parameter: [0m[33mmax_concurrent_shard_requests[0m=[32m-42299660.42396787[0m
[1m- Parameter: [0m[33mpre_filter_shard_size[0m=[32m-42299660.42396787[0m
[1m- Parameter: [0m[33mpreference[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mq[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mrequest_cache[0m=[32mtrue[0m
[1m- Parameter: [0m[33mrest_total_hits_as_int[0m=[32mtrue[0m
[1m- Parameter: [0m[33mrouting[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mscroll[0m=[32m693640828ms[0m
[1m- Parameter: [0m[33msearch_type[0m=[32m0[0m
[1m- Parameter: [0m[33mseq_no_primary_term[0m=[32mtrue[0m
[1m- Parameter: [0m[33msize[0m=[32m-57209597.64903877[0m
[1m- Parameter: [0m[33msort[0m=[32mExcepteur sed cillum[0m
[1m- Parameter: [0m[33msort[0m=[32min aute tempor sunt[0m
[1m- Parameter: [0m[33msource[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33msource_excludes[0m=[32mExcepteur sed cillum[0m
[1m- Parameter: [0m[33msource_excludes[0m=[32min aute tempor sunt[0m
[1m- Parameter: [0m[33msource_includes[0m=[32mExcepteur sed cillum[0m
[1m- Parameter: [0m[33msource_includes[0m=[32min aute tempor sunt[0m
[1m- Parameter: [0m[33mstats[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mstored_fields[0m=[32mtrue[0m
[1m- Parameter: [0m[33msuggest_field[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33msuggest_mode[0m=[32m0[0m
[1m- Parameter: [0m[33msuggest_size[0m=[32m-42299660.42396787[0m
[1m- Parameter: [0m[33msuggest_text[0m=[32mdolore incididunt laborum consequat[0m
[1m- Parameter: [0m[33mterminate_after[0m=[32m-57209597.64903877[0m
[1m- Parameter: [0m[33mtimeout[0m=[32m693640828ms[0m
[1m- Parameter: [0m[33mtrack_scores[0m=[32mtrue[0m
[1m- Parameter: [0m[33mtrack_total_hits[0m=[32m-57209597.64903877[0m
[1m- Parameter: [0m[33mtyped_keys[0m=[32mtrue[0m
[1m- Parameter: [0m[33mversion[0m=[32mtrue[0m
[1m
Request ID [0m[33m29850-128095c7-fc59-40dc-b9bf-d3510faea9bf[0m
[1m- Name: [0m[36mGet Mesh TLS Status[0m
[1m- URL: [0m[33m{{baseUrl}}/api/mesh/tls[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m
Request ID [0m[33m29850-1840f196-4f88-4b65-9c6b-88c7cb1ee036[0m
[1m- Name: [0m[36mGet Istio Certs[0m
[1m- URL: [0m[33m{{baseUrl}}/api/istio/certs[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m
Request ID [0m[33m29850-1aec4f6d-14b7-4d52-ba62-311ffc55d165[0m
[1m- Name: [0m[36mGet Istio Status[0m
[1m- URL: [0m[33m{{baseUrl}}/api/istio/status[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m
Request ID [0m[33m29850-1ebb7734-6219-49a9-a22d-aef7a69c1dda[0m
[1m- Name: [0m[36mGet Istio Permissions[0m
[1m- URL: [0m[33m{{baseUrl}}/api/istio/permissions[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m
Request ID [0m[33m29850-49ca30ad-63f0-4d3b-ad59-d8a9f96294bd[0m
[1m- Name: [0m[36mGet Jaeger Status[0m
[1m- URL: [0m[33m{{baseUrl}}/api/jaeger[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m
Request ID [0m[33m29850-65e5b387-4091-4cde-a7c7-53a5a8822394[0m
[1m- Name: [0m[36mGet Config[0m
[1m- URL: [0m[33m{{baseUrl}}/api/config[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m
Request ID [0m[33m29850-a9e405b2-7a2e-4215-867e-f0eadf56571a[0m
[1m- Name: [0m[36mGet Status {root}[0m
[1m- URL: [0m[33m{{baseUrl}}/api[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m
Request ID [0m[33m29850-f11d5035-23ff-438d-a58b-9ccd815ea58b[0m
[1m- Name: [0m[36mGet Auth Info[0m
[1m- URL: [0m[33m{{baseUrl}}/api/auth/info[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m

[33m[*][0m Querying workspace ID [36mefc5736d-2ddf-45fd-8a5b-cd2dffa137f7[0m


[33m[*][0m Querying workspace ID [36me348c5a0-2965-44cc-87ed-7b316516f38d[0m

[1m
Request ID [0m[33m13687875-b7b9e3ae-7427-4ac2-abb0-bad6e1953b94[0m
[1m- Name: [0m[36mResponse JSON schema valiation[0m
[1m- URL: [0m[33m{{baseUrl}}/products?query={{Product_Name}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mquery[0m=[32m{{Product_Name}}[0m
[1m
Request ID [0m[33m13687875-e33b2cff-be24-49fe-ade6-336ec3d21c25[0m
[1m- Name: [0m[36mAvailability and response time monitoring[0m
[1m- URL: [0m[33mpostman-echo.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m13687875-1d03bac1-8841-49d9-8969-a77278f3e81f[0m
[1m- Name: [0m[36mDelete[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m
Request ID [0m[33m13687875-3f81017f-ddb4-40f0-b426-83da29f45464[0m
[1m- Name: [0m[36mGet Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m13687875-94402028-ab6b-48ea-a5c6-a715935c9f21[0m
[1m- Name: [0m[36mUpdate[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "unitSalePrice": 29.99
}[0m[0m
[1m
Request ID [0m[33m13687875-a5dbbfe9-f04e-4c5e-a7ac-c9605845fbea[0m
[1m- Name: [0m[36mGet Products[0m
[1m- URL: [0m[33m{{baseUrl}}/products?query=shirts[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mquery[0m=[32mshirts[0m
[1m
Request ID [0m[33m13687875-d784eab3-c759-4c8a-a4cb-9c2bf9ae7606[0m
[1m- Name: [0m[36mAdd Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{ 
    "category": "Jeans",
    "brand": "Union",
    "color": "black",
    "gender": "m",
    "unitPrice": 49.99,
    "unitSalePrice": 29.99
}[0m[0m
[1m
Request ID [0m[33m13687875-10d29450-3759-4c5a-898c-c5318ddb0aaa[0m
[1m- Name: [0m[36m3 Get an Updated Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m13687875-3d428309-40a7-4496-8eef-5438d6ebbfdb[0m
[1m- Name: [0m[36m5 Delete a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m
Request ID [0m[33m13687875-54a63859-872f-494b-92f8-1a7b9a3aa6ba[0m
[1m- Name: [0m[36m1 Add a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
   "identifier": "XYZ-JEAN-123",
   "name": "Men's Skinny-fit Stretch Jean",
    "category": "Jeans",
    "brand": "Union",
    "color": "black",
    "gender": "m",
    "unitPrice": 49.99,
    "unitSalePrice": 39.99
}[0m[0m
[1m
Request ID [0m[33m13687875-85317335-24d1-4cc9-a4c8-35778acd6f85[0m
[1m- Name: [0m[36m4 Get Products[0m
[1m- URL: [0m[33m{{baseUrl}}/products?query={{Product_ID}}[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mquery[0m=[32m{{Product_ID}}[0m
[1m
Request ID [0m[33m13687875-f642f402-cbdf-4909-a2e7-d06a669bf760[0m
[1m- Name: [0m[36m2 Update a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "unitSalePrice": 25.99
}[0m[0m
[1m
Request ID [0m[33m22517504-2501a508-614c-4140-931b-7e2f3576bb76[0m
[1m- Name: [0m[36m4 Get Products[0m
[1m- URL: [0m[33m{{baseUrl}}/products?query={{Product_ID}}[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mquery[0m=[32m{{Product_ID}}[0m
[1m
Request ID [0m[33m22517504-3231fe27-08ff-44ed-991a-d7d1b6d17785[0m
[1m- Name: [0m[36m3 Get an Updated Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m22517504-6858bf99-524a-41a0-a934-169bea62a2ed[0m
[1m- Name: [0m[36m5 Delete a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m
Request ID [0m[33m22517504-b0144442-dfa9-43bd-8d32-5cbbbae24d13[0m
[1m- Name: [0m[36m2 Update a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "unitSalePrice": 25.99
}[0m[0m
[1m
Request ID [0m[33m22517504-b42b1356-bb41-448e-a589-ef757e76a59b[0m
[1m- Name: [0m[36m1 Add a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
   "identifier": "XYZ-JEAN-123",
   "name": "Men's Skinny-fit Stretch Jean",
    "category": "Jeans",
    "brand": "Union",
    "color": "black",
    "gender": "m",
    "unitPrice": 49.99,
    "unitSalePrice": 39.99
}[0m[0m

[33m[*][0m Querying workspace ID [36mb706d966-a5cd-4842-8d49-6be2a795f46c[0m

[1m
Request ID [0m[33m15264667-111d8804-3e2f-43c1-bc67-3cf7400eeecc[0m
[1m- Name: [0m[36mGet single project[0m
[1m- URL: [0m[33m{{phrase_api}}projects/{{project_id}}?access_token={{phrase_api_token}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33maccess_token[0m=[32m{{phrase_api_token}}[0m
[1m
Request ID [0m[33m15264667-565c26e2-3dae-43fc-8b26-8776272e2367[0m
[1m- Name: [0m[36mDownload a locale[0m
[1m- URL: [0m[33m{{phrase_api}}projects/{{project_id}}/locales/{{locale_id_en}}/download?file_format=json&access_token={{phrase_api_token}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mfile_format[0m=[32mjson[0m
[1m- Parameter: [0m[33mtag[0m=[32mfeature[0m
[1m- Parameter: [0m[33maccess_token[0m=[32m{{phrase_api_token}}[0m
[1m
Request ID [0m[33m15264667-629e82c3-d0f5-45e2-ae37-47b167f9f458[0m
[1m- Name: [0m[36mList keys[0m
[1m- URL: [0m[33m{{phrase_api}}projects/{{project_id}}/keys?sort=updated_at&order=desc&q=translated:true&locale_id={{locale_id_en}}&access_token={{phrase_api_token}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33msort[0m=[32mupdated_at[0m
[1m- Parameter: [0m[33morder[0m=[32mdesc[0m
[1m- Parameter: [0m[33mq[0m=[32mtranslated:true[0m
[1m- Parameter: [0m[33mlocale_id[0m=[32m{{locale_id_en}}[0m
[1m- Parameter: [0m[33maccess_token[0m=[32m{{phrase_api_token}}[0m
[1m
Request ID [0m[33m15264667-aebe06b6-a393-489b-bc25-46dd5903719a[0m
[1m- Name: [0m[36mList locales[0m
[1m- URL: [0m[33m{{phrase_api}}projects/{{project_id}}/locales?access_token={{phrase_api_token}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33maccess_token[0m=[32m{{phrase_api_token}}[0m
[1m
Request ID [0m[33m15264667-fcc1e12a-a06b-4b9f-9f30-bc93a8969951[0m
[1m- Name: [0m[36mGet projects[0m
[1m- URL: [0m[33m{{phrase_api}}projects?access_token={{phrase_api_token}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33maccess_token[0m=[32m{{phrase_api_token}}[0m

[33m[*][0m Querying workspace ID [36m3580ef86-6620-4ea8-b0ca-bab2966b482b[0m


[33m[*][0m Querying workspace ID [36mb21e0cba-69f8-40df-8617-53ecc2081fe5[0m

[1m
Request ID [0m[33m39408487-81b1df86-e4e0-41eb-a342-6de86a02948f[0m
[1m- Name: [0m[36mexample.com[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m39408487-09de7910-ddb2-4e9a-a7ba-b5f0c487232f[0m
[1m- Name: [0m[36mPOST with JSON body[0m
[1m- URL: [0m[33m{{url}}/post[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "name": "john",
    "permissions": [2000,3000,4000]
}[0m[0m
[1m- Pre-Request Script: [0m[32mlet date = Date.now();

pm.globals.set("currentDate", date);[0m
[1m
Request ID [0m[33m39408487-7e5015a7-3e03-444b-afa8-569e31cab6b6[0m
[1m- Name: [0m[36mPUT with form data[0m
[1m- URL: [0m[33m{{url}}/put[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m
Request ID [0m[33m39408487-c88233d7-5bd8-44b3-a971-46b42d0fdd36[0m
[1m- Name: [0m[36mGET with URL Params[0m
[1m- URL: [0m[33m{{url}}/get?isGood=true&isBad=false[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33misGood[0m=[32mtrue[0m
[1m- Parameter: [0m[33misBad[0m=[32mfalse[0m
[1m
Request ID [0m[33m39408487-ed4332cd-b480-4f18-bb0d-300a1c0a6bf9[0m
[1m- Name: [0m[36mDELETE request[0m
[1m- URL: [0m[33m{{url}}/delete[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m
Request ID [0m[33m39408487-5793dd32-9c65-4fe0-8df7-a861f543199a[0m
[1m- Name: [0m[36mNew Request[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m39408487-e1299e31-1bc8-433b-a08f-11e4021b9f90[0m
[1m- Name: [0m[36mcourses/1/students[0m
[1m- URL: [0m[33m{{url}}/courses/1/students[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m
Request ID [0m[33m39408487-55d2f22b-a98d-4580-ae18-251c85dcd0e7[0m
[1m- Name: [0m[36mhttps://requestb.in/1dcigd51[0m
[1m- URL: [0m[33mhttps://requestb.in/1dcigd51[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "name": "{{company}}"
}[0m[0m
[1m- Pre-Request Script: [0m[32mvar companies = pm.environment.get("companies");

if(!companies){
    companies = ["Goooogle", "Yahoo!", "Facebook", "Amazon"];
}


var currentlyCompany = companies.shift();
pm.environment.set("company",currentlyCompany);
pm.environment.set("companies", companies);

[0m
[1m
Request ID [0m[33m39408487-7f977b65-24e4-45f1-b1d6-5921f6f298e7[0m
[1m- Name: [0m[36mGET with URL Params Copy[0m
[1m- URL: [0m[33m{{url}}/get?isGood=true&isBad=false[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33misGood[0m=[32mtrue[0m
[1m- Parameter: [0m[33misBad[0m=[32mfalse[0m
[1m- Pre-Request Script: [0m[32mvar commonTests = () => {
    pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
    });


    let jsonData = pm.response.json();

    pm.test("Your test name", function () {
    pm.response.to.have.status(200);
    pm.expect(jsonData.args.isGood).to.eql('true');
    pm.expect(jsonData.args.isBad).to.eql('false');
    });
}

pm.globals.set("commonTests", commonTests.toString());[0m
[1m
Request ID [0m[33m39408487-aa61f609-89b0-41b4-b6e0-2412d5c95efb[0m
[1m- Name: [0m[36mGET with URL Params[0m
[1m- URL: [0m[33m{{url}}/get?isGood=true&isBad=false[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33misGood[0m=[32mtrue[0m
[1m- Parameter: [0m[33misBad[0m=[32mfalse[0m
[1m- Pre-Request Script: [0m[32mvar commonTests = () => {
    pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
    });


    let jsonData = pm.response.json();

    pm.test("Your test name", function () {
    pm.response.to.have.status(200);
    pm.expect(jsonData.args.isGood).to.eql('true');
    pm.expect(jsonData.args.isBad).to.eql('false');
    });
}

pm.globals.set("commonTests", commonTests.toString());[0m
[1m
Request ID [0m[33m39408487-0ba0defd-3582-4ce3-b757-71f36774cf40[0m
[1m- Name: [0m[36mNew Request[0m
[1m- URL: [0m[33mhttps://run.mocky.io/v3/35c39953-7230-4dc4-bc5a-6a9397760281[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m39408487-4c12d5ef-c562-4528-8599-a5df6d018795[0m
[1m- Name: [0m[36mNew Request[0m
[1m- URL: [0m[33mhttps://raw.githubusercontent.com/mholt/PapaParse/refs/heads/master/papaparse.min.js[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m39408487-07280395-377c-4df6-b18f-40ec9c41bd08[0m
[1m- Name: [0m[36mRequest 1[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m39408487-0ab4ee98-df5d-4ac7-8e1f-2cba0f481ba9[0m
[1m- Name: [0m[36mRequest 4[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m39408487-a2027c2b-fdac-4cd1-b7d9-e2ebc4cab5d2[0m
[1m- Name: [0m[36mRequest 3[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m39408487-a76631ec-7a11-4417-a0c7-e983a69ce86a[0m
[1m- Name: [0m[36mRequest 2[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m39408487-424451b4-6b4c-4de2-bd01-9481ef00da8b[0m
[1m- Name: [0m[36mCheck status[0m
[1m- URL: [0m[33mhttpbin.org/status/{{status}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m
Request ID [0m[33m39408487-8ee005fb-8860-43ac-b4cb-5f4bfc60cb68[0m
[1m- Name: [0m[36mCreate order[0m
[1m- URL: [0m[33mhttpbin.org/post[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"referenceId": "{{referenceId}}",
	"customerId": {{customerId}},
	"productId": {{productId}},
	"metaInfo": {{metaInfoBody}}
}[0m[0m
[1m- Pre-Request Script: [0m[32mpm.variables.set('metaInfoBody', JSON.stringify(pm.variables.get('metaInfo')));[0m
[1m
Request ID [0m[33m39408487-abca85b9-3dc8-436f-ac60-1d19f06cb51f[0m
[1m- Name: [0m[36mGenerate reference[0m
[1m- URL: [0m[33mhttpbin.org/uuid[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m39408487-b5fe882a-f3f8-4376-a330-108b141c6230[0m
[1m- Name: [0m[36mCreate order Copy[0m
[1m- URL: [0m[33mhttpbin.org/post[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"referenceId": "{{referenceId}}",
	"customerId": {{customerId}},
	"productId": {{productId}},
	"metaInfo": {{metaInfoBody}}
}[0m[0m
[1m- Pre-Request Script: [0m[32mconst options = {
    method: 'GET',
    url: 'https://httpbin.org/uuid',
    header: {
        'Cache-Control': 'no-cache',
        'Foo': 'Bar'
    }
};

pm.sendRequest(options, function (error, response) {
    const data = response.json();
    pm.globals.set("uuid", data.uuid);
    console.log('response is here');
});

console.log('the rest of the script');
[0m

[33m[*][0m Querying workspace ID [36m07cbce6d-0353-4d4d-9f1c-83dbea16eb04[0m

[1m
Request ID [0m[33m20680687-0669bb32-2797-4e0d-945b-6d39da661d6e[0m
[1m- Name: [0m[36mPOST UPDATE[0m
[1m- URL: [0m[33mhttps://reqres.in/api/users/2[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Request Body: [0m[32m{
    "name": "{{user_name}}",
    "job": "zion resident"
}[0m[0m
[1m
Request ID [0m[33m20680687-67f6b10d-5285-4322-8fa3-81fb04bdc1a7[0m
[1m- Name: [0m[36mPOST CreateUser[0m
[1m- URL: [0m[33m{{partial_url_reqres}}/users[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "name": "{{variable_requestName}}",
    "job": "{{variable_job}}"
}[0m[0m
[1m
Request ID [0m[33m20680687-dac3024d-ddb8-4075-8baa-f91d21016352[0m
[1m- Name: [0m[36mGET USER[0m
[1m- URL: [0m[33m{{REQRES_URL}}/users/2[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20680687-1c59ff0f-b13e-4664-bf46-dcbcab116ff6[0m
[1m- Name: [0m[36mLoop counter[0m
[1m- URL: [0m[33m{{REQRES_URL}}/users/2[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20680687-fdd56e69-0aa8-4901-93a3-3e6225a4f857[0m
[1m- Name: [0m[36mcall[0m
[1m- URL: [0m[33m[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20680687-5f86f424-26ae-4d9d-8891-ba6c19434832[0m
[1m- Name: [0m[36mCreateUser REQRES[0m
[1m- URL: [0m[33m{{REQRES_URL}}/users[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "name": "{{variable_requestName}}",
    "job": "{{variable_job}}"
}[0m[0m
[1m
Request ID [0m[33m20680687-a95e1be4-a4fe-4834-9f11-0024f43d41e5[0m
[1m- Name: [0m[36mDELETE SavedUser[0m
[1m- URL: [0m[33m{{REQRES_URL}}/api/users/{{toBeDeleted_id}}[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m- Pre-Request Script: [0m[32mpm.test("Pre-request printing ID", function () {
console.log("Deleting with ID: " + pm.collectionVariables.get("toBeDeleted_id"))
});[0m
[1m
Request ID [0m[33m20680687-b468742c-c850-4d41-8c7d-96142662b263[0m
[1m- Name: [0m[36mGetUser and set data[0m
[1m- URL: [0m[33m{{REQRES_URL}}/users/2[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m
Request ID [0m[33m20680687-20846c22-d6ff-4cfe-aedb-c2217ad506a9[0m
[1m- Name: [0m[36mREQRES CreateUser[0m
[1m- URL: [0m[33m{{REQRES_URL}}/users[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "name": "{{variable_requestName}}",
    "job": "{{variable_job}}"
}[0m[0m
[1m
Request ID [0m[33m20680687-2306e607-b325-40e1-a3a7-0f0ff3402be2[0m
[1m- Name: [0m[36mREQRES RegisterUser[0m
[1m- URL: [0m[33m{{REQRES_URL}}/register[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "email": "eve.holt@reqres.in",
    "password": "pistol"
}[0m[0m
[1m
Request ID [0m[33m20680687-43538a08-6b7a-4aeb-8dd2-6d257b0bed6f[0m
[1m- Name: [0m[36mREQRES RegisterUser global variables[0m
[1m- URL: [0m[33m{{REQRES_URL}}/register[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "email": "{{envQA_user}}",
    "password": "{{envQA_password}}"
}[0m[0m
[1m- Pre-Request Script: [0m[32mconsole.log("Setting username and password for this particular request");
pm.collectionVariables.set("envQA_user", pm.globals.get("REGISTER_USERNAME"));
console.log(pm.collectionVariables.get("envQA_user"))
pm.collectionVariables.set("envQA_password", pm.globals.get("PASSWORD"));
console.log(pm.collectionVariables.get("envQA_password"))[0m
[1m
Request ID [0m[33m20680687-66179433-aeda-46bf-90d5-e5e1cd86926d[0m
[1m- Name: [0m[36mREQRES DeleteUser[0m
[1m- URL: [0m[33m{{REQRES_URL}}/api/users/{{toBeDeleted_id}}[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m
Request ID [0m[33m20680687-8ab120e2-02ca-4778-879f-b4c729e7783a[0m
[1m- Name: [0m[36mREQRES Login successful[0m
[1m- URL: [0m[33m{{REQRES_URL}}/api/login[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "email": "{{api_login_username}}",
    "password": "{{api_login_password}}"
}[0m[0m
[1m
Request ID [0m[33m20680687-963d43ba-8731-4e41-bef1-1a10c9c3fc34[0m
[1m- Name: [0m[36mREQRES GetUser & Save data[0m
[1m- URL: [0m[33m{{REQRES_URL}}/users/2[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20680687-ea1e6567-4a05-481f-aa84-17c39e8d606a[0m
[1m- Name: [0m[36mREQRES CreateUser with Tests[0m
[1m- URL: [0m[33m{{REQRES_URL}}/users[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "name": "{{testName}}",
    "job": "{{testJob}}"
}[0m[0m
[1m
Request ID [0m[33m20680687-440da028-83ab-40e8-a963-17bf63eff5a6[0m
[1m- Name: [0m[36mhttps://reqres.in/api/users/2[0m
[1m- URL: [0m[33m{{reqres_url}}/api/users/2[33m[0m
[1m- Request Method: [0m[33mGET[0m

[33m[*][0m Querying workspace ID [36m420fe70a-a233-413f-aa4f-6f4b4ae138ff[0m

[1m
Request ID [0m[33m21025759-29c23d5a-3eba-4b43-b351-d40074e4aabf[0m
[1m- Name: [0m[36mSchedule a message[0m
[1m- URL: [0m[33m{{BaseUrl}}/api/v1/{{WhatsappAccountId}}/conversations/start/{{TestContactIdentifier}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "message_template": "testestestestestest_v2_v2",
    "scheduled_for": "2024-08-29T10:43:54Z"
}[0m[0m
[1m
Request ID [0m[33m21025759-2ad8ff28-da05-42fb-bf14-604a952b8ed9[0m
[1m- Name: [0m[36mStart  a conversation[0m
[1m- URL: [0m[33m{{BaseUrl}}/api/v1/{{WhatsappAccountId}}/conversations/start/{{TestContactIdentifier}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "message_template": "testestestestestest_v2_v2"
}[0m[0m
[1m
Request ID [0m[33m21025759-31541760-85d5-4b4e-ae52-bd35c3ead0e8[0m
[1m- Name: [0m[36mSend a message with body parameters[0m
[1m- URL: [0m[33m{{BaseUrl}}/api/v1/{{WhatsappAccountId}}/conversations/start/{{TestContactIdentifier}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "message_template": "afspraakherinnering",
    "contact": {
        "first_name": "Voornaam",
        "last_name": "Achternaam"
    },
    "components" : [
        {
            "type": "body",
            "parameters": [
                {
                    "type" : "text",
                    "text" : "Theo"
                },
                {
                    "type" : "text",
                    "text" : "31 juli om 11:00"
                }
            ]
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m21025759-8bd2d399-6982-4618-b3a8-1f24c18f6f9d[0m
[1m- Name: [0m[36mSend a message with location header parameters[0m
[1m- URL: [0m[33m{{BaseUrl}}/api/v1/{{WhatsappAccountId}}/conversations/start/{{TestContactIdentifier}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "message_template": "test_bericht_met_header_location",
    "components" : [
        {
            "type": "header",
            "parameters": [
                {
                    "type" : "location",
                    "location" : {
                        "latitude" : 52.270378,
                        "longitude" : 6.9267699,
                        "name" : "AppCenter Nederland",
                        "address" : "Oldenzaalsestraat 1202, 7524 RJ Enschede"

                    }
                }
            ]
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m21025759-c23ca2a7-a82b-4e6e-84d1-8444669230ba[0m
[1m- Name: [0m[36mSchedule a message with body parameters[0m
[1m- URL: [0m[33m{{BaseUrl}}/api/v1/{{WhatsappAccountId}}/conversations/start/{{TestContactIdentifier}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "message_template": "afspraak_herinnering_test",
    "scheduled_for": "2024-08-29T10:43:54Z",
    "components" : [
        {
            "type": "body",
            "parameters": [
                {
                    "type" : "text",
                    "text" : "Theo"
                },
                {
                    "type" : "text",
                    "text" : "31 juli om 11:00"
                }
            ]
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m21025759-e2463daa-324f-46c9-961a-af3b721fb390[0m
[1m- Name: [0m[36mSend a message with button parameters[0m
[1m- URL: [0m[33m{{BaseUrl}}/api/v1/{{WhatsappAccountId}}/conversations/start/{{TestContactIdentifier}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "message_template": "test_header_bericht_met_knoppen",
    "components" : [
        {
            "type": "button",
            "sub_type": "copy_code",
            "index": 0,
            "parameters": [
                {
                    "type" : "coupon_code",
                    "coupon_code" : "HERSTKORTING20"
                }
            ]
        },
         {
            "type": "button",
            "sub_type": "url",
            "index": 1,
            "parameters": [
                {
                    "type" : "text",
                    "text" : "?search=AppCenter+Nederland"
                }
            ]
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m21025759-ecfc151c-d057-4768-aac3-1a8489b5012a[0m
[1m- Name: [0m[36mSend a message with text header parameters[0m
[1m- URL: [0m[33m{{BaseUrl}}/api/v1/{{WhatsappAccountId}}/conversations/start/{{TestContactIdentifier}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "message_template": "test_bericht_met_textheader_variabele",
    "components" : [
        {
            "type": "header",
            "parameters": [
                {
                    "type" : "text",
                    "text" : "Theo"
                }
            ]
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m21025759-f4bbbb85-3a30-43c7-835a-ed6e2e18721e[0m
[1m- Name: [0m[36mSend a message with image header parameters[0m
[1m- URL: [0m[33m{{BaseUrl}}/api/v1/{{WhatsappAccountId}}/conversations/start/{{TestContactIdentifier}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "message_template": "test_bericht_met_header_afbeelding",
    "components" : [
        {
            "type": "header",
            "parameters": [
                {
                    "type" : "image",
                    "image" : {
                        "link" : "https://communiqate.ams3.cdn.digitaloceanspaces.com/images/7ad29009-a243-49b9-8307-c8653d3d45a0.jpeg"
                    }
                }
            ]
        }
    ]
}[0m[0m

[33m[*][0m Querying workspace ID [36m64039de5-5380-46cf-bba5-04ce12b7fae8[0m

[1m
Request ID [0m[33m12959542-3083a36b-3e24-44a0-81d6-44d90ada1d39[0m
[1m- Name: [0m[36mPull OpenAPI Into Environment[0m
[1m- URL: [0m[33m{{postman_base_url}}/apis/?api_name=Products&api_version=V1.0.0[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mx-api-key[0m: [32m{{postman_api_key}}[0m[0m
[1m- Parameter: [0m[33mapi_name[0m=[32mProducts[0m
[1m- Parameter: [0m[33mapi_version[0m=[32mV1.0.0[0m
[1m
Request ID [0m[33m12959542-738be9ac-ca0c-4515-9e61-6c96ec4c95df[0m
[1m- Name: [0m[36mChange Something in the OpenAPI[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m12959542-c8d5bc88-84df-44d9-ab3f-77adc632305c[0m
[1m- Name: [0m[36mSave OpenAPI To Postman[0m
[1m- URL: [0m[33m{{postman_base_url}}/apis/{{postman_api_id}}/versions/{{postman_api_version_id}}/schemas/{{postman_api_schema_id}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mx-api-key[0m: [32m{{postman_api_key}}[0m[0m
[1m- Request Body: [0m[32m{
	"schema": {
		"language": "yaml",
		"schema": "{{openapi_yaml}}",
		"type": "openapi3"
	}
}[0m[0m
[1m- Pre-Request Script: [0m[32mconst yaml =  pm.environment.get('js_yaml');
(new Function(yaml))();

var openapi =  pm.environment.get('openapi');

openapi_yaml = jsyaml.dump(openapi); 

pm.environment.set("openapi_yaml", openapi_yaml);[0m

[33m[*][0m Querying workspace ID [36m826c6d06-82bf-4f9b-aef1-47fe77ce5e04[0m

[1m
Request ID [0m[33m12959542-3a255de0-d0d1-4551-bb7c-82419a54bcad[0m
[1m- Name: [0m[36mSwagger V2 - Response PATCH 204 No Body[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-response-patch-204-no-body/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-response-patch-204-no-body/[0m
[1m
Request ID [0m[33m12959542-8943192d-724e-4650-95ec-34dc08098167[0m
[1m- Name: [0m[36mOpenAPI V3 - Info Summary Max Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-summary-max-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-summary-max-length/[0m
[1m
Request ID [0m[33m12959542-ce0deb79-c5b8-429f-9469-85aca14ff07e[0m
[1m- Name: [0m[36mOpenAPI V3 - Info Version[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-version/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-version/[0m
[1m
Request ID [0m[33m12959542-14911233-7e7e-401d-86de-5dbc2628700a[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Example[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-example/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-example/[0m
[1m
Request ID [0m[33m12959542-49d8ca48-53b4-44ce-9570-14b9e7ace408[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties Names Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties-names-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties-names-length/[0m
[1m
Request ID [0m[33m12959542-e8b8444b-754a-43ce-8ab4-492119b98613[0m
[1m- Name: [0m[36mOpenAPI V3 - Info License[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-license/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-license/[0m
[1m
Request ID [0m[33m12959542-97c85d4d-3420-4e01-ac7a-6ef8ef9d6489[0m
[1m- Name: [0m[36mOpenAPI V3 Components Callbacks Kebab Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-callbacks-kebab-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-callbacks-kebab-case/[0m
[1m
Request ID [0m[33m12959542-0cb2bbac-7a21-465c-b92c-632eac7962c3[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Required[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-required/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-required/[0m
[1m
Request ID [0m[33m12959542-34997584-293a-46c7-8188-0df68dc5d398[0m
[1m- Name: [0m[36mSwagger V2 - Parameters Schema Type Array[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-parameters-schema-type-array/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-parameters-schema-type-array/[0m
[1m
Request ID [0m[33m12959542-d1053b75-d666-49da-9db6-df91820d75d9[0m
[1m- Name: [0m[36mSwagger V2 - Info License[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-license/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-license/[0m
[1m
Request ID [0m[33m12959542-91f75498-16f0-4c02-947a-33ef7b9d8e66[0m
[1m- Name: [0m[36mSwagger V2 Produce XML Media Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org/rules/swagger-v2-produce-xml-media-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: "2.0"
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
host: api.example.com
basePath: /
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        type: string
      tags:
      - Restaurant
      responses:
        '200':
            description: Restaurant
            schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      parameters:
      - name: body
        in: body    
        schema:
            "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
            description: Restaurant
            schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        type: string
      tags:
      - Restaurant
      responses:
        '200':
            description: Restaurant
            schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
        - name: restaurantId
          in: path
          description: The unique id.
          required: true
          type: string
        - name: body
          in: body    
          schema:
            "$ref": "#/components/schemas/Restaurant"          
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
definitions:
    RestaurantListing:
        type: array
        items:
            "$ref": "#/components/schemas/Restaurant"
    Restaurant:
        type: object
        properties:
            id:
                type: integer
                format: int64
            servesCuisine:
                description: The cuisine served.
                type: string
            starRating:
                description: Rating for the business.
                type: string
            menu:
                description: Text of the menu.
                type: string
            acceptsReservations:
                description: Where it takes reservations.
                type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-produce-xml-media-type/[0m
[1m
Request ID [0m[33m12959542-8aef2718-f3a0-4cb7-b27d-67cc9360fe35[0m
[1m- Name: [0m[36mSwagger V2 - Schema Description Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-description-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-description-length/[0m
[1m
Request ID [0m[33m12959542-4a2a9324-5110-4d2a-9762-381eed0a36d4[0m
[1m- Name: [0m[36mSwagger V2 - Parameters In[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-parameters-in/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-parameters-in/[0m
[1m
Request ID [0m[33m12959542-6ac2e9ad-474a-40a0-90f7-dffcbfc396aa[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Name Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-name-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-name-length/[0m
[1m
Request ID [0m[33m12959542-7a7c2996-0f97-4f6d-ab95-0443dd695127[0m
[1m- Name: [0m[36mSwagger V2 - Parameters Name Word Check[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-parameters-name-word-check/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-parameters-name-word-check/[0m
[1m
Request ID [0m[33m12959542-f2057267-ea0d-45f5-9697-c4db40b7d65e[0m
[1m- Name: [0m[36mOpenAPI V3 - Info Title Max Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-title-max-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-title-max-length/[0m
[1m
Request ID [0m[33m12959542-c6c26ce8-5478-4306-b4db-fb289987cc6f[0m
[1m- Name: [0m[36mSwagger V2 - Tags Description[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-tags-description/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-tags-description/[0m
[1m
Request ID [0m[33m12959542-38b9b971-6b74-4e4d-b154-0e87cc4b6408[0m
[1m- Name: [0m[36mOpenAPI V3 - Operations Summary Words Check[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-operations-summary-words-check/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-operations-summary-words-check/[0m
[1m
Request ID [0m[33m12959542-3cd2758c-2181-4076-bbbc-ff26bcf2f2d6[0m
[1m- Name: [0m[36mSwagger V2 - Version Date Format[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-version-date-format/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-version-date-format/[0m
[1m
Request ID [0m[33m12959542-885d3d18-bdf6-48e9-a8c1-6cebcc516db0[0m
[1m- Name: [0m[36mSwagger V2 - Parameters Example[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-parameters-example/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-parameters-example/[0m
[1m
Request ID [0m[33m12959542-220012e9-3bcc-4cb5-acb9-7da919bee115[0m
[1m- Name: [0m[36mSwagger V2 - Schema Properties Names Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-properties-names-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-properties-names-length/[0m
[1m
Request ID [0m[33m12959542-a8d1242b-2ee6-46ae-b45a-44935cf3617c[0m
[1m- Name: [0m[36mOpenAPI V3 - Do Not Use API for Base Path[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-do-not-use-api-for-base-path/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-do-not-use-api-for-base-path/[0m
[1m
Request ID [0m[33m12959542-bef236ae-46b0-41d0-be11-36be27aed2b7[0m
[1m- Name: [0m[36mOpenAPI V3 Components Responses Pascal Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-responses-pascal-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-responses-pascal-case/[0m
[1m
Request ID [0m[33m12959542-de4ddcb3-c4bf-412d-8942-8884b70eb85d[0m
[1m- Name: [0m[36mOpenAPI V3 - Response DELETE 204 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-delete-204-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-delete-204-status-code/[0m
[1m
Request ID [0m[33m12959542-251e673d-e6f6-44f9-8672-ec0c4e32df93[0m
[1m- Name: [0m[36mSwagger V2 - Parameters Description[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-parameters-description/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-parameters-description/[0m
[1m
Request ID [0m[33m12959542-68ecd93a-b40b-432f-bd32-200d33d4e803[0m
[1m- Name: [0m[36mSwagger V2 - Schema Properties Define Array Boundaries[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-properties-define-array-boundaries/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-properties-define-array-boundaries/[0m
[1m
Request ID [0m[33m12959542-a1fd623b-e15c-4316-b358-d8668f0644ad[0m
[1m- Name: [0m[36mSwagger V2 - Schema Properties Define Number Boundaries[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-properties-define-number-boundaries/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-properties-define-number-boundaries/[0m
[1m
Request ID [0m[33m12959542-b3005716-ea32-40b6-805f-c2290a73220e[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties Allowed Integer Format[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties-allowed-integer-format/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties-allowed-integer-format/[0m
[1m
Request ID [0m[33m12959542-aa450b7a-439a-4477-99a3-205b2ca669d7[0m
[1m- Name: [0m[36mOpenAPI V3 - Response DELETE 500 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-delete-500-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-delete-500-status-code/[0m
[1m
Request ID [0m[33m12959542-4372bb5c-77b9-4dd9-a050-f2722fd6d2a2[0m
[1m- Name: [0m[36mOpenAPI V3 - Response POST 500 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-post-500-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-post-500-status-code/[0m
[1m
Request ID [0m[33m12959542-a2458625-adb4-4c7d-b014-59b89445a4d4[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Name Word Check[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-name-word-check/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-name-word-check/[0m
[1m
Request ID [0m[33m12959542-7dfbcd5c-4987-415a-a9f2-18710c12ab81[0m
[1m- Name: [0m[36mSwagger V2 Produce XML Media Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-produce-xml-media-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-produce-xml-media-type/[0m
[1m
Request ID [0m[33m12959542-f221f851-a4a9-417b-bf44-f43c06d4d93d[0m
[1m- Name: [0m[36mSwagger V2 - Response PATCH 204 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-response-patch-204-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-response-patch-204-status-code/[0m
[1m
Request ID [0m[33m12959542-0085f6bd-4fa6-4afe-bbbf-d66f26c36cde[0m
[1m- Name: [0m[36mOpenAPI V3 Components Parameters Camel Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-parameters-camel-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-parameters-camel-case/[0m
[1m
Request ID [0m[33m12959542-214a28dc-b3fe-463c-89c2-fbbd03d8303f[0m
[1m- Name: [0m[36mSwagger V2 - Schema Names Camel Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-names-camel-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-names-camel-case/[0m
[1m
Request ID [0m[33m12959542-733c9d4e-3766-4a45-ae5a-6186463b53d5[0m
[1m- Name: [0m[36mOpenAPI V3 - Request Body on POST[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-request-body-on-post/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-request-body-on-post/[0m
[1m
Request ID [0m[33m12959542-d3acfd48-ce9a-4a07-b6b1-6599b8d202b1[0m
[1m- Name: [0m[36mOpenAPI V3 - Request Body on PUT[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-request-body-on-put/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-request-body-on-put/[0m
[1m
Request ID [0m[33m12959542-fa119c29-4784-4431-b95c-807839cdd311[0m
[1m- Name: [0m[36mOpenAPI V3 - Operations Operation IDs Pascal Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/oopenapi-v3-perations-operation-ids-pascal-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/oopenapi-v3-perations-operation-ids-pascal-case/[0m
[1m
Request ID [0m[33m12959542-4afb9890-8c4e-4317-b4cf-768e39b9ca75[0m
[1m- Name: [0m[36mSwagger V2 - Info Contact Email[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-contact-email/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-contact-email/[0m
[1m
Request ID [0m[33m12959542-089a5be7-2060-4682-aa2b-41070de40969[0m
[1m- Name: [0m[36mOpenAPI V3 - Response PATCH 204 No Body[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-patch-204-no-body/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-patch-204-no-body/[0m
[1m
Request ID [0m[33m12959542-4fc9553c-b218-4797-b58e-94843f661175[0m
[1m- Name: [0m[36mOpenAPI V3 Components Parameters Pascal Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-parameters-pascal-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-parameters-pascal-case/[0m
[1m
Request ID [0m[33m12959542-aa31eb88-bba2-42c7-8fb1-c4dc9076bbd7[0m
[1m- Name: [0m[36mOpenAPI V3 - Response PUT 500 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-put-500-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-put-500-status-code/[0m
[1m
Request ID [0m[33m12959542-a33a7845-5b97-488a-8b62-f4bb33f31eae[0m
[1m- Name: [0m[36mSwagger V2 - Response PUT 204 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-response-put-204-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-response-put-204-status-code/[0m
[1m
Request ID [0m[33m12959542-d638f60b-a279-4b2f-b246-43162afa90f7[0m
[1m- Name: [0m[36mSwagger V2 - Info Description Max Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-description-max-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-description-max-length/[0m
[1m
Request ID [0m[33m12959542-d062469b-4245-4fb3-943f-595e4486fe15[0m
[1m- Name: [0m[36mSwagger V2 - Parameters Description Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-parameters-description-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-parameters-description-length/[0m
[1m
Request ID [0m[33m12959542-24b8e968-4639-447f-b46b-edd8650df2ef[0m
[1m- Name: [0m[36mOpenAPI V3 - Info License Url Mit[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-license-url-mit/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-license-url-mit/[0m
[1m
Request ID [0m[33m12959542-300685fb-4b1e-4c06-a210-72a45a5398d6[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties Allowed Number Format[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties-allowed-number-format/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties-allowed-number-format/[0m
[1m
Request ID [0m[33m12959542-39069005-4115-4b46-94b8-7d405a8907d0[0m
[1m- Name: [0m[36mSwagger V2 - No Request Body on GET[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-no-request-body-on-get/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-no-request-body-on-get/[0m
[1m
Request ID [0m[33m12959542-2948cd0b-cd30-4993-baba-5121029f0817[0m
[1m- Name: [0m[36mSwagger V2 - Operations Tags One[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-operations-tags-one/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-operations-tags-one/[0m
[1m
Request ID [0m[33m12959542-ff631168-e71f-45f4-bf5a-070932d20206[0m
[1m- Name: [0m[36mOpenAPI V3 Have Request Body Examples[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-have-request-body-examples/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-have-request-body-examples/[0m
[1m
Request ID [0m[33m12959542-f7d85374-47f9-4e5f-82de-8e9f41563c18[0m
[1m- Name: [0m[36mSwagger V2 - Schema Description[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-description/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-description/[0m
[1m
Request ID [0m[33m12959542-22349719-4c63-4ae8-b27a-d4dfd9428c07[0m
[1m- Name: [0m[36mSwagger V2 - Schema Required[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-required/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-required/[0m
[1m
Request ID [0m[33m12959542-73b58c16-7a7e-4d4f-9d38-a74682f5343d[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Description Words[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-description-words/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-description-words/[0m
[1m
Request ID [0m[33m12959542-13c3b17d-754b-4b1c-9c01-85f0aa4754a4[0m
[1m- Name: [0m[36mOpenAPI V3 - No Request Body on DELETE[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-no-request-body-on-delete/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-no-request-body-on-delete/[0m
[1m
Request ID [0m[33m12959542-9cfa3214-9e54-4ba2-8fd7-13b77aa2b70c[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Names Words[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-names-words/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-names-words/[0m
[1m
Request ID [0m[33m12959542-eff230b7-0e80-429d-8c90-5330377eb237[0m
[1m- Name: [0m[36mSwagger V2 - Operations Summary Words Check[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-operations-summary-words-check/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-operations-summary-words-check/[0m
[1m
Request ID [0m[33m12959542-63de6b46-cff6-4ca8-94c8-02dc54bf2ac3[0m
[1m- Name: [0m[36mSwagger V2 - Parameters Name Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-parameters-name-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-parameters-name-length/[0m
[1m
Request ID [0m[33m12959542-4e60899b-2ac7-4791-a715-e8919ced65f0[0m
[1m- Name: [0m[36mSwagger V2 - Parameters Name Pascal Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-parameters-name-pascal-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-parameters-name-pascal-case/[0m
[1m
Request ID [0m[33m12959542-c2581b33-2727-49e1-9220-ff60fd515519[0m
[1m- Name: [0m[36mOpenAPI V3 Components Schemas Pascal Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-schemas-pascal-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-schemas-pascal-case/[0m
[1m
Request ID [0m[33m12959542-2e62326e-c172-4e15-b8f9-cf9a71fb0602[0m
[1m- Name: [0m[36mOpenAPI V3 - OpenAPI Version[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-openapi-version/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-openapi-version/[0m
[1m
Request ID [0m[33m12959542-e78da04a-211e-4a6a-941d-6b3b40d7dc64[0m
[1m- Name: [0m[36mSwagger V2 - Response DELETE 204 No Body[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-response-delete-204-no-body/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-response-delete-204-no-body/[0m
[1m
Request ID [0m[33m12959542-607c2ad6-56a8-412e-9722-6c3eea965299[0m
[1m- Name: [0m[36mSwagger V2 - Schema Properties Descriptions[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-properties-descriptions/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-properties-descriptions/[0m
[1m
Request ID [0m[33m12959542-ee8e222e-3c13-4d72-8ab8-30a93f9ca918[0m
[1m- Name: [0m[36mOpenAPI V3 - Info Terms Of Service[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-terms-of-service/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-terms-of-service/[0m
[1m
Request ID [0m[33m12959542-2b692591-03db-4c2d-8a1b-d035b5ca6c03[0m
[1m- Name: [0m[36mSwagger V2 - Schema Names Words[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-names-words/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-names-words/[0m
[1m
Request ID [0m[33m12959542-29d385bd-7bb9-43b7-97f5-240e2a09a28b[0m
[1m- Name: [0m[36mOpenAPI V3 - Responses Examples[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-responses-examples/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-responses-examples/[0m
[1m
Request ID [0m[33m12959542-45fbcdeb-32d2-4786-b85e-979f66aede55[0m
[1m- Name: [0m[36mOpenAPI V3 - Info License Name[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-license-name/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-license-name/[0m
[1m
Request ID [0m[33m12959542-1be19d47-115c-4b9a-a341-3d6a7f060d50[0m
[1m- Name: [0m[36mOpenAPI V3 - Response GET 500 Problem JSON Media Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-get-500-problem-json-media-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-get-500-problem-json-media-type/[0m
[1m
Request ID [0m[33m12959542-490e1840-e37e-48be-8abb-f935ee417287[0m
[1m- Name: [0m[36mOpenAPI V3 Components Responses Camel Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-responses-camel-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-responses-camel-case/[0m
[1m
Request ID [0m[33m12959542-468d68ec-14a0-4625-90f2-ad46a38682e5[0m
[1m- Name: [0m[36mSwagger V2 - No Trailing Slash on Paths[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-no-trailing-slash-on-paths/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-no-trailing-slash-on-paths/[0m
[1m
Request ID [0m[33m12959542-657a3516-60e0-4642-9a86-7c62d1530d67[0m
[1m- Name: [0m[36mSwagger V2 - Parameters Description Word Check[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-parameters-description-word-check/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-parameters-description-word-check/[0m
[1m
Request ID [0m[33m12959542-13dd5f2f-60d3-4ee9-b891-352da87c57b2[0m
[1m- Name: [0m[36mOpenAPI V3 - Info Summary[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-summary/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-summary/[0m
[1m
Request ID [0m[33m12959542-63110e88-bbb7-4680-b9af-0b78aa2c0eab[0m
[1m- Name: [0m[36mSwagger V2 - Info X API Id[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-x-api-id/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-x-api-id/[0m
[1m
Request ID [0m[33m12959542-893293d6-00ee-4a10-a4ca-31e3c4325fd1[0m
[1m- Name: [0m[36mOpenAPI V3 Components Request Bodies Pascal Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-request-bodies-pascal-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-request-bodies-pascal-case/[0m
[1m
Request ID [0m[33m12959542-ab8a1377-e627-4d77-a50e-a7a1d856936c[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties Names Camel Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties-names-camel-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties-names-camel-case/[0m
[1m
Request ID [0m[33m12959542-79119b2b-2eb3-4e68-ac50-80ebcda70ea8[0m
[1m- Name: [0m[36mSwagger V2 - Operations Operation IDs Camel Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-operations-operation-ids-camel-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-operations-operation-ids-camel-case/[0m
[1m
Request ID [0m[33m12959542-cd1ffc04-5bc8-4f96-8819-000d695dc101[0m
[1m- Name: [0m[36mSwagger V2 - Schema Properties[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-properties/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-properties/[0m
[1m
Request ID [0m[33m12959542-735600e8-897f-4b35-938f-83384b10dafa[0m
[1m- Name: [0m[36mSwagger V2 Consume XML Media Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-consume-xml-media-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-consume-xml-media-type/[0m
[1m
Request ID [0m[33m12959542-c1ee04be-f3ed-4f76-8ab8-c4ab13fe59e3[0m
[1m- Name: [0m[36mSwagger V2 - Response PUT 500 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-response-put-500-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-response-put-500-status-code/[0m
[1m
Request ID [0m[33m12959542-6e885e9b-d819-43d3-8c1d-007f91c4a4c7[0m
[1m- Name: [0m[36mSwagger V2 - Schema Properties Names Snake Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-properties-names-snake-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-properties-names-snake-case/[0m
[1m
Request ID [0m[33m12959542-edad82f9-69d0-443b-852c-3b3356fa6424[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties/[0m
[1m
Request ID [0m[33m12959542-0844e317-9469-4883-9e7f-b31582fb576e[0m
[1m- Name: [0m[36mSwagger V2 - Parameters Schema Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-parameters-schema-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-parameters-schema-type/[0m
[1m
Request ID [0m[33m12959542-edc3b3ee-dc2f-484f-b7d6-c6ed7ecf077e[0m
[1m- Name: [0m[36mOpenAPI V3 - Version Second Segment[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-version-segment-second/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-version-segment-second/[0m
[1m
Request ID [0m[33m12959542-9f3533e7-bf5e-48f3-9d59-46d9b343f0d1[0m
[1m- Name: [0m[36mOpenAPI V3 - Trailing Slash on Paths[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-trailing-slash-on-paths/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-trailing-slash-on-paths/[0m
[1m
Request ID [0m[33m12959542-4268e5c0-cb2f-44e7-9351-7ff7916fd9c4[0m
[1m- Name: [0m[36mSwagger V2 - Operations Description[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-operations-description/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-operations-description/[0m
[1m
Request ID [0m[33m12959542-1f7e0bef-ef45-41d2-ab57-ffc3a75d1d1f[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties Names Pascal Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties-names-pascal-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties-names-pascal-case/[0m
[1m
Request ID [0m[33m12959542-a11ec3c8-7ae2-4a3e-af0a-d045af2aa120[0m
[1m- Name: [0m[36mOpenAPI V3 - Response POST 201 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-post-201-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-post-201-status-code/[0m
[1m
Request ID [0m[33m12959542-20df0d00-89c7-44be-a9e1-17d487cf1c2b[0m
[1m- Name: [0m[36mSwagger V2 - Swagger Version[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-openapi-version/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-openapi-version/[0m
[1m
Request ID [0m[33m12959542-1137a66b-f858-47d7-9a1e-539895999344[0m
[1m- Name: [0m[36mOpenAPI V3 - Operations Description Words Check[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-operations-description-words-check/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-operations-description-words-check/[0m
[1m
Request ID [0m[33m12959542-59266451-7756-4a96-ae16-20c2584007f5[0m
[1m- Name: [0m[36mOpenAPI V3 Components Request Bodies Camel Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-request-bodies-camel-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-request-bodies-camel-case/[0m
[1m
Request ID [0m[33m12959542-704dea23-347f-42bb-b49f-fc904eec2e56[0m
[1m- Name: [0m[36mOpenAPI V3 - Limit Number of Sub-resources[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-limit-number-of-sub-resources/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-limit-number-of-sub-resources/[0m
[1m
Request ID [0m[33m12959542-035fa667-44a5-4341-b8d7-6aeca2eadae9[0m
[1m- Name: [0m[36mSwagger V2 - Info License Url Mit[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-license-url-mit/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-license-url-mit/[0m
[1m
Request ID [0m[33m12959542-41a63e8b-d8d1-4039-8498-61a3a4070d7d[0m
[1m- Name: [0m[36mOpenAPI V3 - Request Body JSON Media Type on PUT[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-request-body-json-media-type-on-put/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-request-body-json-media-type-on-put/[0m
[1m
Request ID [0m[33m12959542-37f5e029-438a-4095-b985-3eae776a963c[0m
[1m- Name: [0m[36mSwagger V2 - Schema Names Snake Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-names-snake-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-names-snake-case/[0m
[1m
Request ID [0m[33m12959542-c8d39eaf-25bd-4f65-a4ef-50d8e7822f95[0m
[1m- Name: [0m[36mOpenAPI V3 - Version Semantic[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-version-semantic/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-version-semantic/[0m
[1m
Request ID [0m[33m12959542-1def4049-c005-4c32-b74f-0993a0bf4bb7[0m
[1m- Name: [0m[36mSwagger V2 - Security Oauth2[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-security-oauth2/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-security-oauth2/[0m
[1m
Request ID [0m[33m12959542-68b7a72f-b63b-472e-9581-906f0b876e09[0m
[1m- Name: [0m[36mSwagger V2 - Info Title Word Check[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-title-word-check/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-title-word-check/[0m
[1m
Request ID [0m[33m12959542-18b38911-769c-4135-a4cb-6147717c50cb[0m
[1m- Name: [0m[36mOpenAPI V3 - Limit Number of Paths[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-limit-number-of-paths/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-limit-number-of-paths/[0m
[1m
Request ID [0m[33m12959542-73d191b4-cc53-42be-a8cd-8ace76b0f76e[0m
[1m- Name: [0m[36mSwagger V2 Have GET Method[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-have-get-method/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-have-get-method/[0m
[1m
Request ID [0m[33m12959542-0d5124de-6b36-4631-bc09-4dcee36fb3e1[0m
[1m- Name: [0m[36mOpenAPI V3 - Operations Operation IDs Kebab Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-operations-operation-ids-kebab-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-operations-operation-ids-kebab-case/[0m
[1m
Request ID [0m[33m12959542-d4a4c579-b27a-4eac-80ab-4d8bbadb7d42[0m
[1m- Name: [0m[36mSwagger V2 - No Empty Paths[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-no-empty-paths/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-no-empty-paths/[0m
[1m
Request ID [0m[33m12959542-3d481428-8ea8-41a0-9cf1-06a1120a574f[0m
[1m- Name: [0m[36mOpenAPI V3 - Response PUT 204 No Body[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-put-204-no-body/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-put-204-no-body/[0m
[1m
Request ID [0m[33m12959542-acf483b7-9222-4f9f-b25a-b86604138277[0m
[1m- Name: [0m[36mSwagger V2 - Operations Operationids Pascal Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/oswagger-v2-perations-operationids-pascal-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/oswagger-v2-perations-operationids-pascal-case/[0m
[1m
Request ID [0m[33m12959542-7bc43d2e-16a0-497f-95bf-6b38a05ef718[0m
[1m- Name: [0m[36mSwagger V2 - Do Not Use API for Base Path[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-do-not-use-api-for-base-path/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-do-not-use-api-for-base-path/[0m
[1m
Request ID [0m[33m12959542-9d0b25a5-bdcb-41cc-8ea8-b20634b8f890[0m
[1m- Name: [0m[36mOpenAPI V3 - Operations Summary Period None[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-operations-summary-period-none/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-operations-summary-period-none/[0m
[1m
Request ID [0m[33m12959542-9ec0b40b-4c66-4492-9b47-0ab54c1ead1b[0m
[1m- Name: [0m[36mOpenAPI V3 Components Schemas Camel Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-schemas-camel-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-schemas-camel-case/[0m
[1m
Request ID [0m[33m12959542-888fe706-1d3a-4eed-a735-b259e4e9cf3e[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Description[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-description/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-description/[0m
[1m
Request ID [0m[33m12959542-ed66deac-42c1-4c0d-9861-7635185edc95[0m
[1m- Name: [0m[36mOpenAPI V3 Responses Schema Components[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-responses-schema-components/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-responses-schema-components/[0m
[1m
Request ID [0m[33m12959542-a2331df2-741a-40d4-969d-d8a7ec4f4148[0m
[1m- Name: [0m[36mOpenAPI V3 - Request Body JSON Media Type on PATCH[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-request-body-json-media-type-on-patch/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-request-body-json-media-type-on-patch/[0m
[1m
Request ID [0m[33m12959542-19b8375f-93e5-43f4-b92b-37c9308689a9[0m
[1m- Name: [0m[36mSwagger V2 - Schema Properties Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-properties-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-properties-type/[0m
[1m
Request ID [0m[33m12959542-c7b4f49b-b733-404a-9eb9-e7d2ef325dac[0m
[1m- Name: [0m[36mOpenAPI V3 - No Request Body on GET[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-no-request-body-on-get/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-no-request-body-on-get/[0m
[1m
Request ID [0m[33m12959542-f7c6726c-2d15-4309-86a4-9bc68e345000[0m
[1m- Name: [0m[36mOpenAPI V3 - Response DELETE 204 Problem JSON Media Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-delete-204-problem-json-media-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-delete-204-problem-json-media-type/[0m
[1m
Request ID [0m[33m12959542-bef7e665-cf96-4bb7-98ec-d5da5771f07f[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties Descriptions Words[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties-descriptions-words/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties-descriptions-words/[0m
[1m
Request ID [0m[33m12959542-078598fb-a198-4db9-8427-e77bf779b276[0m
[1m- Name: [0m[36mOpenAPI V3 - Response PUT 204 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-put-204-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-put-204-status-code/[0m
[1m
Request ID [0m[33m12959542-d9270e51-66d7-4771-bdbe-33cc3023622f[0m
[1m- Name: [0m[36mOpenAPI V3 - Tags Description[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-tags-description/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-tags-description/[0m
[1m
Request ID [0m[33m12959542-2be27609-1f37-4ca2-bab3-58a726f2f237[0m
[1m- Name: [0m[36mSwagger V2 Produce JSON Media Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org/rules/swagger-v2-produce-json-media-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: "2.0"
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
host: api.example.com
basePath: /
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        type: string
      tags:
      - Restaurant
      responses:
        '200':
            description: Restaurant
            schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      parameters:
      - name: body
        in: body    
        schema:
            "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
            description: Restaurant
            schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        type: string
      tags:
      - Restaurant
      responses:
        '200':
            description: Restaurant
            schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
        - name: restaurantId
          in: path
          description: The unique id.
          required: true
          type: string
        - name: body
          in: body    
          schema:
            "$ref": "#/components/schemas/Restaurant"          
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
definitions:
    RestaurantListing:
        type: array
        items:
            "$ref": "#/components/schemas/Restaurant"
    Restaurant:
        type: object
        properties:
            id:
                type: integer
                format: int64
            servesCuisine:
                description: The cuisine served.
                type: string
            starRating:
                description: Rating for the business.
                type: string
            menu:
                description: Text of the menu.
                type: string
            acceptsReservations:
                description: Where it takes reservations.
                type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-produce-json-media-type/[0m
[1m
Request ID [0m[33m12959542-aba7b48e-f5ed-441f-8b7c-52112f3dd694[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters In[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-in/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-in/[0m
[1m
Request ID [0m[33m12959542-92c887e1-a61b-43aa-bf80-8da30fc4a014[0m
[1m- Name: [0m[36mSwagger V2 - Security Applied to Operations[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-security-applied-to-operations/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-security-applied-to-operations/[0m
[1m
Request ID [0m[33m12959542-e04b0c2a-38e2-4559-9f7d-969ad7d360ab[0m
[1m- Name: [0m[36mOpenAPI V3 - Info Title In Kebab Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-title-in-kebab-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-title-in-kebab-case/[0m
[1m
Request ID [0m[33m12959542-73068cfa-0e32-4145-8250-ceb763d467b5[0m
[1m- Name: [0m[36mOpenAPI V3 Components Callbacks Camel Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-callbacks-camel-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-callbacks-camel-case/[0m
[1m
Request ID [0m[33m12959542-b6ad4ed4-3003-45bb-bf29-a517d1fff025[0m
[1m- Name: [0m[36mOpenAPI V3 Responses Examples Components[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-responses-examples-components/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-responses-examples-components/[0m
[1m
Request ID [0m[33m12959542-03719c5f-f20b-48c0-aa3f-3684c20c8292[0m
[1m- Name: [0m[36mSwagger V2 - Operations Summary[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-operations-summary/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-operations-summary/[0m
[1m
Request ID [0m[33m12959542-b32d6b19-1081-4b70-a58c-972757ce58a0[0m
[1m- Name: [0m[36mSwagger V2 - Schema Names Pascal Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-names-pascal-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-names-pascal-case/[0m
[1m
Request ID [0m[33m12959542-010125a2-7ff7-44f3-88fb-e96e06e3b2f8[0m
[1m- Name: [0m[36mOpenAPI V3 Components Examples Snake Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-examples-snake-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-examples-snake-case/[0m
[1m
Request ID [0m[33m12959542-3a048a74-0da6-4f16-8b29-c316530451e2[0m
[1m- Name: [0m[36mOpenAPI V3 Info Description[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-description/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-description/[0m
[1m
Request ID [0m[33m12959542-cdf8d776-a292-41df-8249-2e2f20f67d3a[0m
[1m- Name: [0m[36mOpenAPI V3 - Response PATCH 204 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-patch-204-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-patch-204-status-code/[0m
[1m
Request ID [0m[33m12959542-776148b2-7332-4c4b-ab83-52986a53fd0a[0m
[1m- Name: [0m[36mOpenAPI V3 - Operations Summary Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-operations-summary-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-operations-summary-length/[0m
[1m
Request ID [0m[33m12959542-8e15f11f-285d-4495-9aca-6c4e044fabe5[0m
[1m- Name: [0m[36mSwagger V2 - Info License Name[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-license-name/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-license-name/[0m
[1m
Request ID [0m[33m12959542-3499b8f9-16b9-4d1c-83c6-4158eb1807ad[0m
[1m- Name: [0m[36mOpenAPI V3 - Info Contact[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-contact/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-contact/[0m
[1m
Request ID [0m[33m12959542-3099fa6e-137b-4c64-8175-056a94693043[0m
[1m- Name: [0m[36mSwagger V2 Consume JSON Media Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-consume-json-media-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-consume-json-media-type/[0m
[1m
Request ID [0m[33m12959542-42d6d969-4a03-42e3-8f6a-922ff70d2b55[0m
[1m- Name: [0m[36mSwagger V2 Consume JSON Media Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-consume-json-media-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-consume-json-media-type/[0m
[1m
Request ID [0m[33m12959542-d5325d61-02cd-4ee1-9d41-aef487c4d103[0m
[1m- Name: [0m[36mSwagger V2 - Schema Properties Allowed Number Format[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-properties-allowed-number-format/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-properties-allowed-number-format/[0m
[1m
Request ID [0m[33m12959542-cfd953d7-e23f-48e0-99f0-da4d408b4001[0m
[1m- Name: [0m[36mOpenAPI V3 Components Links Kebab Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-links-kebab-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-links-kebab-case/[0m
[1m
Request ID [0m[33m12959542-581e33c8-209e-4a87-bad6-3de501c5099e[0m
[1m- Name: [0m[36mSwagger V2 Info Description Word Check[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-description-word-check/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-description-word-check/[0m
[1m
Request ID [0m[33m12959542-8a697fc1-edad-4375-afab-f3bde91c7828[0m
[1m- Name: [0m[36mOpenAPI V3 - Responses Schema Object[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-responses-schema-object/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-responses-schema-object/[0m
[1m
Request ID [0m[33m12959542-25b9ae8c-490e-43d0-999f-34e83370fb91[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties Define Number Boundaries[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties-define-number-boundaries/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties-define-number-boundaries/[0m
[1m
Request ID [0m[33m12959542-df579811-9dd4-490c-abea-1c1de0ea0cd9[0m
[1m- Name: [0m[36mSwagger V2 - No Path Dashes[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-no-path-dashes/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-no-path-dashes/[0m
[1m
Request ID [0m[33m12959542-5b383904-fedb-4806-80b5-f3dbeee2191c[0m
[1m- Name: [0m[36mOpenAPI V3 - Request Body JSON Media Type on POST[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-request-body-json-media-type-on-post/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-request-body-json-media-type-on-post/[0m
[1m
Request ID [0m[33m12959542-78693854-b6f0-4bf2-a54e-e4f9a1965cae[0m
[1m- Name: [0m[36mSwagger V2 - Schema Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-type/[0m
[1m
Request ID [0m[33m12959542-f4159906-768d-4157-9b26-750cf53c78c1[0m
[1m- Name: [0m[36mSwagger V2 - Security API Key[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-security-api-key/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-security-api-key/[0m
[1m
Request ID [0m[33m12959542-58bff505-d432-4470-bbec-feeb0a3e5614[0m
[1m- Name: [0m[36mSwagger V2 - Schema Properties Names Camel Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-properties-names-camel-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-properties-names-camel-case/[0m
[1m
Request ID [0m[33m12959542-e33d14be-4e48-46be-b3d3-8b0bc382ea78[0m
[1m- Name: [0m[36mOpenAPI V3 Security Scheme Basic[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-security-scheme-basic/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-security-scheme-basic/[0m
[1m
Request ID [0m[33m12959542-860baf03-d419-428a-bd73-6e5961ea5c42[0m
[1m- Name: [0m[36mSwagger V2 - Operations Description Words Check[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-operations-description-words-check/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-operations-description-words-check/[0m
[1m
Request ID [0m[33m12959542-c73d5c65-8e27-44ca-a7fe-bdb34b1f9c3f[0m
[1m- Name: [0m[36mOpenAPI V3 - Response PUT 204 Problem JSON Media Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-put-204-problem-json-media-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-put-204-problem-json-media-type/[0m
[1m
Request ID [0m[33m12959542-e44442a5-a0fb-4e06-83ee-5809b1873b7a[0m
[1m- Name: [0m[36mSwagger V2 - Schema Properties Descriptions Words[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-properties-descriptions-words/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-properties-descriptions-words/[0m
[1m
Request ID [0m[33m12959542-fc08d4a5-f43b-4520-92bb-dd0c50d223d4[0m
[1m- Name: [0m[36mOpenAPI V3 Components Schemas Kebab Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-schemas-kebab-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-schemas-kebab-case/[0m
[1m
Request ID [0m[33m12959542-e0fcc6fd-34b3-4e9d-a18b-a1415000f299[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Schema Type Array[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-schema-type-array/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-schema-type-array/[0m
[1m
Request ID [0m[33m12959542-d485fc9c-2e7d-42ff-936e-5e57594ef7d1[0m
[1m- Name: [0m[36mSwagger V2 - Parameters Schema[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-parameters-schema/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-parameters-schema/[0m
[1m
Request ID [0m[33m12959542-a427bb4b-7452-4243-ba9a-8800a689b567[0m
[1m- Name: [0m[36mSwagger V2 - Limit Number of Sub-resources[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-limit-number-of-sub-resources/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-limit-number-of-sub-resources/[0m
[1m
Request ID [0m[33m12959542-75a3f79c-bc9a-466d-b5ca-ca06c42e917e[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Description Word Check[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-description-word-check/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-description-word-check/[0m
[1m
Request ID [0m[33m12959542-bddb71d6-2d21-4a8b-94c4-baf060facfee[0m
[1m- Name: [0m[36mOpenAPI V3 - Operations Tags One[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-operations-tags-one/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-operations-tags-one/[0m
[1m
Request ID [0m[33m12959542-e63637e1-a3ae-4252-a1f4-5662bc2dd8f4[0m
[1m- Name: [0m[36mOpenAPI V3 Components Links Camel Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-links-camel-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-links-camel-case/[0m
[1m
Request ID [0m[33m12959542-fef0efca-2a91-4352-995e-02af2ca617b1[0m
[1m- Name: [0m[36mSwagger V2 - Schema Names Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-names-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-names-length/[0m
[1m
Request ID [0m[33m12959542-2b3a9dcd-5373-4b97-984b-4e3acd496687[0m
[1m- Name: [0m[36mOpenAPI V3 Components Responses Kebab Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-responses-kebab-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-responses-kebab-case/[0m
[1m
Request ID [0m[33m12959542-d86cef0e-3e98-4ef8-ba31-d8c7ac95190a[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties Define Array Boundaries[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties-define-array-boundaries/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties-define-array-boundaries/[0m
[1m
Request ID [0m[33m12959542-99bc7d25-c57b-4536-b4d2-dd2e7ef7a3ed[0m
[1m- Name: [0m[36mSwagger V2 - Parameters Name Camel Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-parameters-name-camel-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-parameters-name-camel-case/[0m
[1m
Request ID [0m[33m12959542-955d2347-0984-442a-9ffb-ce990d4a59d1[0m
[1m- Name: [0m[36mSwagger V2 - Info Title[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-title/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-title/[0m
[1m
Request ID [0m[33m12959542-5666797a-7d74-4eac-adf8-14789c5a4ec9[0m
[1m- Name: [0m[36mSwagger V2 - Response GET 200 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-response-get-200-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-response-get-200-status-code/[0m
[1m
Request ID [0m[33m12959542-91370f0b-8593-45c9-9655-63b5a368678e[0m
[1m- Name: [0m[36mOpenAPI V3 - Info Title[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-title/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-title/[0m
[1m
Request ID [0m[33m12959542-676a2df0-6b1b-4a5b-af8d-3b8333303774[0m
[1m- Name: [0m[36mOpenAPI V3 - Info Description Max Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-description-max-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-description-max-length/[0m
[1m
Request ID [0m[33m12959542-5ba720f6-97d8-4216-b320-180f58532a5e[0m
[1m- Name: [0m[36mSwagger V2 - Info Title Max Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-title-max-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-title-max-length/[0m
[1m
Request ID [0m[33m12959542-6f386646-5a61-49e6-bb6c-ac69d39099d9[0m
[1m- Name: [0m[36mOpenAPI V3 - Response PATCH 204 Problem JSON Media Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-patch-204-problem-json-media-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-patch-204-problem-json-media-type/[0m
[1m
Request ID [0m[33m12959542-977a88a6-78ce-43e9-971d-4c2c655d80e5[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Name[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-name/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-name/[0m
[1m
Request ID [0m[33m12959542-6c82eb26-5fb7-4ec1-a854-56d32b88823a[0m
[1m- Name: [0m[36mSwagger V2 - Trailing Slash on Paths[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-trailing-slash-on-paths/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-trailing-slash-on-paths/[0m
[1m
Request ID [0m[33m12959542-8784a59a-0269-40f0-a967-7455844b6264[0m
[1m- Name: [0m[36mOpenAPI V3 HTTPS Only[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-https-only/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-https-only/[0m
[1m
Request ID [0m[33m12959542-b457beb9-7688-47bf-bd99-de08318c886e[0m
[1m- Name: [0m[36mSwagger V2 - Response GET 500 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-response-get-500-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-response-get-500-status-code/[0m
[1m
Request ID [0m[33m12959542-5e236e22-7760-468c-a249-add997c053c2[0m
[1m- Name: [0m[36mOpenAPI V3 Components Schemas Snake Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-schemas-snake-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-schemas-snake-case/[0m
[1m
Request ID [0m[33m12959542-28abd24e-7636-4019-a073-35004b6f78cd[0m
[1m- Name: [0m[36mSwagger V2 - Tags One[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-tags-one/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-tags-one/[0m
[1m
Request ID [0m[33m12959542-1fcec952-0220-40af-99c6-3414ff99a332[0m
[1m- Name: [0m[36mOpenAPI V3 - Version Date Format[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-version-date-format/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-version-date-format/[0m
[1m
Request ID [0m[33m12959542-38f23dce-955a-4aa6-b243-cd5847043c3d[0m
[1m- Name: [0m[36mOpenAPI V3 - Request Body on PATCH[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-request-body-on-patch/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-request-body-on-patch/[0m
[1m
Request ID [0m[33m12959542-73d20ac6-56b1-4f91-ba41-2fe61471d47e[0m
[1m- Name: [0m[36mOpenAPI V3 - Use of Response Schema oneOf[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-use-of-response-schema-oneof/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-use-of-response-schema-oneof/[0m
[1m
Request ID [0m[33m12959542-49b40815-25c5-415f-bca5-4e726199b1b9[0m
[1m- Name: [0m[36mSwagger V2 HTTPS Only[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-https-only/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-https-only/[0m
[1m
Request ID [0m[33m12959542-63fd6421-41a4-41a6-a6da-5964083d5738[0m
[1m- Name: [0m[36mOpenAPI V3 - Response Rate Limit Headers[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-rate-limit-headers/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-rate-limit-headers/[0m
[1m
Request ID [0m[33m12959542-325922ea-72e9-469d-800a-be487fad8bea[0m
[1m- Name: [0m[36mOpenAPI V3 Request Body Schema Components[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-request-body-schema-components/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-request-body-schema-components/[0m
[1m
Request ID [0m[33m12959542-86477993-bd49-4785-8681-53a07ba9617e[0m
[1m- Name: [0m[36mSwagger V2 - Info X Audience[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-x-audience/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-x-audience/[0m
[1m
Request ID [0m[33m12959542-5c09a85f-3434-48e3-8eb0-fca0a3795cb0[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties Descriptions[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties-descriptions/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties-descriptions/[0m
[1m
Request ID [0m[33m12959542-e485cead-5704-47c5-ab52-b5db0dd3187c[0m
[1m- Name: [0m[36mSwagger V2 - Info Contact[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-contact/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-contact/[0m
[1m
Request ID [0m[33m12959542-792c7f32-266f-4bb6-afd7-d40caf8df889[0m
[1m- Name: [0m[36mSwagger V2 - Info Title In Kebab Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-title-in-kebab-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-title-in-kebab-case/[0m
[1m
Request ID [0m[33m12959542-7fe279ed-fc18-42fe-8ba8-c6bc13fa7951[0m
[1m- Name: [0m[36mSwagger V2 - Info Title In Kebab Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-title-in-kebab-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-title-in-kebab-case/[0m
[1m
Request ID [0m[33m12959542-c30dc5c2-0104-4c8b-ba55-bf44826c573f[0m
[1m- Name: [0m[36mOpenAPI V3 Components Responses Snake Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-responses-snake-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-responses-snake-case/[0m
[1m
Request ID [0m[33m12959542-0daf75fd-7b71-4b3c-9f61-37f8aa7cb6dd[0m
[1m- Name: [0m[36mOpenAPI V3 Components Parameters Snake Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-parameters-snake-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-parameters-snake-case/[0m
[1m
Request ID [0m[33m12959542-263fe3e9-e24f-4491-a8a9-55057d27615b[0m
[1m- Name: [0m[36mSwagger V2 - Tags Object[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-tags-object/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-tags-object/[0m
[1m
Request ID [0m[33m12959542-02dce69d-5046-43a6-bdc7-9d93aa123937[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties Descriptions Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties-descriptions-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties-descriptions-length/[0m
[1m
Request ID [0m[33m12959542-92bc9d85-74f7-435b-a862-dcf5c07c541a[0m
[1m- Name: [0m[36mOpenAPI V3 - Info License Url[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-license-url/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-license-url/[0m
[1m
Request ID [0m[33m12959542-7ec589c7-6980-404f-ab65-a8f4f21d4c0d[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Name Pascal Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-name-pascal-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-name-pascal-case/[0m
[1m
Request ID [0m[33m12959542-184f7463-b1a0-48b0-a4a1-062c9510b564[0m
[1m- Name: [0m[36mSwagger V2 - Schema Properties Names Pascal Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-properties-names-pascal-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-properties-names-pascal-case/[0m
[1m
Request ID [0m[33m12959542-8ee3c694-2d22-4edf-8741-a3d2cdf57492[0m
[1m- Name: [0m[36mSwagger V2 - Operations Operation IDs Kebab Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-operations-operation-ids-kebab-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-operations-operation-ids-kebab-case/[0m
[1m
Request ID [0m[33m12959542-dc78b886-d783-4c0b-9c99-14cf0e515ea8[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Additional Properties[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-additional-properties/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-additional-properties/[0m
[1m
Request ID [0m[33m12959542-ab52a7b5-7cf1-45cd-85aa-7fbec5817b23[0m
[1m- Name: [0m[36mOpenAPI V3 - Response GET 500 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-get-500-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-get-500-status-code/[0m
[1m
Request ID [0m[33m12959542-b8ed38e1-c3bb-4b1a-861f-803be2637b6f[0m
[1m- Name: [0m[36mOpenAPI V3 - No Empty Paths[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-no-empty-paths/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-no-empty-paths/[0m
[1m
Request ID [0m[33m12959542-d5e4c6e4-be0f-4b0f-865a-83fecdb6710f[0m
[1m- Name: [0m[36mSwagger V2 - Security in Query[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-security-in-query/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-security-in-query/[0m
[1m
Request ID [0m[33m12959542-46f8190c-168e-4929-831d-1e48445efa9a[0m
[1m- Name: [0m[36mOpenAPI V3 - Tags Name[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-tags-name/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-tags-name/[0m
[1m
Request ID [0m[33m12959542-ef00ec23-41f8-4c0c-b40a-a25718de926a[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Schema Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-schema-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-schema-type/[0m
[1m
Request ID [0m[33m12959542-deb094aa-e04f-438c-aa74-69390ebb3798[0m
[1m- Name: [0m[36mSwagger V2 - Operations Summary Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-operations-summary-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-operations-summary-length/[0m
[1m
Request ID [0m[33m12959542-fcb18a96-194e-4835-a08e-3d1d172f95d6[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Description[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-description/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-description/[0m
[1m
Request ID [0m[33m12959542-02751f13-9131-464c-883c-15e9f580d563[0m
[1m- Name: [0m[36mOpenAPI V3 - Info Contact Name[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-contact-name/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-contact-name/[0m
[1m
Request ID [0m[33m12959542-da1f913b-e7c4-4fb3-a1ec-b7afa165544b[0m
[1m- Name: [0m[36mSwagger V2 - Request Body on POST[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-request-body-on-post/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-request-body-on-post/[0m
[1m
Request ID [0m[33m12959542-83fbb7c1-c771-44df-99af-b7bcaf0b2b03[0m
[1m- Name: [0m[36mSwagger V2 - Version Semantic[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-version-semantic/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-version-semantic/[0m
[1m
Request ID [0m[33m12959542-48b0e5e1-72a3-49c4-9747-c36306463951[0m
[1m- Name: [0m[36mOpenAPI V3 Security Scheme API Key[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-security-scheme-api-key/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-security-scheme-api-key/[0m
[1m
Request ID [0m[33m12959542-e0c85154-c69f-43c0-86dc-0acfe106b5c4[0m
[1m- Name: [0m[36mSwagger V2 - Operations Tags[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-operations-tags/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-operations-tags/[0m
[1m
Request ID [0m[33m12959542-2cff4bb7-4b06-42e7-bc3d-0678f1cd7bb3[0m
[1m- Name: [0m[36mOpenAPI V3 Components Examples Camel Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-examples-camel-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-examples-camel-case/[0m
[1m
Request ID [0m[33m12959542-afea8cc7-86fa-4466-bde0-1ef94a4c59a5[0m
[1m- Name: [0m[36mOpenAPI V3 Components Request Bodies Snake Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-request-bodies-snake-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-request-bodies-snake-case/[0m
[1m
Request ID [0m[33m12959542-c79aa664-add9-4f5a-a242-6dec749d7580[0m
[1m- Name: [0m[36mOpenAPI V3 - Info Contact Email[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-contact-email/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-contact-email/[0m
[1m
Request ID [0m[33m12959542-a371d9a8-cc4c-49d8-b6f8-e4846529ff92[0m
[1m- Name: [0m[36mOpenAPI V3 - Response POST 201 Media Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-post-201-media-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-post-201-media-type/[0m
[1m
Request ID [0m[33m12959542-978643f0-94f3-45ac-acf0-525510d69813[0m
[1m- Name: [0m[36mSwagger V2 - Request Body on PATCH[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-request-body-on-patch/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-request-body-on-patch/[0m
[1m
Request ID [0m[33m12959542-8925fdca-26e6-435e-92dc-d59bf63ac5db[0m
[1m- Name: [0m[36mSwagger V2 - Info Version[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-version/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-version/[0m
[1m
Request ID [0m[33m12959542-2f9363c7-a0a7-40e7-aefa-35a27090edba[0m
[1m- Name: [0m[36mOpenAPI V3 Components Links Pascal Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-links-pascal-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-links-pascal-case/[0m
[1m
Request ID [0m[33m12959542-7c6f8cac-e218-4fbe-9b3a-801ff23e8bc3[0m
[1m- Name: [0m[36mOpenAPI V3 - Info License Url Apache[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-license-url-apache/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-license-url-apache/[0m
[1m
Request ID [0m[33m12959542-2bdc9691-abc1-4508-9251-39939ae6e9a2[0m
[1m- Name: [0m[36mSwagger V2 - Info License Url Apache[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-license-url-apache/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-license-url-apache/[0m
[1m
Request ID [0m[33m12959542-2a229f51-3c5c-4574-8bb7-266c021257d6[0m
[1m- Name: [0m[36mSwagger V2 Info Description[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-description/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-description/[0m
[1m
Request ID [0m[33m12959542-0bed9972-ed96-4f83-8675-a3476a4524ea[0m
[1m- Name: [0m[36mSwagger V2 - Response PUT 204 No Body[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-response-put-204-no-body/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-response-put-204-no-body/[0m
[1m
Request ID [0m[33m12959542-7fab29d0-0ebe-4dfa-bc6d-916464b7592e[0m
[1m- Name: [0m[36mOpenAPI V3 Components Callbacks Pascal Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-callbacks-pascal-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-callbacks-pascal-case/[0m
[1m
Request ID [0m[33m12959542-1f2530c9-5d2f-48e3-abb3-fb284f679c4f[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Description Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-description-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-description-length/[0m
[1m
Request ID [0m[33m12959542-0ec54ac2-dcff-4e87-8e08-f131f0b176b1[0m
[1m- Name: [0m[36mOpenAPI V3 Security Scheme Access Token[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-security-scheme-access-token/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-security-scheme-access-token/[0m
[1m
Request ID [0m[33m12959542-d6753257-68d7-47d0-ae78-f6e45d51c318[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties Names Snake Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties-names-snake-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties-names-snake-case/[0m
[1m
Request ID [0m[33m12959542-06092ddd-482c-4bf1-900e-ffc0e2594bdb[0m
[1m- Name: [0m[36mOpenAPI V3 - Operations Description[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-operations-description/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-operations-description/[0m
[1m
Request ID [0m[33m12959542-a7d50dd7-f091-4ae4-9271-1d08298ee93a[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Name Snake Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-name-snake-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-name-snake-case/[0m
[1m
Request ID [0m[33m12959542-43551900-0b7c-4635-aeb0-533baf7e5d95[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Description Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-description-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-description-length/[0m
[1m
Request ID [0m[33m12959542-3080cafe-69a0-4f70-841f-430cecc71345[0m
[1m- Name: [0m[36mSwagger V2 - Response POST 500 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-response-post-500-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-response-post-500-status-code/[0m
[1m
Request ID [0m[33m12959542-943705a0-3a63-4822-b0e5-7ff66095c123[0m
[1m- Name: [0m[36mOpenAPI V3 - Response GET 200 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-get-200-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-get-200-status-code/[0m
[1m
Request ID [0m[33m12959542-ddec0e94-d804-4b5f-92b4-0132a0dd5bee[0m
[1m- Name: [0m[36mSwagger V2 - Response DELETE 500 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-response-delete-500-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-response-delete-500-status-code/[0m
[1m
Request ID [0m[33m12959542-25eb45a7-d179-4bba-b9c1-8d290e98b7fe[0m
[1m- Name: [0m[36mSwagger V2 - Version Second Segment[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-version-segment-second/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-version-segment-second/[0m
[1m
Request ID [0m[33m12959542-917b6fab-1959-4ff0-98e7-ec2b9f770e85[0m
[1m- Name: [0m[36mOpenAPI V3 - Response DELETE 204 No Body[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-delete-204-no-body/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-delete-204-no-body/[0m
[1m
Request ID [0m[33m12959542-dac7a605-fbfe-452a-a64c-048e8e370685[0m
[1m- Name: [0m[36mOpenAPI V3 - Operations Operation IDs Camel Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-operations-operation-ids-camel-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-operations-operation-ids-camel-case/[0m
[1m
Request ID [0m[33m12959542-884aa91f-b3b0-425b-ade1-722cf6b04ada[0m
[1m- Name: [0m[36mSwagger V2 - Response POST 201 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-response-post-201-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-response-post-201-status-code/[0m
[1m
Request ID [0m[33m12959542-ea36040c-6c32-48a3-b9e2-9a6b868ea60b[0m
[1m- Name: [0m[36mSwagger V2 - Operations Summary Period None[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-operations-summary-period-none/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-operations-summary-period-none/[0m
[1m
Request ID [0m[33m12959542-95ba836f-ceed-4b43-96b3-12b20a9034b8[0m
[1m- Name: [0m[36mSwagger V2 - Limit Number of Paths[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-limit-number-of-paths/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-limit-number-of-paths/[0m
[1m
Request ID [0m[33m12959542-53b68898-71dd-4f2b-ac38-e8c6cf8c9961[0m
[1m- Name: [0m[36mOpenAPI V3 - Response POST 500 Problem JSON Media Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-get-500-problem-json-media-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-get-500-problem-json-media-type/[0m
[1m
Request ID [0m[33m12959542-aff2e71a-b951-4a44-bfc1-56369a7e3989[0m
[1m- Name: [0m[36mOpenAPI V3 Components Request Bodies Kebab Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-request-bodies-kebab-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-request-bodies-kebab-case/[0m
[1m
Request ID [0m[33m12959542-4c722c54-f508-461f-8a75-8f9235032b95[0m
[1m- Name: [0m[36mOpenAPI V3 Components Examples Pascal Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-examples-pascal-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-examples-pascal-case/[0m
[1m
Request ID [0m[33m12959542-29aa851c-4589-4f07-8374-d1b8b81f8782[0m
[1m- Name: [0m[36mOpenAPI V3 - No Trailing Slash on Paths[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-no-trailing-slash-on-paths/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-no-trailing-slash-on-paths/[0m
[1m
Request ID [0m[33m12959542-9895fe84-f058-40e0-b28b-06e5902458dd[0m
[1m- Name: [0m[36mOpenAPI V3 Security Scheme OAuth[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-security-scheme-oauth/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-security-scheme-oauth/[0m
[1m
Request ID [0m[33m12959542-abc0fb32-c2eb-47c6-bf2c-e5d2e88cda75[0m
[1m- Name: [0m[36mSwagger V2 - Info License Url[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-license-url/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-license-url/[0m
[1m
Request ID [0m[33m12959542-206fb300-4b18-440e-b44b-c94acb2924c2[0m
[1m- Name: [0m[36mOpenAPI V3 Components Links Snake Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-links-snake-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-links-snake-case/[0m
[1m
Request ID [0m[33m12959542-8f437a5b-e431-4d6e-aa12-e551deb85fb9[0m
[1m- Name: [0m[36mSwagger V2 - Info Contact Name[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-contact-name/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-contact-name/[0m
[1m
Request ID [0m[33m12959542-e0672d30-c9f2-4a17-b855-f78ca27d2067[0m
[1m- Name: [0m[36mOpenAPI V3 - Info Title Word Check[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-title-word-check/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-title-word-check/[0m
[1m
Request ID [0m[33m12959542-12dadaf2-3dad-44a6-8c17-072c1450eead[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Name Camel Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-name-camel-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-name-camel-case/[0m
[1m
Request ID [0m[33m12959542-310244d5-e915-41c3-b3a4-b46354309e76[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Names Snake Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-names-snake-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-names-snake-case/[0m
[1m
Request ID [0m[33m12959542-5857fb15-efe2-4382-af56-27c5d148e6c8[0m
[1m- Name: [0m[36mOpenAPI V3 Security Scheme Sigv4[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-security-scheme-sigv4/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-security-scheme-sigv4/[0m
[1m
Request ID [0m[33m12959542-03d99513-00b4-4183-aff4-7655fba7cc72[0m
[1m- Name: [0m[36mOpenAPI V3 Components Parameters Kebab Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-parameters-kebab-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-parameters-kebab-case/[0m
[1m
Request ID [0m[33m12959542-d782fe05-317f-4429-a7da-0f7f47db3071[0m
[1m- Name: [0m[36mSwagger V2 - Security Basic[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-security-basic/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-security-basic/[0m
[1m
Request ID [0m[33m12959542-fcf6eff0-c76d-40da-841f-d2d5f6a35bf0[0m
[1m- Name: [0m[36mSwagger V2 - Schema Properties Descriptions Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-properties-descriptions-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-properties-descriptions-length/[0m
[1m
Request ID [0m[33m12959542-eb76deb3-8f74-40d6-b9d4-19d1dfa68d64[0m
[1m- Name: [0m[36mOpenAPI V3 Components Callbacks Snake Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-callbacks-snake-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-callbacks-snake-case/[0m
[1m
Request ID [0m[33m12959542-6aa5b8a1-57f2-4c11-aad9-abf986e620b3[0m
[1m- Name: [0m[36mOpenAPI V3 - Use of Response Schema anyOf[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-use-of-response-schema-anyof/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-use-of-response-schema-anyof/[0m
[1m
Request ID [0m[33m12959542-6a2a2c65-1085-473e-b582-6e99a508edba[0m
[1m- Name: [0m[36mOpenAPI V3 - Info X API Id[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-x-api-id/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-x-api-id/[0m
[1m
Request ID [0m[33m12959542-479e500a-7edc-4b71-acd8-0b5aadffda97[0m
[1m- Name: [0m[36mOpenAPI V3 Components Examples Kebab Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-examples-kebab-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-examples-kebab-case/[0m
[1m
Request ID [0m[33m12959542-dac28642-ddbd-4562-895b-3fabcf831d05[0m
[1m- Name: [0m[36mOpenAPI V3 Info Description Word Check[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-description-word-check/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-description-word-check/[0m
[1m
Request ID [0m[33m12959542-2e95cb0d-89d9-4775-8614-70eb365c1320[0m
[1m- Name: [0m[36mOpenAPI V3 Security Scheme API Secret[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-security-scheme-api-secret/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-security-scheme-api-secret/[0m
[1m
Request ID [0m[33m12959542-8604c32a-d547-4dd7-b8a2-bffec4f0f5a2[0m
[1m- Name: [0m[36mOpenAPI V3 Security Scheme OAuth2 Password[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-security-scheme-oauth2-password/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-security-scheme-oauth2-password/[0m
[1m
Request ID [0m[33m12959542-587e02c5-d2d8-4df2-8ede-6198f6f0239f[0m
[1m- Name: [0m[36mOpenAPI V3 - Info Summary Word Check[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-summary-word-check/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-summary-word-check/[0m
[1m
Request ID [0m[33m12959542-71e9f499-41d4-4f75-966c-9fe8384c3648[0m
[1m- Name: [0m[36mSwagger V2 - Operations Description Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-operations-description-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-operations-description-length/[0m
[1m
Request ID [0m[33m12959542-42b5e619-d52c-4fc4-880d-4b3042b740d5[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Names Pascal Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-names-pascal-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-names-pascal-case/[0m
[1m
Request ID [0m[33m12959542-fe02a5d6-7858-415f-8631-63eb5541be0b[0m
[1m- Name: [0m[36mSwagger V2 - Info Terms Of Service[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-terms-of-service/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-terms-of-service/[0m
[1m
Request ID [0m[33m12959542-389809ea-3e75-4969-96d1-dc5c8672015a[0m
[1m- Name: [0m[36mSwagger V2 - Schema Properties Names Words[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-properties-names-words/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-properties-names-words/[0m
[1m
Request ID [0m[33m12959542-88ee8422-f046-413f-8964-b1dab79a071e[0m
[1m- Name: [0m[36mSwagger V2 - Parameters Name Snake Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-parameters-name-snake-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-parameters-name-snake-case/[0m
[1m
Request ID [0m[33m12959542-05b416bd-8989-44e9-81c5-60ef8119ff92[0m
[1m- Name: [0m[36mOpenAPI V3 - Info Contact Url[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-contact-url/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-contact-url/[0m
[1m
Request ID [0m[33m12959542-fa5cbb34-549e-4fe3-b9da-f2a1f374d23c[0m
[1m- Name: [0m[36mSwagger V2 - Schema Additional Properties[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-additional-properties/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-additional-properties/[0m
[1m
Request ID [0m[33m12959542-2df507fb-687a-477b-9985-31e2f8ad2672[0m
[1m- Name: [0m[36mSwagger V2 - Parameters Name[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-parameters-name/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-parameters-name/[0m
[1m
Request ID [0m[33m12959542-99c72ffb-7614-4a4e-9b7e-5a51ff0aaa89[0m
[1m- Name: [0m[36mSwagger V2 - Response DELETE 204 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-response-delete-204-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-response-delete-204-status-code/[0m
[1m
Request ID [0m[33m12959542-24782c61-783a-44fa-a094-1afd18c32630[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties Names Words[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties-names-words/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties-names-words/[0m
[1m
Request ID [0m[33m12959542-8bcaa763-76aa-495d-ba34-bac463dbf015[0m
[1m- Name: [0m[36mSwagger V2 - Schema Description Words[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-description-words/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-description-words/[0m
[1m
Request ID [0m[33m12959542-eb52d122-78b1-40c2-be32-a7ce61d7465a[0m
[1m- Name: [0m[36mSwagger V2 - Request Body on PUT[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-request-body-on-put/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-request-body-on-put/[0m
[1m
Request ID [0m[33m12959542-5da252b2-323a-42a3-9c01-2f65a2801f50[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Names Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-names-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-names-length/[0m
[1m
Request ID [0m[33m12959542-bfbe97d5-eb94-454c-a683-7c130a3c86dc[0m
[1m- Name: [0m[36mSwagger V2 - Tags Name[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-tags-name/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-tags-name/[0m
[1m
Request ID [0m[33m12959542-7cd3a9c8-6560-4c6e-89be-fcb8fe0cad5f[0m
[1m- Name: [0m[36mOpenAPI V3 - Operations Tags[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-operations-tags/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-operations-tags/[0m
[1m
Request ID [0m[33m12959542-99c9edf2-1ce2-42cb-8682-298b84076d72[0m
[1m- Name: [0m[36mSwagger V2 - Schema Properties Allowed Integer Format[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-schema-properties-allowed-integer-format/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-schema-properties-allowed-integer-format/[0m
[1m
Request ID [0m[33m12959542-33e4627e-880e-44ec-af46-fcb3abae415a[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties-type/[0m
[1m
Request ID [0m[33m12959542-01127ca1-7be9-4185-9542-e6ccf2b0d2a1[0m
[1m- Name: [0m[36mOpenAPI V3 - Operations Summary[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-operations-summary/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-operations-summary/[0m
[1m
Request ID [0m[33m12959542-7e26c92b-0479-4aa0-802d-e7ecc2f8f0b3[0m
[1m- Name: [0m[36mSwagger V2 Produce JSON Media Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-produce-json-media-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-produce-json-media-type/[0m
[1m
Request ID [0m[33m12959542-1a2d2ce5-0672-4f98-8f24-cf6dff6a90f6[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-type/[0m
[1m
Request ID [0m[33m12959542-e2a5c081-669b-4191-b79b-f6444a478926[0m
[1m- Name: [0m[36mSwagger V2 - Info Contact Url[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-contact-url/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-contact-url/[0m
[1m
Request ID [0m[33m12959542-c7fb6fb6-cde2-48fd-9f9f-3ffe769e7119[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Names Camel Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-names-camel-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-names-camel-case/[0m
[1m
Request ID [0m[33m12959542-5815505a-2dd6-4de1-ae42-cf8892f06ef3[0m
[1m- Name: [0m[36mOpenAPI V3 Security Scheme OAuth Implicit[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-security-scheme-oauth-implicit/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-security-scheme-oauth-implicit/[0m
[1m
Request ID [0m[33m12959542-9b95db0e-fc11-4cac-b4d3-a33b86c9adb0[0m
[1m- Name: [0m[36mOpenAPI V3 - Tags Object[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-tags-object/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-tags-object/[0m
[1m
Request ID [0m[33m12959542-58d81190-7a74-45c8-a387-0a16a6416a60[0m
[1m- Name: [0m[36mOpenAPI V3 - Tags One[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-tags-one/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-tags-one/[0m
[1m
Request ID [0m[33m12959542-c4426ea5-1b9a-4faf-9a9e-6ce935a7de2e[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Schema[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-schema/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-schema/[0m
[1m
Request ID [0m[33m12959542-a444923c-9c09-4cfb-a08c-2a5f247373d8[0m
[1m- Name: [0m[36mOpenAPI V3 Request Body Examples Components[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-request-body-examples-components/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-request-body-examples-components/[0m
[1m
Request ID [0m[33m12959542-29751109-23f0-4a4d-952e-99c9f1542121[0m
[1m- Name: [0m[36mOpenAPI V3 - No Path Dashes[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-no-path-dashes/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-no-path-dashes/[0m
[1m
Request ID [0m[33m12959542-5b6965e7-6576-473a-ae14-6102148a1cb2[0m
[1m- Name: [0m[36mSwagger V2 - No Request Body on DELETE[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-no-request-body-on-delete/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-no-request-body-on-delete/[0m
[1m
Request ID [0m[33m12959542-2a735ff3-22b2-46f3-9c7b-48b1a4bf3ddf[0m
[1m- Name: [0m[36mOpenAPI V3 Have GET Method[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-have-get-method/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-have-get-method/[0m
[1m
Request ID [0m[33m12959542-3a3a7289-c72f-40ce-9198-bb3b6451f509[0m
[1m- Name: [0m[36mOpenAPI V3 - Response PATCH 500 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-patch-500-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-patch-500-status-code/[0m
[1m
Request ID [0m[33m12959542-afc9b0b1-5de8-438b-bbc2-f274a8c185e5[0m
[1m- Name: [0m[36mOpenAPI V3 - Response GET 200 Media Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-get-200-media-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-get-200-media-type/[0m
[1m
Request ID [0m[33m12959542-2df8cfd4-c20a-4fe0-b5cc-3d4066a86a20[0m
[1m- Name: [0m[36mOpenAPI V3 - Info X Audience[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-x-audience/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-x-audience/[0m
[1m
Request ID [0m[33m12959542-1d4a95dd-f21e-4bc7-8ae1-170fee8ddbf2[0m
[1m- Name: [0m[36mSwagger V2 - Response PATCH 500 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-response-patch-500-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-response-patch-500-status-code/[0m
[1m
Request ID [0m[33m12959542-c9fb4e95-e24c-40c8-aec2-f944f3d6f392[0m
[1m- Name: [0m[36mOpenAPI V3 - Operations Description Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-operations-description-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mopenapi: 3.0.0
info:
  version: v0.1.0
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
servers:
- url: http://api.example.com/
paths:
  "/restaurants":
    get:
      summary: Restaurants
      operationId: getRestaurants
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
        style: simple
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RestaurantListing"
    post:
      summary: Restaurant
      operationId: addRestaurant
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '201':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
  "/restaurants/{restaurantId}":
    get:
      summary: Restaurant
      operationId: getRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      - name: newProperty
        in: query
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '200':
          description: Restaurant
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Restaurant"
    put:
      summary: Restaurant
      operationId: updateRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      requestBody:
        description: Restaurant
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Restaurant"
      responses:
        '204':
          description: Restaurant
    delete:
      summary: Restaurant
      operationId: deleteRestaurant
      parameters:
      - name: restaurantId
        in: path
        description: The unique id.
        required: true
        schema:
          type: string
      tags:
      - Restaurant
      responses:
        '204':
          description: Restaurant
components:
  x-rules:
  - name: custom parameter-description
    object: parameter
    description: custom parameter objects should have a description
    truthy: description
  schemas:
    RestaurantListing:
      type: array
      items:
        "$ref": "#/components/schemas/Restaurant"
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        servesCuisine:
          description: The cuisine of the restaurant.
          type: string
        starRating:
          description: An official rating for a lodging business or food establishment,
            e.g. from national associations or standards bodies. Use the author property
            to indicate the rating organization, e.g. as an Organization with name
            such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
          type: object
          format: starRating
        menu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
        acceptsReservations:
          description: Indicates whether a FoodEstablishment accepts reservations.
            Values can be Boolean, an URL at which reservations can be made or (for
            backwards compatibility) the strings ```Yes``` or ```No```.
          type: string
        hasMenu:
          description: Either the actual menu as a structured representation, as text,
            or a URL of the menu.
          type: string
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-operations-description-length/[0m
[1m
Request ID [0m[33m12959542-7673542f-a3c7-43df-a459-e79fcb4a522f[0m
[1m- Name: [0m[36mSwagger V2 - Security in Header[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-security-in-header/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mswagger: '2.0'
info:
  version: 'v0.1.0'
  title: Restaurants
  description: This is the API for managing detail of the restaurants.
  contact: {}
host: api.example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /restaurants:
    get:
      description: Restaurants
      summary: getRestaurants
      tags:
      - Restaurant
      operationId: getRestaurants
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        required: true
        type: array
        items:
          type: integer
          format: int64
        description: ''
      responses:
        '200':
          description: Restaurant
          schema:
            type: array
            default: ''
            items:
              $ref: '#/definitions/Restaurant'
          headers: {}
    post:
      description: Restaurant
      summary: addRestaurant
      tags:
      - Restaurant
      operationId: addRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '201':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
  /restaurants/{restaurantId}:
    get:
      description: Restaurant
      summary: getRestaurant
      tags:
      - Restaurant
      operationId: getRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: newProperty
        in: query
        required: true
        type: string
        description: The unique id.
      responses:
        '200':
          description: Restaurant
          schema:
            $ref: '#/definitions/Restaurant'
          headers: {}
    put:
      description: Restaurant
      summary: updateRestaurant
      tags:
      - Restaurant
      operationId: updateRestaurant
      deprecated: false
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      - name: Content-Type
        in: header
        required: false
        enum:
        - application/json
        type: string
        description: ''
      - name: body
        in: body
        required: false
        description: Restaurant
        schema:
          $ref: '#/definitions/Restaurant'
      responses:
        '204':
          description: Restaurant
          headers: {}
    delete:
      description: Restaurant
      summary: deleteRestaurant
      tags:
      - Restaurant
      operationId: deleteRestaurant
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: restaurantId
        in: path
        required: true
        type: string
        description: The unique id.
      responses:
        '204':
          description: Restaurant
          headers: {}
definitions:
  Restaurant:
    title: Restaurant
    type: object
    properties:
      id:
        type: integer
        format: int64
      servesCuisine:
        description: The cuisine of the restaurant.
        type: string
      starRating:
        description: An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
        type: object
      menu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
      acceptsReservations:
        description: Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
        type: string
      hasMenu:
        description: Either the actual menu as a structured representation, as text, or a URL of the menu.
        type: string
tags:
- name: Restaurant
  description: ''
[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-security-in-header/[0m
[1m
Request ID [0m[33m41733022-a5ae5eb3-15bd-421d-a9e3-322c964111c5[0m
[1m- Name: [0m[36mGet products[0m
[1m- URL: [0m[33mhttps://dc906126-fd08-4fc8-9d98-33f8bec1109a.mock.pstmn.io/products[33m[0m
[1m- Authorization: [0m[33mnoauth[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mx-mock-response-name[0m: [32mresponse[0m[0m
[1m- Header: [0m[33mx-mock-match-request-headers[0m: [32mexample[0m[0m

[33m[*][0m Querying workspace ID [36mdabdbc56-ab9b-4d3c-8111-8f548d6977a2[0m

[1m
Request ID [0m[33m16871416-9229826e-7e25-46a5-8dbc-ac5d9b2a3cdc[0m
[1m- Name: [0m[36mUnlock[0m
[1m- URL: [0m[33m{{url}}/remote/unlock[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16871416-c74089ff-11da-43dd-bd40-dbcf21c909b1[0m
[1m- Name: [0m[36mTrunk Release[0m
[1m- URL: [0m[33m{{url}}/remote/trunk[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16871416-cce1c464-e05a-427b-9272-52cf5b03d1bd[0m
[1m- Name: [0m[36mHood[0m
[1m- URL: [0m[33m{{url}}/remote/hood[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16871416-e7eefd6b-2eaf-4a9f-80b0-b6ec1de9000e[0m
[1m- Name: [0m[36mLock[0m
[1m- URL: [0m[33m{{url}}/remote/lock[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16871416-f56933f0-57c7-478d-ac33-d68e9f006e6c[0m
[1m- Name: [0m[36mRoof/Sunroof[0m
[1m- URL: [0m[33m{{url}}/remote/roof/open[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16901625-a9c2f057-7fe8-41e9-bb61-41a2784c2202[0m
[1m- Name: [0m[36mGet safety relevant traffic information in the range of a given location[0m
[1m- URL: [0m[33m{{url}}/:location?radius=-88105560&cause=HR&next_page_token=d[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mx-mock-response-name[0m: [32mSuccess[0m[0m
[1m- Parameter: [0m[33mradius[0m=[32m-88105560[0m
[1m- Parameter: [0m[33mcause[0m=[32mHR[0m
[1m- Parameter: [0m[33mnext_page_token[0m=[32md[0m
[1m
Request ID [0m[33m17126271-0118eef4-370b-48a5-a345-6c4a30ef2b94[0m
[1m- Name: [0m[36mComplete Status[0m
[1m- URL: [0m[33m{{url}}/status[33m[0m
[1m- Request Method: [0m[33mGET[0m

[33m[*][0m Querying workspace ID [36m783ed05c-95f9-4044-8d75-8a874a0b7c96[0m

[1m
Request ID [0m[33m8990995-3854e5a5-de5b-48b2-a6f3-254b57413173[0m
[1m- Name: [0m[36mexample.com[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m8990995-d0bb41a1-625d-4d99-a8e8-32c58844826b[0m
[1m- Name: [0m[36mexample.co[0m
[1m- URL: [0m[33mexample.co[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m8990995-1d946be2-7024-4879-9ed9-050ba61b3129[0m
[1m- Name: [0m[36mmill's latest release[0m
[1m- URL: [0m[33mhttps://api.github.com/repos/lihaoyi/ammonite/releases/latest[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m8990995-a457b781-2fb3-4d8f-a7fe-bd0f817fa867[0m
[1m- Name: [0m[36mammonite's latest release[0m
[1m- URL: [0m[33mhttps://api.github.com/repos/lihaoyi/mill/releases/latest[33m[0m
[1m- Request Method: [0m[33mGET[0m

[33m[*][0m Querying workspace ID [36ma0f20889-5b28-40b9-8dcf-a301f476882f[0m


[33m[*][0m Querying workspace ID [36m3736dc29-5d2b-41d5-adb7-d33a47912cc2[0m


[33m[*][0m Querying workspace ID [36m4ac2c45b-645b-49eb-8b94-55e0102fb37a[0m

[1m
Request ID [0m[33m31080824-081fc703-d6d8-48c6-9ee9-2eaab5261884[0m
[1m- Name: [0m[36mNew Request[0m
[1m- URL: [0m[33mNone[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m31080824-29972f25-2a11-4b49-8d8f-e4879946f41e[0m
[1m- Name: [0m[36m1 Add a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
   "identifier": "XYZ-JEAN-123",
   "name": "Men's Skinny-fit Stretch Jean",
    "category": "Jeans",
    "brand": "Union",
    "color": "black",
    "gender": "m",
    "unitPrice": 49.99,
    "unitSalePrice": 39.99
}[0m[0m
[1m
Request ID [0m[33m31080824-3f91507b-f15b-4485-a2cc-1561ad6df083[0m
[1m- Name: [0m[36m5 Delete a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m
Request ID [0m[33m31080824-611da9dd-ce39-4b43-9fd0-310a8da6a721[0m
[1m- Name: [0m[36m4 Get Products[0m
[1m- URL: [0m[33m{{baseUrl}}/products?query={{Product_ID}}[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mquery[0m=[32m{{Product_ID}}[0m
[1m
Request ID [0m[33m31080824-a6acccba-2463-4c79-ac63-973549e46d16[0m
[1m- Name: [0m[36m2 Update a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "unitSalePrice": 25.99
}[0m[0m
[1m
Request ID [0m[33m31080824-b3f3085d-518e-4e04-bc64-ecfa06035e0d[0m
[1m- Name: [0m[36m3 Get an Updated Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m31080824-12739273-ed59-4ee8-93ab-0dd596d493e5[0m
[1m- Name: [0m[36m1 Add a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
   "identifier": "XYZ-JEAN-123",
   "name": "Men's Skinny-fit Stretch Jean",
    "category": "Jeans",
    "brand": "Union",
    "color": "black",
    "gender": "m",
    "unitPrice": 49.99,
    "unitSalePrice": 39.99
}[0m[0m
[1m
Request ID [0m[33m31080824-1a691f1f-d303-403b-b859-244c16cb5755[0m
[1m- Name: [0m[36m5 Delete a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m
Request ID [0m[33m31080824-a41ae05e-a2a3-4bf4-aa50-1b127b87d372[0m
[1m- Name: [0m[36m4 Get Products[0m
[1m- URL: [0m[33m{{baseUrl}}/products?query={{Product_ID}}[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mquery[0m=[32m{{Product_ID}}[0m
[1m
Request ID [0m[33m31080824-f7ad7fcc-6a54-43ed-b8d0-163d1bb5397d[0m
[1m- Name: [0m[36m3 Get an Updated Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m31080824-f946b20a-1579-4261-a332-cae7a22b9c2b[0m
[1m- Name: [0m[36m2 Update a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "unitSalePrice": 25.99
}[0m[0m
[1m
Request ID [0m[33m31080824-b28bb429-8f33-49f4-9e50-6ce8f9e0cd40[0m
[1m- Name: [0m[36mAvailability and response time monitoring[0m
[1m- URL: [0m[33mpostman-echo.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m31080824-37ee7df4-efbf-4416-b918-e3099acec2be[0m
[1m- Name: [0m[36mResponse JSON schema valiation[0m
[1m- URL: [0m[33m{{baseUrl}}/products?query={{Product_Name}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mquery[0m=[32m{{Product_Name}}[0m
[1m
Request ID [0m[33m31080824-0391f728-0bea-4b30-8d75-1413474a10b7[0m
[1m- Name: [0m[36mUpdate[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "unitSalePrice": 29.99
}[0m[0m
[1m
Request ID [0m[33m31080824-0cd009b8-ddeb-493e-8570-b3c0bf688ab7[0m
[1m- Name: [0m[36mAdd Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{ 
    "category": "Jeans",
    "brand": "Union",
    "color": "black",
    "gender": "m",
    "unitPrice": 49.99,
    "unitSalePrice": 29.99
}[0m[0m
[1m
Request ID [0m[33m31080824-37e06fd4-9e0e-44e2-b604-dcfea70ae993[0m
[1m- Name: [0m[36mGet Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m31080824-da87bf26-4234-4786-b31e-4aadbf9b3916[0m
[1m- Name: [0m[36mDelete[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m
Request ID [0m[33m31080824-e23c3aec-8956-41a2-84aa-084cab39f583[0m
[1m- Name: [0m[36mGet Products[0m
[1m- URL: [0m[33m{{baseUrl}}/products?query=shirts[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mquery[0m=[32mshirts[0m

[33m[*][0m Querying workspace ID [36md7eb65e5-3ee4-4bcc-a804-cad54275380b[0m

[1m
Request ID [0m[33m16884897-1e8457ac-0b92-4a4a-922e-d2a9ee4eedd0[0m
[1m- Name: [0m[36mRetrieve the loaded domain[0m
[1m- URL: [0m[33m{{baseUrl}}/domain[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16884897-23226859-5aa5-4530-aa08-6690603b8a82[0m
[1m- Name: [0m[36mVersion of Rasa[0m
[1m- URL: [0m[33m{{baseUrl}}/version[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16884897-7cf9d959-2a25-4b6d-a257-9ca9492dccef[0m
[1m- Name: [0m[36mStatus of the Rasa server[0m
[1m- URL: [0m[33m{{baseUrl}}/status[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16884897-fd7716aa-94f6-4743-94c9-2619eae5ecd9[0m
[1m- Name: [0m[36mHealth endpoint of Rasa Server[0m
[1m- URL: [0m[33m{{baseUrl}}/[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16884897-0cbeea8a-8887-4d9e-91a2-14307529da6a[0m
[1m- Name: [0m[36mGet the logs of the Rasa X service[0m
[1m- URL: [0m[33m{{baseUrl}}/logs?api_token=cillum ut aute sit[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mapi_token[0m=[32mcillum ut aute sit[0m
[1m
Request ID [0m[33m16884897-594d0ee7-2df5-4615-8385-116310b3c85f[0m
[1m- Name: [0m[36mUse the `POST /stories` endpoint instead, specifying `test_stories=true`.[0m
[1m- URL: [0m[33m{{baseUrl}}/tests[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mtext/yaml[0m[0m
[1m- Request Body: [0m[32m"cillum ut aute sit"[0m[0m
[1m
Request ID [0m[33m16884897-5a26cb95-a610-49df-9927-ba1aebedae45[0m
[1m- Name: [0m[36mFetch status of Rasa services[0m
[1m- URL: [0m[33m{{baseUrl}}/health[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16884897-7f9459fb-4fe4-4d2a-87d6-5876a6b148cf[0m
[1m- Name: [0m[36mGet stories as markdown file[0m
[1m- URL: [0m[33m{{baseUrl}}/stories.md?q=cillum ut aute sit[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mq[0m=[32mcillum ut aute sit[0m
[1m
Request ID [0m[33m16884897-80a76a6a-a1ba-4c52-9dab-fcfcd09ec60e[0m
[1m- Name: [0m[36mRetrieve Rasa runtime configuration[0m
[1m- URL: [0m[33m{{baseUrl}}/config[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16884897-84a1caae-7d3b-4cd4-8a9d-07329329bf19[0m
[1m- Name: [0m[36mFetch a list of unique entities from all conversations[0m
[1m- URL: [0m[33m{{baseUrl}}/conversationEntities[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16884897-954b9b38-3691-477f-9f3f-05b5f328405a[0m
[1m- Name: [0m[36mFetch a list of unique actions from all conversations[0m
[1m- URL: [0m[33m{{baseUrl}}/conversationActions[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16884897-a15bdf36-d68f-4de6-b3ce-f03b6952553d[0m
[1m- Name: [0m[36mFetch analytics[0m
[1m- URL: [0m[33m{{baseUrl}}/analytics?start=2018-01-01T11:03:01.141&end=2018-11-02T13:44:09.932&window=1d[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mstart[0m=[32m2018-01-01T11:03:01.141[0m
[1m- Parameter: [0m[33mend[0m=[32m2018-11-02T13:44:09.932[0m
[1m- Parameter: [0m[33mwindow[0m=[32m1d[0m
[1m
Request ID [0m[33m16884897-a4ee251a-c4f8-4f2a-847f-ba19645b999e[0m
[1m- Name: [0m[36mCreate a new SAML user[0m
[1m- URL: [0m[33m{{baseUrl}}/samlUsers[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "saml_id": "adipisicing dolore incididunt",
    "roles": [
        "sint eiusmod",
        "amet laborum ex aute"
    ]
}[0m[0m
[1m
Request ID [0m[33m16884897-aa4f6391-3c47-47fe-a3da-2fc9bfc6f638[0m
[1m- Name: [0m[36mFetch a list of unique intents from all conversations[0m
[1m- URL: [0m[33m{{baseUrl}}/conversationIntents[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16884897-c13339fd-56bb-4742-8939-fc612c3cc090[0m
[1m- Name: [0m[36mFetch a list of unique Rasa Core policies in all conversations[0m
[1m- URL: [0m[33m{{baseUrl}}/conversationPolicies[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16884897-d0520718-5b44-4e4f-b9e1-0f0bc32e0aec[0m
[1m- Name: [0m[36mUpdate Core evaluations for all conversations[0m
[1m- URL: [0m[33m{{baseUrl}}/evaluate[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m
Request ID [0m[33m16884897-d50fe26b-04f9-42d2-b454-5383f6b20f96[0m
[1m- Name: [0m[36mFetch conversation statistics[0m
[1m- URL: [0m[33m{{baseUrl}}/statistics[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16884897-e237d6cc-1344-49df-a6c6-e78692df44b7[0m
[1m- Name: [0m[36mFetch list of Core evaluations[0m
[1m- URL: [0m[33m{{baseUrl}}/evaluations[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16884897-ec2160ce-2fa4-4e7d-9778-1be0b1cc2576[0m
[1m- Name: [0m[36mRetrieve Rasa domain warnings.[0m
[1m- URL: [0m[33m{{baseUrl}}/domainWarnings[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16884897-efb7b479-7b47-4c84-909f-e468bfc7ee04[0m
[1m- Name: [0m[36mEndpoint to have a conversation with the assistant[0m
[1m- URL: [0m[33m{{baseUrl}}/chat[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "message": "nisi quis"
}[0m[0m
[1m
Request ID [0m[33m16884897-f2730710-7686-4275-8e0d-145672463ce4[0m
[1m- Name: [0m[36mFetch versions of services.[0m
[1m- URL: [0m[33m{{baseUrl}}/version?skip_external=false[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mskip_external[0m=[32mfalse[0m

[33m[*][0m Querying workspace ID [36m5b39e7ac-ee2d-43f2-befb-7feb1cc1b567[0m

[1m
Request ID [0m[33m32882417-25ac428b-0afa-4902-a153-69a3920f98e9[0m
[1m- Name: [0m[36mipecho.me[0m
[1m- URL: [0m[33mipecho.me[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m32882417-8f6b5942-8390-44c9-b0dd-c06e57ca3857[0m
[1m- Name: [0m[36mexample.com[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mGET[0m

[33m[*][0m Querying workspace ID [36meba5f3e0-51e4-4e36-85d0-71dfd88f2379[0m

[1m
Request ID [0m[33m24071831-d6fdf8d4-b9bc-47af-ac00-badfbe16fba2[0m
[1m- Name: [0m[36mOpenAPI V3 Components Examples Kebab Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-examples-kebab-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-examples-kebab-case/[0m
[1m
Request ID [0m[33m24071831-82a764d0-e6b5-4cf7-97e3-2139bf78fae1[0m
[1m- Name: [0m[36mOpenAPI V3 - Response DELETE 500 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-delete-500-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-delete-500-status-code/[0m
[1m
Request ID [0m[33m24071831-c1a02bba-3673-488b-8455-e9d323535da5[0m
[1m- Name: [0m[36mSwagger V2 - Request Body on POST[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-request-body-on-post/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-request-body-on-post/[0m
[1m
Request ID [0m[33m24071831-ad2b48fb-007b-4268-aca2-9ab773bb1e4d[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties Names Words[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties-names-words/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties-names-words/[0m
[1m
Request ID [0m[33m24071831-d554b250-3edc-42ac-9ad8-1d3436dd8fd1[0m
[1m- Name: [0m[36mSwagger V2 - Operations Summary Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-operations-summary-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-operations-summary-length/[0m
[1m
Request ID [0m[33m24071831-f8472b38-f13b-48ff-a5e1-b86d9d1b31a4[0m
[1m- Name: [0m[36mSwagger V2 - Request Body on PATCH[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-request-body-on-patch/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-request-body-on-patch/[0m
[1m
Request ID [0m[33m24071831-87795759-b275-44d6-99f4-15c687bf8876[0m
[1m- Name: [0m[36mOpenAPI V3 - Response PATCH 500 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-patch-500-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-patch-500-status-code/[0m
[1m
Request ID [0m[33m24071831-a702d926-af15-47a2-8b68-a02ff8543e65[0m
[1m- Name: [0m[36mSwagger V2 - Request Body on PUT[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-request-body-on-put/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-request-body-on-put/[0m
[1m
Request ID [0m[33m24071831-3ae341d9-deaa-420f-8cb6-2aed696049ce[0m
[1m- Name: [0m[36mSwagger V2 - Version Semantic[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-version-semantic/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-version-semantic/[0m
[1m
Request ID [0m[33m24071831-cb9a9f01-e984-4c66-ada0-99d6b564267a[0m
[1m- Name: [0m[36mOpenAPI V3 - Response DELETE 204 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-delete-204-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-delete-204-status-code/[0m
[1m
Request ID [0m[33m24071831-5d7186ea-3956-4343-a674-c8c9a0a61a9f[0m
[1m- Name: [0m[36mOpenAPI V3 - Info License Url Apache[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-license-url-apache/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-license-url-apache/[0m
[1m
Request ID [0m[33m24071831-91fd1a57-78a4-448a-bdd6-133062bab948[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Description Word Check[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-description-word-check/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-description-word-check/[0m
[1m
Request ID [0m[33m24071831-dce9a77e-af2a-4728-afb8-c00b4b968e2d[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Additional Properties[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-additional-properties/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-additional-properties/[0m
[1m
Request ID [0m[33m24071831-7a64916a-1dff-4c4e-ac35-83da5cd0e2d6[0m
[1m- Name: [0m[36mSwagger V2 - Version Second Segment[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-version-segment-second/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-version-segment-second/[0m
[1m
Request ID [0m[33m24071831-b2debd06-a701-4215-8b16-f9e62c708f4a[0m
[1m- Name: [0m[36mSwagger V2 - Info License Url Mit[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-license-url-mit/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-license-url-mit/[0m
[1m
Request ID [0m[33m24071831-8fd93659-5228-4e0e-a572-3c1e13225d33[0m
[1m- Name: [0m[36mOpenAPI V3 - Operations Tags[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-operations-tags/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-operations-tags/[0m
[1m
Request ID [0m[33m24071831-db7ad7c8-0976-441d-be01-27230bee8826[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Schema Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-schema-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-schema-type/[0m
[1m
Request ID [0m[33m24071831-31636c81-d120-4267-bc48-6908648a04df[0m
[1m- Name: [0m[36mOpenAPI V3 Info Description[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-description/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-description/[0m
[1m
Request ID [0m[33m24071831-ba297f6a-6b2c-4947-b7c5-09392729258d[0m
[1m- Name: [0m[36mOpenAPI V3 - Response Rate Limit Headers[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-rate-limit-headers/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-rate-limit-headers/[0m
[1m
Request ID [0m[33m24071831-546d1a2c-227c-4fa8-8dc2-3480423dce3a[0m
[1m- Name: [0m[36mSwagger V2 - Info License Name[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-info-license-name/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-info-license-name/[0m
[1m
Request ID [0m[33m24071831-59214b86-a4ce-4684-bd44-b4253bccdd32[0m
[1m- Name: [0m[36mOpenAPI V3 - Info X API Id[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-x-api-id/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-x-api-id/[0m
[1m
Request ID [0m[33m24071831-139926cd-c486-4bff-b2f4-f8b0bf7f0013[0m
[1m- Name: [0m[36mOpenAPI V3 - Info Title[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-title/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-title/[0m
[1m
Request ID [0m[33m24071831-c9e92aa2-435a-455b-94d1-ea69d836c45a[0m
[1m- Name: [0m[36mOpenAPI V3 Components Parameters Kebab Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-components-parameters-kebab-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-components-parameters-kebab-case/[0m
[1m
Request ID [0m[33m24071831-3dfda1f4-a8cc-41e8-bca8-350ea1466a2f[0m
[1m- Name: [0m[36mOpenAPI V3 - Response PUT 500 Status Code[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-put-500-status-code/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-put-500-status-code/[0m
[1m
Request ID [0m[33m24071831-f86878a1-e522-41a9-9e42-b6c27f57b6f8[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties Names Snake Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties-names-snake-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties-names-snake-case/[0m
[1m
Request ID [0m[33m24071831-cd432beb-4d49-420f-a530-ec8f39a20b73[0m
[1m- Name: [0m[36mSwagger V2 - Parameters Name Snake Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-parameters-name-snake-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-parameters-name-snake-case/[0m
[1m
Request ID [0m[33m24071831-eeeb208b-601d-4736-9320-63cf46e5e56e[0m
[1m- Name: [0m[36mOpenAPI V3 - Version Second Segment[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-version-segment-second/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-version-segment-second/[0m
[1m
Request ID [0m[33m24071831-b5e68cfa-9142-495a-8546-9631362bb61d[0m
[1m- Name: [0m[36mOpenAPI V3 - Request Body on POST[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-request-body-on-post/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-request-body-on-post/[0m
[1m
Request ID [0m[33m24071831-ddb3e3fb-35b9-4ce5-9d5f-16fb4e77c275[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Properties Allowed Number Format[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-properties-allowed-number-format/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-properties-allowed-number-format/[0m
[1m
Request ID [0m[33m24071831-6824e062-0af3-4afb-884f-14503a140643[0m
[1m- Name: [0m[36mOpenAPI V3 - Response GET 500 Problem JSON Media Type[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-response-get-500-problem-json-media-type/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-response-get-500-problem-json-media-type/[0m
[1m
Request ID [0m[33m24071831-83767de3-bfee-43f9-b5b6-7331126e9840[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Description Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-description-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-description-length/[0m
[1m
Request ID [0m[33m24071831-30cb19e1-5c63-46f7-9984-f2706326f922[0m
[1m- Name: [0m[36mOpenAPI V3 - Request Body on PATCH[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-request-body-on-patch/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-request-body-on-patch/[0m
[1m
Request ID [0m[33m24071831-c5c0b058-a164-4615-b131-854c7fc2085c[0m
[1m- Name: [0m[36mOpenAPI V3 - Info Description Max Length[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-info-description-max-length/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-info-description-max-length/[0m
[1m
Request ID [0m[33m24071831-2c50b9a3-1d0a-4547-b43f-0adbf65d13bf[0m
[1m- Name: [0m[36mOpenAPI V3 - Parameters Schema Type Array[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-parameters-schema-type-array/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-parameters-schema-type-array/[0m
[1m
Request ID [0m[33m24071831-c9234757-57ca-467f-b1a6-5c7d6553d86e[0m
[1m- Name: [0m[36mSwagger V2 - Operations Description[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/swagger-v2-operations-description/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/swagger-v2-operations-description/[0m
[1m
Request ID [0m[33m24071831-733e3bdf-ba36-4a7f-ab45-372538190173[0m
[1m- Name: [0m[36mOpenAPI V3 - Schema Names Pascal Case[0m
[1m- URL: [0m[33m{{baseUrl}}/linter?rulesUrl=https://rules.linting.org/rules/openapi-v3-schema-names-pascal-case/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{openapi}}[0m[0m
[1m- Parameter: [0m[33mrulesUrl[0m=[32mhttps://rules.linting.org/rules/openapi-v3-schema-names-pascal-case/[0m

[33m[*][0m Querying workspace ID [36m3d75b7f7-e954-49b7-8151-b99df1e38688[0m


[33m[*][0m Querying workspace ID [36m12efed7f-4d45-411d-8559-a616396ebd56[0m

[1m
Request ID [0m[33m18531200-0fe60726-1c6d-4431-8266-4524f8d69c74[0m
[1m- Name: [0m[36mGate04[0m
[1m- URL: [0m[33mhttps://companychk.live/api/gate04.php?key={SUA_KEY}&carato={CARTAO_AQUI}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mkey[0m=[32m{SUA_KEY}[0m
[1m- Parameter: [0m[33mcarato[0m=[32m{CARTAO_AQUI}[0m
[1m
Request ID [0m[33m18531200-62601e50-7136-40b2-9ae3-da446cf50765[0m
[1m- Name: [0m[36mGate02[0m
[1m- URL: [0m[33mhttps://companychk.live/api/gate02.php?key={SUA_KEY}&carato={CARTAO_AQUI}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mkey[0m=[32m{SUA_KEY}[0m
[1m- Parameter: [0m[33mcarato[0m=[32m{CARTAO_AQUI}[0m
[1m
Request ID [0m[33m18531200-74b01a80-786e-4dfa-8923-331e3b6bf738[0m
[1m- Name: [0m[36mGate03[0m
[1m- URL: [0m[33mhttps://companychk.live/api/gate03.php?key={SUA_KEY}&carato={CARTAO_AQUI}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mkey[0m=[32m{SUA_KEY}[0m
[1m- Parameter: [0m[33mcarato[0m=[32m{CARTAO_AQUI}[0m
[1m
Request ID [0m[33m18531200-da64af35-5eb0-471a-93eb-1676f2cf2495[0m
[1m- Name: [0m[36mGetnet[0m
[1m- URL: [0m[33mhttps://companychk.live/api/getnet.php?key={SUA_KEY}&carato={CARTAO_AQUI}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mkey[0m=[32m{SUA_KEY}[0m
[1m- Parameter: [0m[33mcarato[0m=[32m{CARTAO_AQUI}[0m
[1m
Request ID [0m[33m18531200-e7b931b3-bf3c-4436-bc4b-a1800e4cbe47[0m
[1m- Name: [0m[36mGate05[0m
[1m- URL: [0m[33mhttps://companychk.live/api/gate05.php?key={SUA_KEY}&carato={CARTAO_AQUI}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mkey[0m=[32m{SUA_KEY}[0m
[1m- Parameter: [0m[33mcarato[0m=[32m{CARTAO_AQUI}[0m

[33m[*][0m Querying workspace ID [36m0019b303-0413-43a1-8971-1c92ee77f597[0m

[1m
Request ID [0m[33m18265932-418b091e-b610-47ff-8a38-e5f80d28a790[0m
[1m- Name: [0m[36mCreate a Board[0m
[1m- URL: [0m[33mhttps://api.trello.com/1/boards/?name=My new2 board&key=3689024d13f0b9469d2f910470dff1eb&token=86a9248653caff46e00106889508a9e723cfb0e147016dfa8235b82dceeba5dc&defaultLists=false[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Parameter: [0m[33mname[0m=[32mMy new2 board[0m
[1m- Parameter: [0m[33mkey[0m=[32m3689024d13f0b9469d2f910470dff1eb[0m
[1m- Parameter: [0m[33mtoken[0m=[32m86a9248653caff46e00106889508a9e723cfb0e147016dfa8235b82dceeba5dc[0m
[1m- Parameter: [0m[33mdefaultLists[0m=[32mfalse[0m
[1m
Request ID [0m[33m18265932-0da3baeb-2bc2-4ae4-b72f-68d72993982f[0m
[1m- Name: [0m[36mhttps://httpbin.org/get?myparameter=1&myparameter2=whatever[0m
[1m- URL: [0m[33mhttps://httpbin.org/get?myparameter=1&myparameter2=whatever[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mmyparameter[0m=[32m1[0m
[1m- Parameter: [0m[33mmyparameter2[0m=[32mwhatever[0m
[1m
Request ID [0m[33m18265932-17c0c0fb-6add-4edd-b024-a3154eb1841b[0m
[1m- Name: [0m[36mhttp://requestbin.net/r/dysxn11f?car=red%20red&car2=yellow[0m
[1m- URL: [0m[33mhttp://requestbin.net/r/dysxn11f?car=red%20red&car2=yellow[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mNewHed[0m: [32m5[0m[0m
[1m- Parameter: [0m[33mcar[0m=[32mred%20red[0m
[1m- Parameter: [0m[33mcar2[0m=[32myellow[0m
[1m
Request ID [0m[33m18265932-28b85de0-b1e1-425b-8915-f780621ad7f6[0m
[1m- Name: [0m[36mPost Request[0m
[1m- URL: [0m[33mhttps://httpbin.org/post[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "name": "John",
    "Email": "jhon@example.com",
    "id": "{{uuid}}"
}[0m[0m
[1m
Request ID [0m[33m18265932-549bb0d7-4f6d-4203-bec3-f43c4d2b9614[0m
[1m- Name: [0m[36mbod[0m
[1m- URL: [0m[33mhttp://requestbin.net/r/a16o7hjr?asd=qw&asd=erqqwe[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mhit[0m: [32mhead[0m[0m
[1m- Request Body: [0m[33mbody[0m=[32mfrom[0m[0m
[1m- Request Body: [0m[33mNewer[0m=[32mit[0m[0m
[1m- Parameter: [0m[33masd[0m=[32mqw[0m
[1m- Parameter: [0m[33masd[0m=[32merqqwe[0m
[1m
Request ID [0m[33m18265932-afbdaf7e-f5a5-4ee2-9ba7-fbb8fce163d6[0m
[1m- Name: [0m[36mUuid[0m
[1m- URL: [0m[33mhttps://httpbin.org/uuid[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m18265932-d9309e1d-16ec-4b05-9a9a-cf2aa06ff0e9[0m
[1m- Name: [0m[36mexample.com[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m18265932-26de8af1-ec42-4536-9c34-3ffa8b92304e[0m
[1m- Name: [0m[36mNew Request[0m
[1m- URL: [0m[33mhttpbin.org[33m[0m
[1m- Request Method: [0m[33mGET[0m

[33m[*][0m Querying workspace ID [36m574f6d89-43b4-4243-a950-32e92c05165a[0m


[33m[*][0m Querying workspace ID [36m34f3a42c-18a7-4ad6-83fb-2c05767d63a7[0m

[1m
Request ID [0m[33m10582367-0da12f5b-4979-4e02-9e88-c17061286681[0m
[1m- Name: [0m[36mGet Air Quality Status[0m
[1m- URL: [0m[33mhttp://dataservice.accuweather.com/forecasts/v1/daily/1day/{{locationKey}}.json?apikey={{accuweatherApiKey}}&details=true[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mapikey[0m=[32m{{accuweatherApiKey}}[0m
[1m- Parameter: [0m[33mdetails[0m=[32mtrue[0m
[1m- Pre-Request Script: [0m[32m// Validate environment variables
const pmEnvironment = pm.environment.toObject();

// Check for required environment variables
pm.expect(pmEnvironment).to.have.all.keys(
    'location',
    'accuweatherApiKey',
    'twitterConsumerKey',
    'twitterConsumerSecret',
    'twitterAccessToken',
    'twitterAccessTokenSecret'
);

// Get an accuweather location key
const apiKey = pm.environment.get('accuweatherApiKey');
const locationQuery = pm.environment.get('location');
const getLocationData = `http://dataservice.accuweather.com/locations/v1/search?apikey=${apiKey}&q=${locationQuery}`;

// Get and save location data from a location query string
function saveLocationData (e, response) {
    // Throw if we get an error
    if (e) { throw e; }
    
    // Handle error response
    if (response.code >= 400) {
        console.log(`PROBLEM :: ${response.code} error while getting location.`);
        console.log(response.text());
        
        // Throw
        throw new Error(`Couldn\'t get location. Check your environment's location value.`);
    }
    
    // Log location info and store the location information
    const responseData = response.json();
    
    if (responseData.length > 1) {
        console.log('WARNING :: Query returned multiple results. Returning the first result.');
    }
    
    const [{ Key: locationKey, EnglishName: locationName }] = responseData;
    
    pm.globals.set('locationKey', locationKey);
    pm.globals.set('locationName', locationName);
    
    console.log(`Getting air quality data for ${locationName} (AccuWeather key ${locationKey})`);
}

// Send the request to get location data
pm.sendRequest(getLocationData, saveLocationData);[0m
[1m
Request ID [0m[33m10582367-ca39bd7b-7a2e-4765-a694-f7edfd1c72d8[0m
[1m- Name: [0m[36mPost Air Quality Status to Twitter[0m
[1m- URL: [0m[33mhttps://api.twitter.com/1.1/statuses/update.json?status={{twitterStatus}}[33m[0m
[1m- Authorization: [0m[33moauth1[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Parameter: [0m[33mstatus[0m=[32m{{twitterStatus}}[0m
[1m- Pre-Request Script: [0m[32m
[0m
[1m
Request ID [0m[33m11177108-0a36bc27-7724-45eb-99ca-77f0bdb07c75[0m
[1m- Name: [0m[36mStation Information - Destinatation[0m
[1m- URL: [0m[33m{{bartBaseUrl}}/stn.aspx?cmd=stninfo&orig={{destinationStation}}&json=y[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mcmd[0m=[32mstninfo[0m
[1m- Parameter: [0m[33morig[0m=[32m{{destinationStation}}[0m
[1m- Parameter: [0m[33mjson[0m=[32my[0m
[1m
Request ID [0m[33m11177108-1ea13c18-fcc9-4298-bbd0-2f44ebc5b678[0m
[1m- Name: [0m[36mStations[0m
[1m- URL: [0m[33m{{bartBaseUrl}}/stn.aspx?cmd=stns&json=y[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mcmd[0m=[32mstns[0m
[1m- Parameter: [0m[33mjson[0m=[32my[0m
[1m
Request ID [0m[33m11177108-5ba6e138-a54e-465d-b852-dabe9fa97fd1[0m
[1m- Name: [0m[36mFare[0m
[1m- URL: [0m[33m{{bartBaseUrl}}/sched.aspx?cmd=fare&orig={{originStation}}&dest={{destinationStation}}&date=today&json=y[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mcmd[0m=[32mfare[0m
[1m- Parameter: [0m[33morig[0m=[32m{{originStation}}[0m
[1m- Parameter: [0m[33mdest[0m=[32m{{destinationStation}}[0m
[1m- Parameter: [0m[33mdate[0m=[32mtoday[0m
[1m- Parameter: [0m[33mjson[0m=[32my[0m
[1m
Request ID [0m[33m11177108-63177caf-3244-4ef2-a05f-e3989c11005c[0m
[1m- Name: [0m[36mMapQuest - Route[0m
[1m- URL: [0m[33mhttp://open.mapquestapi.com/directions/v2/route?from={{tripStartAddress}}&to={{tripEndCoordinates}}&routeType={{routeType}}[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mfrom[0m=[32m{{tripStartAddress}}[0m
[1m- Parameter: [0m[33mto[0m=[32m{{tripEndCoordinates}}[0m
[1m- Parameter: [0m[33mrouteType[0m=[32m{{routeType}}[0m
[1m
Request ID [0m[33m11177108-99467486-368f-43b5-8478-922700d858c0[0m
[1m- Name: [0m[36mReal-Time Estimate - Departure[0m
[1m- URL: [0m[33m{{bartBaseUrl}}/etd.aspx?cmd=etd&orig={{originStation}}&json=y[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mcmd[0m=[32metd[0m
[1m- Parameter: [0m[33morig[0m=[32m{{originStation}}[0m
[1m- Parameter: [0m[33mjson[0m=[32my[0m
[1m
Request ID [0m[33m11177108-bb503c84-f4ef-47e3-a4b4-df36588d3fc2[0m
[1m- Name: [0m[36mSchedule - Departure[0m
[1m- URL: [0m[33m{{bartBaseUrl}}/sched.aspx?cmd=depart&orig={{originStation}}&dest={{destinationStation}}&date=now&b=0&a=4&l=1&json=y[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mcmd[0m=[32mdepart[0m
[1m- Parameter: [0m[33morig[0m=[32m{{originStation}}[0m
[1m- Parameter: [0m[33mdest[0m=[32m{{destinationStation}}[0m
[1m- Parameter: [0m[33mdate[0m=[32mnow[0m
[1m- Parameter: [0m[33mb[0m=[32m0[0m
[1m- Parameter: [0m[33ma[0m=[32m4[0m
[1m- Parameter: [0m[33ml[0m=[32m1[0m
[1m- Parameter: [0m[33mjson[0m=[32my[0m
[1m
Request ID [0m[33m11177108-c08f734e-4231-448e-acb0-eb2e183098f1[0m
[1m- Name: [0m[36mStation Information - Origin[0m
[1m- URL: [0m[33m{{bartBaseUrl}}/stn.aspx?cmd=stninfo&orig={{originStation}}&json=y[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mcmd[0m=[32mstninfo[0m
[1m- Parameter: [0m[33morig[0m=[32m{{originStation}}[0m
[1m- Parameter: [0m[33mjson[0m=[32my[0m
[1m
Request ID [0m[33m11177108-d337e4db-762a-45b1-8dd6-4e100c5da135[0m
[1m- Name: [0m[36mSlack Message[0m
[1m- URL: [0m[33mhttps://slack.com/api/chat.postMessage[33m[0m
[1m- Authorization: [0m[33mbearer[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
	"channel": "{{slackMemberID}}",
	"pretext": "test",
	"blocks": [{
    	"type": "section",
    	"text": {
        	"type": "mrkdwn",
        	"text": "{{advisoriesStr}}"
    	 }
    },
    {
    	"type": "section",
    	"text": {
        	"type": "mrkdwn",
        	"text": "{{delayStr}}"
    	}
    },
    {
    	"type": "section",
    	"text": {
    		"type": "mrkdwn",
    		"text": "*Fare:* ${{fare}}"
    	}
    },{
     	"type": "section",
    	"text": {
    		"type": "mrkdwn",
    		"text": "{{timeToStationStr}}"
    	}   	
    }],
    "attachments": {{attachments}}
}[0m[0m
[1m- Pre-Request Script: [0m[32mconst advisories = pm.variables.get("advisories");
const advisoriesArr = ["*System Advisories:*"];

if (advisories) {
    advisories.forEach(advisory => {
        advisoriesArr.push(`\n- ${advisory}`);
    });
}

const advisoriesStr = advisoriesArr.join('');
console.log(advisoriesStr);
pm.variables.set("advisoriesStr", advisoriesStr);

const delays = pm.variables.get("delays");
const delaysArr = ["*Current Route Delays:*"];

if (delays) {
    delays.forEach(delay => {
        delaysArr.push(`\n- ${delay.line} Line - Delay: ${getFormattedSeconds(delay.delay)}`);
    });
}

if (delaysArr.length === 1) {
    delaysArr.push("\n- No Train Delays");
}

const delaysStr = delaysArr.join('');
console.log(delaysStr);
pm.variables.set("delayStr", delaysStr);

const timeToStation = pm.variables.get("timeToStation");
const stations = pm.variables.get("stations");
let timeToStationStr = "*Travel Time to Station:*\n- No trip time to station information";
if (timeToStation) {
    const address = pm.variables.get("tripStartAddress").replace(/\+/g, " ");
    const stationName = stations ? stations[pm.variables.get("destinationStation")] : pm.variables.get("destinationStation");
    timeToStationStr = `*Travel Time to Station:*\n- Start: ${address}\n- Destination:  ${stationName} Station\n- Estimated Time: ${getFormattedSeconds(timeToStation)}\n|`;
}
console.log(timeToStationStr);
pm.variables.set("timeToStationStr", timeToStationStr);

const trips = pm.variables.get("trips");
let attachments = [];
if (trips) {
    attachments = [{
        "color": "#2eb886",
        "title": "BART Schedule",
        "title_link": "https://www.bart.gov/schedules",
        "text": "Upcoming trips listed below"
    }, ...trips];
}

console.log(attachments);
pm.variables.set("attachments", JSON.stringify(attachments));

function getFormattedSeconds(secondsStr) {
    const seconds = parseInt(secondsStr);
    
    if (seconds / 60 > 0) {
        return `${Math.floor(seconds / 60)}m ${seconds % 60}s`;
    } else {
        return `${secondsStr}s`;
    }
}[0m
[1m
Request ID [0m[33m11177108-e01539d1-a501-4241-84e6-aa29d82feab3[0m
[1m- Name: [0m[36mService Advisories[0m
[1m- URL: [0m[33m{{bartBaseUrl}}/bsa.aspx?cmd=bsa&json=y[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mcmd[0m=[32mbsa[0m
[1m- Parameter: [0m[33mjson[0m=[32my[0m
[1m
Request ID [0m[33m11657775-3cd11be3-4fdb-43b7-829d-0a30242d4f55[0m
[1m- Name: [0m[36mFlipkart Test[0m
[1m- URL: [0m[33mhttps://www.Flipkart Test.com/search?q={{productName}}&otracker=search&marketplace=Flipkart Test&as-show=on&as=off[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mq[0m=[32m{{productName}}[0m
[1m- Parameter: [0m[33motracker[0m=[32msearch[0m
[1m- Parameter: [0m[33mmarketplace[0m=[32mFLIPKART[0m
[1m- Parameter: [0m[33mas-show[0m=[32mon[0m
[1m- Parameter: [0m[33mas[0m=[32moff[0m
[1m
Request ID [0m[33m11657775-495437fd-6629-43bd-b941-b30cfd2a53f9[0m
[1m- Name: [0m[36mShopclues[0m
[1m- URL: [0m[33mhttps://www.shopclues.com/search?q={{productName}}&z=0&rc=1[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mq[0m=[32m{{productName}}[0m
[1m- Parameter: [0m[33mz[0m=[32m0[0m
[1m- Parameter: [0m[33mrc[0m=[32m1[0m
[1m
Request ID [0m[33m11657775-60f3ce59-a5fe-4e60-81ca-d0f31dc00564[0m
[1m- Name: [0m[36mSend Slack Notification[0m
[1m- URL: [0m[33mhttps://hooks.slack.com/services/{{secret}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "text": "Here's your daily price alert for {{productName}}\nAmazon: ₹{{amazon_price}}\nFlipkart Test: ₹{{Flipkart Test_price}}\nSnapdeal: ₹{{snapdeal_price}}\nShopclues: ₹{{shopclues_price}}\neBay: ₹{{ebay_price}}\n\nThe lowest price was ₹{{lowestPrice}} on {{lowestSite}}."
}[0m[0m
[1m- Pre-Request Script: [0m[32mconst lowest = JSON.parse(pm.environment.get("lowest"));
pm.variables.set("lowestSite", lowest.site);
pm.variables.set("lowestPrice", lowest.price);[0m
[1m
Request ID [0m[33m11657775-7cd183b5-c004-46c5-800a-56d25ed7bb44[0m
[1m- Name: [0m[36mInput: Product Name[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get?productName=Dell KB216[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mproductName[0m=[32mDell KB216[0m
[1m
Request ID [0m[33m11657775-7e58d348-6637-4c14-8585-1c7d93687b4f[0m
[1m- Name: [0m[36mAmazon India[0m
[1m- URL: [0m[33mhttps://www.amazon.in/s?k={{productName}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mk[0m=[32m{{productName}}[0m
[1m
Request ID [0m[33m11657775-877dec3a-0136-4098-9947-05e15f468ef0[0m
[1m- Name: [0m[36mSnapdeal[0m
[1m- URL: [0m[33mhttps://www.snapdeal.com/search?keyword={{productName}}&categoryId=0&suggested=false&noOfResults=20&clickSrc=go_header&changeBackToAll=false&foundInAll=false&sort=rlvncy[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mkeyword[0m=[32m{{productName}}[0m
[1m- Parameter: [0m[33mcategoryId[0m=[32m0[0m
[1m- Parameter: [0m[33msuggested[0m=[32mfalse[0m
[1m- Parameter: [0m[33mnoOfResults[0m=[32m20[0m
[1m- Parameter: [0m[33mclickSrc[0m=[32mgo_header[0m
[1m- Parameter: [0m[33mchangeBackToAll[0m=[32mfalse[0m
[1m- Parameter: [0m[33mfoundInAll[0m=[32mfalse[0m
[1m- Parameter: [0m[33msort[0m=[32mrlvncy[0m
[1m
Request ID [0m[33m11657775-8bc9410b-2f03-4e9f-bd29-21afd3279366[0m
[1m- Name: [0m[36meBay India[0m
[1m- URL: [0m[33mhttps://www.ebay.com/sch/i.html?_from=R40&_trksid=m570.l1313&_nkw={{productName}}&_sacat=0[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33m_from[0m=[32mR40[0m
[1m- Parameter: [0m[33m_trksid[0m=[32mm570.l1313[0m
[1m- Parameter: [0m[33m_nkw[0m=[32m{{productName}}[0m
[1m- Parameter: [0m[33m_sacat[0m=[32m0[0m
[1m
Request ID [0m[33m11657775-e8508356-eaa6-4652-bd7e-d93b57f66ab0[0m
[1m- Name: [0m[36mOutput: Best Price[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m11806954-019faac5-c5d7-492b-a977-5d4ce43bcdf8[0m
[1m- Name: [0m[36mReset game[0m
[1m- URL: [0m[33mhttps://api.postman.com/environments/{{environment_id}}[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mx-api-key[0m: [32m{{postman_api_key}}[0m[0m
[1m- Request Body: [0m[32m{"environment" : {
	"id": "{{environment_id}}",
	"name": "{{environment_name}}",
		"values": [
		{
			"key": "airtable_url",
			"value": "{{airtable_url}}",
			"enabled": true
		},
		{
			"key": "postman_api_key",
			"value": "{{postman_api_key}}",
			"enabled": true
		},
		{
			"key": "airtable_api_key",
			"value": "{{airtable_api_key}}",
			"enabled": true
		},
		{
			"key": "environment_id",
			"value": "{{environment_id}}",
			"enabled": true
		},
		{
			"key": "environment_name",
			"value": "{{environment_name}}",
			"enabled": true
		},
		{
			"key": "top_scorer",
			"value": "{{top_scorer}}",
			"enabled": true
		},
		{
			"key": "user_name",
			"value": "",
			"enabled": true
		},
		{
			"key": "response_url",
			"value": "",
			"enabled": true
		},
		{
			"key": "check_answer",
			"value": "",
			"enabled": true
		},
		{
			"key": "question",
			"value": "",
			"enabled": true
		},
		{
			"key": "answer1",
			"value": "",
			"enabled": true
		},
		{
			"key": "answer2",
			"value": "",
			"enabled": true
		},
		{
			"key": "answer3",
			"value": "",
			"enabled": true
		},
		{
			"key": "answer4",
			"value": "",
			"enabled": true
		},
		{
			"key": "old_question",
			"value": "",
			"enabled": true
		},
		{
			"key": "level",
			"value": "0",
			"enabled": true
		},
		{
			"key": "spells",
			"value": "",
			"enabled": true
		},
		{
			"key": "reason",
			"value": "",
			"enabled": true
		}
	]
}
}[0m[0m
[1m
Request ID [0m[33m11806954-79cf2a29-91c7-4d2c-b2f5-a22def87b5cd[0m
[1m- Name: [0m[36mGateway[0m
[1m- URL: [0m[33m{{airtable_url}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAuthorization[0m: [32m{{airtable_api_key}}[0m[0m
[1m- Pre-Request Script: [0m[32mvar previousRequest = JSON.parse(globals.previousRequest),
    webhookRequestData = previousRequest.data;
pm.environment.set("level", parseInt(pm.environment.get("level")) + 1);
if(webhookRequestData.payload){
    var payload = JSON.parse(webhookRequestData.payload);
    pm.environment.set("user_name", payload.user.username);
    pm.environment.set("response_url", payload.response_url);
    pm.environment.set("check_answer", payload.actions[0].text.text);
    pm.environment.set("old_question", payload.actions[0].value);
    console.log(webhookRequestData);
}
else
{
    pm.environment.set("user_name", webhookRequestData.user_name);
    pm.environment.set("response_url", webhookRequestData.response_url);
}
console.log(pm.environment.get("user_name"));

console.log(pm.environment.get("response_url"));[0m
[1m
Request ID [0m[33m11806954-bc38946c-c848-44c7-a7ea-3b07fd0c7756[0m
[1m- Name: [0m[36mFirst question[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"blocks": [
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "Welcome to the Hogwarts battle arena. Voldemort has managed to get his hands on the Elder Wand and now it's your responsibility as a Gryffindor to make sure it's in safe hands. As Voldemort is not the true master of the wand (and he doesn't know that yet), you still have a chance to win it. \n \n TLDR : Have a one-on-one battle with Voldemort and win the Elder wand \n {{top_scorer}} is our top-scorer for now. Let's see if you can get your name here. \n *Voldemort has attacked you with {{question}}* \n \n Choose one spell that you think is the right one."
			}
		},
		{
			"type": "actions",
			"elements": [
				{
					"type": "button",
					"text": {
						"type": "plain_text",
						"text": "{{answer1}}",
						"emoji": true
					},
					"value": "{{question}}"
				},
				{
					"type": "button",
					"text": {
						"type": "plain_text",
						"text": "{{answer2}}",
						"emoji": true
					},
					"value": "{{question}}"
				},
				{
					"type": "button",
					"text": {
						"type": "plain_text",
						"text": "{{answer3}}",
						"emoji": true
					},
					"value": "{{question}}"
				},
				{
					"type": "button",
					"text": {
						"type": "plain_text",
						"text": "{{answer4}}",
						"emoji": true
					},
					"value": "{{question}}"
				}
			]
		}
	]
}[0m[0m
[1m
Request ID [0m[33m11806954-e135116b-3104-4639-81d2-28d09b872f27[0m
[1m- Name: [0m[36mGoodbye[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"blocks": [
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "{{reason}}"
			}
		}
	]
}[0m[0m
[1m
Request ID [0m[33m11806954-e1981d09-6d86-42c1-bff8-3e053b94479b[0m
[1m- Name: [0m[36mSend Question[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"blocks": [
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "That was awesome. You've made your opponent weaker! Voldemort is now attacking you with {{question}}! \n You are on level: {{level}}"
			}
		},
		{
			"type": "actions",
			"elements": [
				{
					"type": "button",
					"text": {
						"type": "plain_text",
						"text": "{{answer1}}",
						"emoji": true
					},
					"value": "{{question}}"
				},
				{
					"type": "button",
					"text": {
						"type": "plain_text",
						"text": "{{answer2}}",
						"emoji": true
					},
					"value": "{{question}}"
				},
				{
					"type": "button",
					"text": {
						"type": "plain_text",
						"text": "{{answer3}}",
						"emoji": true
					},
					"value": "{{question}}"
				},
				{
					"type": "button",
					"text": {
						"type": "plain_text",
						"text": "{{answer4}}",
						"emoji": true
					},
					"value": "{{question}}"
				}
			]
		}
	]
}[0m[0m
[1m
Request ID [0m[33m11806954-e59e4414-4ae6-4be0-a5ac-45667f04ac3c[0m
[1m- Name: [0m[36mUpdate level[0m
[1m- URL: [0m[33mhttps://api.postman.com/environments/{{environment_id}}[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mx-api-key[0m: [32m{{postman_api_key}}[0m[0m
[1m- Request Body: [0m[32m{"environment" : {
	"id": "{{environment_id}}",
	"name": "{{environment_name}}",
	"values": [
		{
			"key": "airtable_url",
			"value": "{{airtable_url}}",
			"enabled": true
		},
		{
			"key": "postman_api_key",
			"value": "{{postman_api_key}}",
			"enabled": true
		},
		{
			"key": "airtable_api_key",
			"value": "{{airtable_api_key}}",
			"enabled": true
		},
		{
			"key": "environment_id",
			"value": "{{environment_id}}",
			"enabled": true
		},
		{
			"key": "environment_name",
			"value": "{{environment_name}}",
			"enabled": true
		},
		{
			"key": "top_scorer",
			"value": "{{top_scorer}}",
			"enabled": true
		},
		{
			"key": "user_name",
			"value": "{{user_name}}",
			"enabled": true
		},
		{
			"key": "response_url",
			"value": "{{response_url}}",
			"enabled": true
		},
		{
			"key": "check_answer",
			"value": "{{check_answer}}",
			"enabled": true
		},
		{
			"key": "question",
			"value": "{{question}}",
			"enabled": true
		},
		{
			"key": "answer1",
			"value": "{{answer1}}",
			"enabled": true
		},
		{
			"key": "answer2",
			"value": "{{answer2}}",
			"enabled": true
		},
		{
			"key": "answer3",
			"value": "{{answer3}}",
			"enabled": true
		},
		{
			"key": "answer4",
			"value": "{{answer4}}",
			"enabled": true
		},
		{
			"key": "old_question",
			"value": "{{old_question}}",
			"enabled": true
		},
		{
			"key": "level",
			"value": "{{level}}",
			"enabled": true
		},
		{
			"key": "spells",
			"value": "{{spells}}",
			"enabled": true
		},
		{
			"key": "reason",
			"value": "{{reason}}",
			"enabled": true
		}
	]
}
}[0m[0m
[1m
Request ID [0m[33m11806954-ee778e62-6c70-48d4-853a-03d11531e514[0m
[1m- Name: [0m[36mCheck answer[0m
[1m- URL: [0m[33mgoogle.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Pre-Request Script: [0m[32mlet records = pm.environment.get("records");
let level = pm.environment.get("level");
let question = pm.environment.get("old_question");
let answer = pm.environment.get("check_answer");
let question_power = 0;
let answer_power = 0;

for(var i = 0; i < records.length; i++){
    if(records[i].Spell == question){
        question_power = records[i].Power;
    }
    if(records[i].Spell == answer){
        answer_power = records[i].Power;
    }
}
if(answer_power == 10){
    pm.environment.set("reason", "You made Dumbledore roll in his grave for using a unforgivable curse.");
}
else{
    pm.environment.set("reason", "You lost. Better luck next time.");
}

if(question_power < answer_power && answer_power != 10){
    postman.setNextRequest("Send Question");
}
else{
    postman.setNextRequest("Goodbye");
}

if(question_power < answer_power && answer_power != 10 && level == 6){
    pm.environment.set("reason", "You have successfully defeated Voldemort. You now have the Elder Wand for safekeeping.");
    postman.setNextRequest("Goodbye");
    pm.environment.set("top_scorer", pm.environment.get("user_name"));
}


[0m
[1m
Request ID [0m[33m12132222-25ee48db-44ff-4261-a60d-c930f4050fbe[0m
[1m- Name: [0m[36mHigh tempo country[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/recommendations?seed_genres=country&min_tempo=160&target_acousticness=0.9[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer <access_token>[0m[0m
[1m- Parameter: [0m[33mseed_genres[0m=[32mcountry[0m
[1m- Parameter: [0m[33mmin_tempo[0m=[32m160[0m
[1m- Parameter: [0m[33mtarget_acousticness[0m=[32m0.9[0m
[1m
Request ID [0m[33m12132222-3058b61d-7683-4940-9490-94e9ab0446a9[0m
[1m- Name: [0m[36mAcoustic hip-hop[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/recommendations?seed_genres=hip-hop&target_acousticness=0.9[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer <access_token>[0m[0m
[1m- Parameter: [0m[33mtarget_acousticness[0m=[32m0.9[0m
[1m- Parameter: [0m[33mseed_genres[0m=[32mhip-hop[0m
[1m
Request ID [0m[33m12132222-45d509b9-277e-4378-900a-91b693faedf8[0m
[1m- Name: [0m[36mDanceable blues[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/recommendations?seed_genres=blues&min_danceability=0.8[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer <access_token>[0m[0m
[1m- Parameter: [0m[33mseed_genres[0m=[32mblues[0m
[1m- Parameter: [0m[33mmin_danceability[0m=[32m0.8[0m
[1m- Parameter: [0m[33mmin_popularity[0m=[32m80[0m
[1m- Parameter: [0m[33mtarget_acousticness[0m=[32m0.9[0m
[1m
Request ID [0m[33m12132222-b069e6d0-1d2a-4215-a4fa-eceb9265b9a6[0m
[1m- Name: [0m[36mPopular danceable songs - Pop & Rock[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/recommendations?seed_genres=pop, rock&min_danceability=0.5&min_popularity=80[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer <access_token>[0m[0m
[1m- Parameter: [0m[33mseed_genres[0m=[32mpop, rock[0m
[1m- Parameter: [0m[33mtarget_acousticness[0m=[32m0.9[0m
[1m- Parameter: [0m[33mmin_danceability[0m=[32m0.5[0m
[1m- Parameter: [0m[33mmin_popularity[0m=[32m80[0m
[1m
Request ID [0m[33m12132222-be986d32-f7b2-409a-9d15-92ba6523a70b[0m
[1m- Name: [0m[36mExplore[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/recommendations?seed_genres=pop&min_tempo=160[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer <access_token>[0m[0m
[1m- Parameter: [0m[33mseed_genres[0m=[32mpop[0m
[1m- Parameter: [0m[33mmin_tempo[0m=[32m160[0m
[1m- Parameter: [0m[33mmin_acousticness[0m=[32m0.8[0m
[1m- Parameter: [0m[33mmin_danceability[0m=[32m[0m
[1m- Parameter: [0m[33mmin_popularity[0m=[32m[0m
[1m- Parameter: [0m[33mmin_liveness[0m=[32m0.6[0m
[1m- Parameter: [0m[33mmin_valence[0m=[32m[0m
[1m
Request ID [0m[33m12403653-1e9c507c-e06f-46c1-97fc-b8f4d797d3db[0m
[1m- Name: [0m[36mCharacters[0m
[1m- URL: [0m[33mhttps://www.anapioficeandfire.com/api/characters?pageSize=100[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mpageSize[0m=[32m100[0m
[1m- Parameter: [0m[33mname[0m=[32mDaenerys Targaryen[0m
[1m- Parameter: [0m[33mgender[0m=[32m[0m
[1m- Parameter: [0m[33mculture[0m=[32m[0m
[1m- Parameter: [0m[33mborn[0m=[32m[0m
[1m- Parameter: [0m[33mdied[0m=[32m[0m
[1m- Parameter: [0m[33misAlive[0m=[32m[0m
[1m- Parameter: [0m[33mpage[0m=[32m[0m
[1m
Request ID [0m[33m12403653-2ccac6cb-88a9-461d-8377-bc233addb979[0m
[1m- Name: [0m[36mBooks[0m
[1m- URL: [0m[33mhttps://www.anapioficeandfire.com/api/books?page&pageSize[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mname[0m=[32m[0m
[1m- Parameter: [0m[33mfromReleaseDate[0m=[32m[0m
[1m- Parameter: [0m[33mtoReleaseDate[0m=[32m[0m
[1m- Parameter: [0m[33mpage[0m=[32m[0m
[1m- Parameter: [0m[33mpageSize[0m=[32m[0m
[1m
Request ID [0m[33m12403653-9dd10b03-511a-42db-809a-2a2382ef74f2[0m
[1m- Name: [0m[36mHouses[0m
[1m- URL: [0m[33mhttps://www.anapioficeandfire.com/api/houses?page&pageSize[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m12403653-4a279cae-c250-43f6-b7b0-0ca95ab263ac[0m
[1m- Name: [0m[36mAbilities[0m
[1m- URL: [0m[33m[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m12403653-6d91fe60-96c7-4819-a56e-4e227cf49fda[0m
[1m- Name: [0m[36mPokedexes [0m
[1m- URL: [0m[33m[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m12403653-99ba4e63-5ced-4087-a87c-b3b877fc569c[0m
[1m- Name: [0m[36mPokemon[0m
[1m- URL: [0m[33mhttps://pokeapi.co/api/v2/pokemon/?limit=151[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mlimit[0m=[32m151[0m
[1m- Parameter: [0m[33moffset[0m=[32m151[0m
[1m
Request ID [0m[33m12403653-a18777cb-0a91-4cf1-96d9-3f3265c67fdd[0m
[1m- Name: [0m[36mEvolution Chains[0m
[1m- URL: [0m[33mhttps://pokeapi.co/api/v2/evolution-chain/[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m12403653-cd003c23-4fa3-415a-8fb3-2c1e6fad4fa2[0m
[1m- Name: [0m[36mGenerations[0m
[1m- URL: [0m[33mhttps://pokeapi.co/api/v2/generation/[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m12901847-10a43bb7-010c-4557-8468-ee341d84d160[0m
[1m- Name: [0m[36mOpenWeather - Temp -Weather[0m
[1m- URL: [0m[33mapi.openweathermap.org/data/2.5/weather?zip={{zipcode}}&appid={{api-key}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33m[0m=[32m[0m
[1m- Parameter: [0m[33mzip[0m=[32m{{zipcode}}[0m
[1m- Parameter: [0m[33mappid[0m=[32m{{api-key}}[0m
[1m
Request ID [0m[33m12901847-19fc9121-77f4-444b-9090-8c7dfe5695ab[0m
[1m- Name: [0m[36mTweet Information[0m
[1m- URL: [0m[33mhttps://api.twitter.com/1.1/statuses/update.json?status=The weather in {{thecity}} is {{weather}} and {{temp}} °F. AQI is {{AQI}}, air quality is {{aq}}. You can have {{activity}} activites today. {{jacket}}[33m[0m
[1m- Authorization: [0m[33moauth1[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Parameter: [0m[33mstatus[0m=[32mThe weather in {{thecity}} is {{weather}} and {{temp}} °F. AQI is {{AQI}}, air quality is {{aq}}. You can have {{activity}} activites today. {{jacket}}[0m
[1m
Request ID [0m[33m12901847-cb0926a0-30aa-439b-9b89-9d8a59f3f462[0m
[1m- Name: [0m[36mAirNow - AQI[0m
[1m- URL: [0m[33mhttps://www.airnowapi.org/aq/observation/zipCode/current/?format=application/json&distance=25&API_KEY={{airnowkey}}&zipCode={{zipcode}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mformat[0m=[32mapplication/json[0m
[1m- Parameter: [0m[33mdistance[0m=[32m25[0m
[1m- Parameter: [0m[33mAPI_KEY[0m=[32m{{airnowkey}}[0m
[1m- Parameter: [0m[33mzipCode[0m=[32m{{zipcode}}[0m
[1m
Request ID [0m[33m13144781-131f6449-070d-4a26-959f-3b22a236dbe3[0m
[1m- Name: [0m[36mDeleteTask[0m
[1m- URL: [0m[33m{{url_}}[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m- Header: [0m[33mAuthorization[0m: [32m{{airtable_auth}}[0m[0m
[1m
Request ID [0m[33m13144781-1f56ffd3-9f68-41ca-9c80-e35407ff9882[0m
[1m- Name: [0m[36mCreateTask[0m
[1m- URL: [0m[33m{{url_}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mAuthorization[0m: [32m{{airtable_auth}}[0m[0m
[1m- Request Body: [0m[32m{{_payload}}[0m[0m
[1m- Pre-Request Script: [0m[32mconsole.log(pm.environment.get('_payload'))[0m
[1m
Request ID [0m[33m13144781-2213fa34-36f7-4782-937a-948594daf84c[0m
[1m- Name: [0m[36mTaskResponse[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{pre_response}}[0m[0m
[1m- Pre-Request Script: [0m[32mconsole.log('payload for slack',pm.environment.get('pre_response'))
console.log(pm.environment.get('pre_response'))
const tasks = JSON.parse(pm.environment.get('pre_response'));
const high = [],low = [], mid = [],others = [];
tasks.map(({id,fields})=>{
    if(fields.priority==="high")
        high.push({...fields,id});
    else if(fields.priority==="medium")
        mid.push({...fields,id});
    else if(fields.priority === "low")
        low.push({...fields,id});
    else others.push({...fields,id});
        })
    console.log("payload others task",JSON.stringify(others))
const highprep = [],midprep = [],lowprep = [],othprep = [];
high.map(task=>{
    highprep.push(
    `{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "${task.status==="pending"?':memo:':':heavy_check_mark:'} ${task.name}\nDue by *${task.end}*\nAssigned by:*${task.creator}*\n${task.reference==="Not Specified\n"?"":('*References:* '+task.reference)}"
			},
			"accessory": {
				"type": "overflow",
				"options": [${task.status==="pending"?('{"text": {"type": "plain_text","text": ":heavy_check_mark: Mark Complete ","emoji": true},"value": "mark_complete?'+task.id+'"},'):""}
					${task.creator===pm.environment.get("curr_user")?('{"text": {"type": "plain_text","text": ":x: Delete this task","emoji": true},"value": "delete?'+task.id+'"}'):""}
				],
				"action_id": "overflow-action"
			}
		}`)
})
mid.map(task=>{
    midprep.push(
    `{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "${task.status==="pending"?':memo:':':heavy_check_mark:'} ${task.name}\nDue by *${task.end}*\nAssigned by:*${task.creator}*\n${task.reference==="Not Specified\n"?"":('*References:* '+task.reference)}"
			},
			"accessory": {
				"type": "overflow",
				"options": [${task.status==="pending"?('{"text": {"type": "plain_text","text": ":heavy_check_mark: Mark Complete ","emoji": true},"value": "mark_complete?'+task.id+'"},'):""}
					${task.creator===pm.environment.get("curr_user")?('{"text": {"type": "plain_text","text": ":x: Delete this task","emoji": true},"value": "delete?'+task.id+'"}'):""}
				],
				"action_id": "overflow-action"
			}
		}`)
})
low.map(task=>{
    lowprep.push(
    `{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "${task.status==="pending"?':memo:':':heavy_check_mark:'} ${task.name}\nDue by *${task.end}*\nAssigned by:*${task.creator}*\n${task.reference==="Not Specified\n"?"":('*References:* '+task.reference)}"
			},
			"accessory": {
				"type": "overflow",
				"options": [${task.status==="pending"?('{"text": {"type": "plain_text","text": ":heavy_check_mark: Mark Complete ","emoji": true},"value": "mark_complete?'+task.id+'"},'):""}
					${task.creator===pm.environment.get("curr_user")?('{"text": {"type": "plain_text","text": ":x: Delete this task","emoji": true},"value": "delete?'+task.id+'"}'):""}
				],
				"action_id": "overflow-action"
			}
		}`)
})
others.map(task=>{
    othprep.push(
    `{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "${task.status==="pending"?':memo:':':heavy_check_mark:'} ${task.name}\nDue by *${task.end}*\nAssigned by:*${task.creator}*\n${task.reference==="Not Specified\n"?"":('*References:* '+task.reference)}"
			},
			"accessory": {
				"type": "overflow",
				"options": [${task.status==="pending"?('{"text": {"type": "plain_text","text": ":heavy_check_mark: Mark Complete ","emoji": true},"value": "mark_complete?'+task.id+'"},'):""}
					${task.creator===pm.environment.get("curr_user")?('{"text": {"type": "plain_text","text": ":x: Delete this task","emoji": true},"value": "delete?'+task.id+'"}'):""}
				],
				"action_id": "overflow-action"
			}
		}`)
})
const blocks = [];
let sendPay = `{"blocks": [`
    if(highprep.length>0)
    blocks.push(`{"type": "divider"},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "*High Priority*"
			}
		},
		{
			"type": "divider"
		},
        `+highprep.join(","))
 if(midprep.length>0)
  blocks.push(`{"type": "divider"},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "*Medium Priority*"
			}
		},
		{
			"type": "divider"
		},
        `+midprep.join(","))
         if(lowprep.length>0)
 blocks.push(`{"type": "divider"},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "*Low Priority*"
			}
		},
		{
			"type": "divider"
		},
        `+lowprep.join(","))
                 if(othprep.length>0)
 blocks.push(`{"type": "divider"},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "*No Priority*"
			}
		},
		{
			"type": "divider"
		},
        `+othprep.join(","))
	sendPay+=blocks.join(",")+`]}`;
    console.log("final payload",sendPay);
if(low.length+high.length+mid.length+others.length!==0)
pm.environment.set('pre_response',sendPay)
else pm.environment.set('pre_response',`{
    "text":"\t:party_blob: *No tasks scheduled!!!*"
}`)[0m
[1m
Request ID [0m[33m13144781-41cffcc9-46a1-435e-a9f5-2d14b4258ca1[0m
[1m- Name: [0m[36mListTasks[0m
[1m- URL: [0m[33m{{url_}}&sort%5B0%5D%5Bfield%5D=end&sort%5B0%5D%5Bdirection%5D=asc[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAuthorization[0m: [32m{{airtable_auth}}[0m[0m
[1m- Pre-Request Script: [0m[32mconsole.log('url is now',pm.environment.get('url_'))[0m
[1m
Request ID [0m[33m13144781-42ababc0-bac7-40cb-8d71-c5bbe4d323f6[0m
[1m- Name: [0m[36mMarkComplete[0m
[1m- URL: [0m[33m{{url_}}[33m[0m
[1m- Request Method: [0m[33mPATCH[0m
[1m- Header: [0m[33mAuthorization[0m: [32m{{airtable_auth}}[0m[0m
[1m- Request Body: [0m[32m{{_payload}}[0m[0m
[1m- Pre-Request Script: [0m[32mconsole.log(pm.environment.get('_payload'))[0m
[1m
Request ID [0m[33m13144781-663e94be-d21b-4a28-9976-02d16e4962cc[0m
[1m- Name: [0m[36mTaskDeletedResponse[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "text":"Marked!!!"
}[0m[0m
[1m- Pre-Request Script: [0m[32mconsole.log('payload for slack',pm.environment.get('pre_response'))[0m
[1m
Request ID [0m[33m13144781-923bded9-c188-4532-bf67-5b4252e88edb[0m
[1m- Name: [0m[36mMarkCompleteResponse[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "text":"Marked!!!"
}[0m[0m
[1m- Pre-Request Script: [0m[32mconsole.log('payload for slack',pm.environment.get('pre_response'))[0m
[1m
Request ID [0m[33m13144781-c1329937-2a17-4ab0-9a57-bddbe48e0252[0m
[1m- Name: [0m[36mApp[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "text":"{{pre_response}}"
}[0m[0m
[1m- Pre-Request Script: [0m[32mvar previousRequest,user,payload;
try{
    if(globals.previousRequest===undefined)
        throw new NonDynamicRequestError("Not a dynamic monitor invoke request")
    else{
        console.log('incoming payload',globals.previousRequest)
        previousRequest = JSON.parse(globals.previousRequest)
        if(previousRequest.data.payload !==undefined){
            payload = JSON.parse(previousRequest.data.payload)
            console.log("parsed payload",JSON.stringify(payload))
        }
        pm.environment.set('response_url',previousRequest.data.response_url||payload.response_url)
        user = previousRequest.data.user_name||payload.user.username;
        pm.environment.set('curr_user',user);
    }
}
catch(e){
    console.log(JSON.stringify(e));
    postman.setNextRequest(null);
}
const at_url = pm.environment.get("at_url")
const db_const_task_completed = "completed"
const db_const_task_pending = "pending"
/*--------------------------------------------------------------------------------*/
class Command {
    before(){
        return null;
    }
    next(){
        postman.setNextRequest(null);
    }
    get usageHint(){
        return null;
    }
    get usageDescription(){
        return null;
    }
    get usageExamples(){
        return [];
    }
}
/*---------------------------------------------------------------------------------*/
/*---------------------------------BUILDER_CLASSES-------------------------------*/
/**
 * Builder Class for Task that implements method chaining
 * @class TaskBuilder
 * @constructor name
 */
class TaskBuilder {
    constructor(id) {
        this.id = id;
    }
    withName(name){
        this.name = name;
        return this;
    }
    startsAt(startDate){
        this.startDate = startDate;
        return this;
    }
    endsAt(endDate){
        this.endDate = endDate;
        return this;
    }
    withPriority(priority){
        this.priority = priority;
        return this;
    }
    withReference(reference){
        this.reference = reference;
        return this;
    }
    withCreator(creator){
        this.creator = creator;
        return this;
    }
    withStatus(status){
        this.status = status;
        return this;
    }
    withNotes(notes){
        this.notes = notes;
        return this;
    }
    withAssociatedUsers(users){
        this.users = users;
        return this;
    }
    associateUser(user){
        this.users = user;
        return this;
    }
    build(){
        return new Task(this);
    }
}
/*--------------------------------------------------------------------------------------*/
/*----------------------------------------MODELS----------------------------------------*/
/**
 * @desc Task Model
 * @constructor TaskBuilder
 */
class Task{
    constructor(builder) {
        this.name=builder.name;
        this.start = builder.startDate || new Date().toDateString();
        this.end=builder.endDate||new Date().toDateString();
        this.priority=builder.priority||'Not Specified';
        this.reference=builder.reference||'Not Specified';
        this.creator=builder.creator||user;
        this.status=builder.status||db_const_task_pending;
        this.notes=builder.notes||'';
        this.associated_users=builder.users||null;
    }
}
/*--------------------------------------------------------------------------------------*/
/*----------------------------------COMMANDER_CLASSES[aka Router]-----------------------------------*/
/**
 * Command Conductor
 * @desc Executes the command and evaluate the workflow
 * @class Conductor
 */
class Conductor{
    run(command,args,commandRegister){
        command.before();
        pm.environment.set('pre_response',command.preResponseMessage||':robot_face:');
        console.log(`Executing command: ${command.name}`);
        command.prepare(args,commandRegister);
        command.next();
    }
}

/**
 * Command Register
 *  @desc Responsible for registering commands and evaluating them
 *  @class CommandRegister
 */
class CommandRegister{
    constructor() {
        this.commands = {};
    }
    register(command){
        this.commands[command.identifier] = command;
        return this;
    }
    pull(identifier){
        return this.commands[identifier];
    }
    get registered(){
        return this.commands;
    }
    set unparsed_args(args){
        this.args = args;
    }
    get unparsed_args(){
        return this.args;
    }
}
// field
/*-------------------------------------------------------------------------------*/
/*-------------------------------------COMMANDS----------------------------------*/
/**
 *  List Tasks Command
 *  @desc A type of Slack Command for retrieving all the tasks
 *  @class ListMyTasksCommand
 *  @example /tasks
 *  @extends Command
 *  @throws CommandNotFoundError
 */
class ListMyTasksCommand extends Command{
    get identifier(){
        return "/tasks";
    }
    get preResponseMessage(){
        return 'Hold on! I am fetching all of your tasks';
    }
    get name(){
        return 'List My Tasks';
    }
    prepare(args){
        ///create a request url for the air table with payload to retrieve all the results from the DB
        let url;
        //list pending tasks
        if(args.length===0)
            url = at_url+`/tasks?filterByFormula=AND(status="${db_const_task_pending}",associated_users="${user}")`;
        //list all tasks
        else if(args.length===1 && args[0]==="all")
            url = at_url+`/tasks?filterByFormula=AND(1,associated_users="${user}")`;
        //list completed tasks
        else if(args.length===1 && args[0]==="completed")
            url = at_url+`/tasks?filterByFormula=AND(status="${db_const_task_completed}",associated_users="${user}")`;
        //unescaped string
        else if(args.length===2 && args[0]==="unescaped")
            url = at_url + `/tasks?filterByFormula=${args[1]}`;
        else throw new CommandArgsError();
        pm.environment.set('url_',url);
    }
    next(){

    }
    get usageHint(){
        return "/tasks";
    }
    get usageDescription(){
        return "List all the tasks assigned to me";
    }
    get usageExamples(){
        return [
            "`/tasks all`",
            "`/tasks completed`",
            "`/tasks unescaped query`",
            '\n\tReference: <https://support.airtable.com/hc/en-us/articles/203255215-Formula-Field-Reference|*Filter Queries on Air Table*>']
    }
}

/**
 * List tasks for another user
 * @desc A type of slack command for listing other user's tasks
 * @class ListOtherUserTasksCommand
 * @throws CommandNotFoundError
 * @example /tasks [username]
 */
class ListOtherUserTasksCommand extends Command{
    get identifier(){
        return "/tasksfor";
    }
    get name(){
        return `List tasks for another user`;
    }
    prepare(args){
        ///create a request url for the airtable with payload to retrieve all the results from the DB
        let url;
        //list pending tasks
        if(args.length===1)
            url = at_url+`/tasks?filterByFormula=AND(status="${db_const_task_pending}",associated_users="${args[0].substring(1)}")`;
        //list all tasks
        else if(args.length===2 && args[1]==="all")
            url = at_url+`/tasks?filterByFormula=AND(1,associated_users="${args[0].substring(1)}")`;
        //list completed tasks
        else if(args.length===2 && args[1]==="completed")
            url = at_url+`/tasks?filterByFormula=AND(status="${db_const_task_completed}",associated_users="${args[0].substring(1)}")`;
        else throw new CommandArgsError();
        pm.environment.set('url_',url);
    }
    get preResponseMessage(){
        return 'Hold on! I am fetching all tasks of this user';
    }
    get usageHint(){
        return "/tasksfor @user.handle";
    }
    get usageDescription(){
        return "List all the tasks assigned to a user";
    }
    get usageExamples(){
        return [
            "`/tasksfor @user.handle all`",
            "`/tasksfor @user.handle completed`",
        ]
    }
    next() {
        postman.setNextRequest('ListTasks');
    }
}

/**
 * Create new Task
 * @desc creates a new task and assigns users to it
 * @class AssignTaskCommand
 * @example /taskcreate [...]
 * @throws CommandNotFoundError
 */
class CreateTaskCommand extends Command{
    get identifier(){
        return "/taskmake"
    }
    get preResponseMessage(){
        return ":robot_face: Creating a new task";
    }
    get name(){
        return "Create new task command";
    }
    prepare(args,commandRegister) {
        //[taskname,end,user,priority?,reference?]
        const date_regex = /^(0[1-9]|1[0-2])\/(0[1-9]|1\d|2\d|3[01])\/(19|20)\d{2}$/;
        if(args.length<3 || args.length>5)
            throw new CommandArgsError();
        else if (!(date_regex.test(args[1]))) {
            throw new CommandArgsError("Check task dates");
        }
        else{
            const task = new TaskBuilder()
                .withName(args[0])
                .startsAt(new Date().toLocaleDateString())
                .endsAt(args[1])
                .withCreator(user)
                .withAssociatedUsers(args[2].substring(1))
            if(args[3] && ["medium","high","low"].includes(args[3])){
                task.withPriority(args[3])
            }
            if(args[4])
                task.withReference(args[4]);
            const payload = {"records":[{"fields":task.build()}]}
            pm.environment.set('url_',at_url+'/tasks');
            pm.environment.set('_payload',JSON.stringify(payload));
        }
    }
    next() {
        postman.setNextRequest('CreateTask');
    }
    get usageHint(){
        return "/taskmake task_name target_date @user.handle [?priority] [?references]";
    }
    get usageDescription(){
        return "Create and assign task to a user";
    }
}
class MakeTaskCommand extends Command{
    get identifier(){
        return "/maketask"
    }
    get preResponseMessage(){
        return ':robot_face: Creating a new task';
    }
    get name(){
        return "Create new task command";
    }
    prepare(args,commandRegister) {

        //[taskname,end,user,priority?,reference?]
        const date_regex = /^(0[1-9]|1[0-2])\/(0[1-9]|1\d|2\d|3[01])\/(19|20)\d{2}$/;
        let rawArgs = commandRegister.unparsed_args;
        console.log("raw args",rawArgs)

        const possibleName = rawArgs.match(/(`[^`]*)`/g);
        console.log("possible name",JSON.stringify(possibleName))
        if(possibleName!==null && possibleName.length>0){
            rawArgs.replace(possibleName[0],"");
        }else{
            throw new CommandArgsError("Task subject not found");
        }

        const possibleDate = rawArgs.match(/(\d{1,4}([.\-/])\d{1,2}([.\-/])\d{1,4})/g);

        console.log("possible date",JSON.stringify(possibleDate))
        if(possibleDate!==null && possibleDate.length>0){
            rawArgs.replace(possibleDate[0],"");
            if (!(date_regex.test(possibleDate[0])))throw new CommandArgsError("Task deadline incorrectly formed. Follow MM/DD/YYYY");
        }else{
            throw new CommandArgsError("Task deadline not found");
        }
        const possibleUser = rawArgs.match(/@(\S+)/)
        console.log("possible user",JSON.stringify(possibleUser))
        if(possibleUser!==null && possibleUser.length<0){
            throw new CommandArgsError("No user assigned to this task. Task discarded");
        }else{
            rawArgs.replace(possibleUser[0],"");
        }
        let priority;
        if(rawArgs.indexOf("high")!==-1 || rawArgs.indexOf("urgent")!==-1){
            priority = "high";
        }else if(rawArgs.indexOf("low")!==-1){
            priority = "low";
        }else if(rawArgs.indexOf("mid")!==-1){
            priority = "medium"
        }
        console.log("possible priority",JSON.stringify(priority))
        const task = new TaskBuilder()
            .withName(possibleName[0].replace('`','').replace('`', ''))
            .startsAt(new Date().toLocaleDateString())
            .endsAt(possibleDate[0])
            .withCreator(user)
            .withAssociatedUsers(possibleUser[1])
        if(priority && ["medium","high","low"].includes(priority)){
            task.withPriority(priority)
        }
        const payload = {"records":[{"fields":task.build()}]}
        pm.environment.set('url_',at_url+'/tasks');
        pm.environment.set('_payload',JSON.stringify(payload));
    }
    next() {
        postman.setNextRequest('CreateTask');
    }
    get usageHint(){
        return "/maketask";
    }
    get usageDescription(){
        return "Create and assign task to a user";
    }

    get usageExamples() {
        return ['/maketask hey make task can you please schedule `Our Annual meeting` with @pawan.kumar at 10/28/2020 at an urgent basis']
    }
}

/**
 * Hint Command
 * @desc shows all possible commands with taskman
 * @class HintCommand
 * @example /taskman
 * @throws CommandNotFoundError
 */
class HintCommand extends Command{
    get identifier(){
        return "/taskman";
    }
    get preResponseMessage(){
        return '';
    }
    get name(){
        return 'List what TaskMan can do';
    }
    get usageDescription(){
        return "List all possible commands for TaskMan";
    }
    prepare(args,commandRegister){
        if(args.length>0) throw new CommandNotFoundError();
        let hints = [];
        Object.keys(commandRegister.registered).map(key=>{
            let command = commandRegister.registered[key];
            hints.push(
                '{"type": "section","text":{"type": "mrkdwn","text": " • *'
                +(command.usageDescription===null?command.name:command.usageDescription)
                +'*\n\tUsage: `'+(command.usageHint===null?command.identifier:command.usageHint)+'`'
                +(command.usageExamples.length>0?'\n\tExample: '+command.usageExamples.join(" ")+'"}}':'"}}')
            )})
        pm.environment.set('formatted_response',
            `{
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "Hello, *${user}*! Here is what you can do with TaskMan.\n*Please select an action or command to use:*"
                        }
                    },
                    {"type": "divider"},
                    ${hints.join(',')},
                    {"type": "divider"},
                    {
                        "type": "actions",
                        "elements": [
                            {
                                "type": "button",
                                "text": {
                                    "type": "plain_text",
                                    "text": "List Pending Tasks",
                                    "emoji": true
                                },
                                "value": "list_view_my_pending"
                            },
                            {
                                "type": "button",
                                "text": {
                                    "type": "plain_text",
                                    "text": "View Completed Tasks",
                                    "emoji": true
                                },
                                "value": "list_view_my_completed"
                            },
                            {
                                "type": "button",
                                "text": {
                                    "type": "plain_text",
                                    "text": "View pending created tasks",
                                    "emoji": true
                                },
                                "value": "list_view_my_created"
                            },
                            {
                                "type": "button",
                                "text": {
                                    "type": "plain_text",
                                    "text": "View All Tasks",
                                    "emoji": true
                                },
                                "value": "list_view_my_all"
                            }
                        ]
                    }
                ]
            }`);
    }
    next(){
        postman.setNextRequest('HintResponse');
    }
}
/**
 * @desc Mark a Task Complete Command
 * @class TaskMarkComplete
 * @example /taskmark [...]
 * @throws CommandNotFoundError
 */
class TaskMarkComplete extends Command{
    get identifier(){
        return "/taskmark"
    }
    get preResponseMessage(){
        return "Going to mark it complete";
    }
    get name(){
        return "Task mark complete command"
    }
    prepare(args){
        //[id,notes]
        if(args.length>2 || args.length<1)throw new CommandArgsError();
        const payload = {"fields":{"status":db_const_task_completed,"notes":args[1]}}
        pm.environment.set('url_',at_url+'/tasks/'+args[0]);
        pm.environment.set('_payload',JSON.stringify(payload));
    }
    next(){
        postman.setNextRequest("MarkComplete");
    }
    get usageHint(){
        return "/taskmark taskid";
    }
    get usageDescription(){
        return "Mark a task complete";
    }
}

/**
 * @desc Delete a Task Complete Command
 * @class TaskDelete
 * @example /taskdel [...]
 * @throws CommandNotFoundError
 */
class TaskDelete extends Command{
    get identifier(){
        return "/taskdel"
    }
    get preResponseMessage(){
        return "Going to delete it !!!";
    }
    get name(){
        return "Task delete command"
    }
    prepare(args){
        if(args.length!==1)
            throw new CommandArgsError();
        const url = at_url + '/tasks/' + args[0];
        pm.environment.set('url_',url);
    }
    next(){
        postman.setNextRequest("DeleteTask");
    }
    get usageHint(){
        return "/taskdel taskid";
    }
    get usageDescription(){
        return "Delete a task";
    }
}
class ListViewPendingTasksActionCommand extends ListMyTasksCommand{
    constructor() {
        super();
    }
    get identifier(){
        return 'list_view_my_pending';
    }
    get name(){
        return "List View pending tasks action";
    }
    prepare(args) {
        super.prepare([])
    }
    next() {
        super.next();
    }
}
class ListViewCompletedTaskActionCommand extends ListMyTasksCommand{
    constructor() {
        super();
    }
    get identifier(){
        return 'list_view_my_completed';
    }
    get name(){
        return "List View Completed tasks action";
    }
    prepare(args) {
        super.prepare(["completed"])
    }
    next() {
        super.next();
    }
}
class ListViewCreatedTaskActionCommand extends ListMyTasksCommand{
    constructor() {
        super();
    }
    get identifier(){
        return 'list_view_my_created';
    }
    get name(){
        return "List View tasks action";
    }
    prepare(args) {
        super.prepare(["unescaped",`AND(status="${db_const_task_pending}",creator="${user}")`]);
    }
    next() {
        super.next();
    }
}
class ListViewAllTaskActionCommand extends ListMyTasksCommand{
    constructor() {
        super();
    }
    get identifier(){
        return 'list_view_my_all';
    }
    get name(){
        return "List View tasks action";
    }
    prepare(args) {
        super.prepare(["all"]);
    }
    next() {
        super.next();
    }
}
class MarkCompleteActionCommand extends TaskMarkComplete{
    get name(){
        return "task mark complete action button"
    }
    get identifier() {
        return "overflow-action";
    }
    prepare({selected_option}) {
        const args = selected_option.value.split('?');
        if(args[0]==="delete"){
            this.command = new TaskDelete();
            this.command.prepare([args[1]]);
            this.command.next();
        }else {
            super.prepare([args[1]]);
            super.next();
        }
    }
    next() {
        return null;
    }
}
/*-------------------------------------------------------------------------------*/
/*----------------------------------ERRORS---------------------------------------*/
/**
 * @desc Command is not entered correctly or have invalid params
 * @constructor message
 */
class CommandNotFoundError extends Error{
    constructor(message="Invalid Command") {
        super(message);
        this.message = message;
        console.log(`Command Not found error triggered. ${message}`)
        this.next();
    }
    get response(){
        return this.message;
    }
    next(){
        postman.setNextRequest(null);
    }
}
/**
 * @desc Command is not entered correctly or have invalid params
 * @constructor message
 */
class CommandArgsError extends Error{
    constructor(message="Invalid arguments for this command. You can add this feature to taskman see <https://documenter.getpostman.com/view/13144781/TVYM5FzJ| TaskMan Documentation>") {
        super(message);
        this.message = message;
        console.log(`Command Not found error triggered. ${message}`)
        this.next();
    }
    get response(){
        return this.message;
    }
    next(){
        postman.setNextRequest(null);
    }
}
class NonDynamicRequestError extends Error{
    constructor(message="Not a valid request to be handled") {
        super(message);
        this.message = message;
        console.log(`Invoked via non dynamic request. Catched!!! . ${message}`)
        this.next();
    }
    get response(){
        return this.message;
    }
    next(){
        postman.setNextRequest(null);
    }
}
/*-------------------------------------------------------------------------------*/

/*************************** <Index> ***************************/
//lets tackle this problem with register singleton rather a switch block
const commandRegisterSingleton = new CommandRegister();
const actionRegisterSingleton = new CommandRegister();

//register all the active commands via register method
commandRegisterSingleton
    .register(new ListMyTasksCommand())
    .register(new ListOtherUserTasksCommand())
    .register(new CreateTaskCommand())
    .register(new TaskMarkComplete())
    .register(new TaskDelete())
    .register(new HintCommand())
    .register(new MakeTaskCommand())
actionRegisterSingleton
    .register(new ListViewCompletedTaskActionCommand())
    .register(new ListViewPendingTasksActionCommand())
    .register(new ListViewCreatedTaskActionCommand())
    .register(new ListViewAllTaskActionCommand())
    .register(new MarkCompleteActionCommand())
try{

    let action;
    if(payload!==undefined)
        action= actionRegisterSingleton.pull(payload.actions[0].value,false)
    if(payload!==undefined && action===undefined)
        action= actionRegisterSingleton.pull(payload.actions[0].action_id,false)

    //pull the required command
    const command = commandRegisterSingleton.pull(previousRequest.data.command)

    //check if such action or command is registered in the autoloader
    if(command===undefined && action===undefined)
        throw new CommandNotFoundError();

    //lets create a conductor singleton
    const conductorSingleton = new Conductor();
    const args = (previousRequest.data.text===undefined || previousRequest.data.text==="")?[]:previousRequest.data.text.split(" ");
    console.log('slack request args',JSON.stringify(args))
    commandRegisterSingleton.unparsed_args = previousRequest.data.text;
    if(command === undefined) conductorSingleton.run(action,payload.actions[0],actionRegisterSingleton);
    else conductorSingleton.run(command,args,commandRegisterSingleton)
}catch (e) {
    console.log('error', JSON.stringify(e));
    pm.environment.set('pre_response',e.response||e.message);
    postman.setNextRequest("ErrorResponse");
    if(typeof e.next === "function" && e.next()!==undefined)
        e.next();
}
/*****************************************************************/
[0m
[1m
Request ID [0m[33m13144781-cace6d10-e1be-45ea-ac87-48737ac89aaf[0m
[1m- Name: [0m[36mErrorResponse[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "blocks": [
    {
    "type": "section",
    "text": {
        "type": "mrkdwn",
        "text": "*Runtime Error*"
    }},
    {
            "type": "section",
            "text": {
            "type": "mrkdwn",
            "text": "`{{pre_response}}`"
        }
    }]
}[0m[0m
[1m- Pre-Request Script: [0m[32mpm.environment.set('pre_response',pm.environment.get("pre_response").replace(/[^a-zA-Z ]/g, " "));
console.log('payload for slack',pm.environment.get('pre_response'))[0m
[1m
Request ID [0m[33m13144781-e5c663d8-f3c2-47e3-8d41-e413cb5e07b7[0m
[1m- Name: [0m[36mHintResponse[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{{formatted_response}}[0m[0m
[1m- Pre-Request Script: [0m[32mconsole.log('payload for slack',pm.environment.get('formatted_response'))[0m
[1m
Request ID [0m[33m13515160-00a7730b-56db-469c-ba08-6fabd3a07f5c[0m
[1m- Name: [0m[36mGet all problems[0m
[1m- URL: [0m[33mhttps://codeforces.com/api/problemset.problems?tags={{problemTags}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mtags[0m=[32m{{problemTags}}[0m
[1m- Pre-Request Script: [0m[32mvar previousRequest = JSON.parse(globals.previousRequest),
    webhookRequestData = previousRequest.data;
var query=webhookRequestData.text.split(",");
pm.environment.set("response_url",webhookRequestData.response_url);
pm.environment.set("userId",query[0]);
pm.environment.set("minDifficulty",parseInt(query[1]));
pm.environment.set("maxDifficulty",parseInt(query[2]));
pm.environment.set("problemCount",parseInt(query[3]));
pm.environment.set("problemTags",(query.length>4)?query[4]:"");[0m
[1m
Request ID [0m[33m13515160-e188455f-e0a8-4bd6-b6bf-023f787f9762[0m
[1m- Name: [0m[36mGenerate Problemset[0m
[1m- URL: [0m[33mhttps://codeforces.com/api/user.status?handle={{userId}}&from=1[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mhandle[0m=[32m{{userId}}[0m
[1m- Parameter: [0m[33mfrom[0m=[32m1[0m
[1m
Request ID [0m[33m1372588-46cb6f9a-b167-4895-9367-af5456065bed[0m
[1m- Name: [0m[36mSnapshot test demo[0m
[1m- URL: [0m[33mhttps://postman-echo.com/status/200[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m
Request ID [0m[33m1372588-bf651bb1-bb6a-45ca-bad1-8fe9cf5348e6[0m
[1m- Name: [0m[36mReuse a request[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Pre-Request Script: [0m[32m//Evaluate the script to reference the request, that is stored as an environment variable.
eval(pm.variables.get("executeReferencedRequest"));
executeReferencedRequest({
    collectionUId: "<COLLECTION_UID>",
    requestUId: "<REQUEST_UID>",
    apiKey: pm.variables.get("apiKey")
}, () => {
    
    //Evaluate the prequest script
    eval(pm.variables.get("referencedPreRequestScript"));
    
    //Replace the orginal request with the referenced request before it is sent
    pm.request.update(pm.variables.get("referencedRequest"));
});[0m
[1m
Request ID [0m[33m1372588-c73c9ee1-4c4c-4eaf-bd93-beab4ce4929f[0m
[1m- Name: [0m[36mReuse a pre-request script[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Pre-Request Script: [0m[32m//Evaluate the script to reference the request, that is stored as an environment variable.
eval(pm.variables.get("executeReferencedRequest"));

executeReferencedRequest({
    collectionUId: "<COLLECTION_UID>",
    requestUId: "<REQUEST_UID>",
    apiKey: pm.variables.get("apiKey")
}, () => {
    
    //Evaluate the prequest script
    eval(pm.variables.get("referencedPreRequestScript"));
    
    //Add any other pre-request script here.
});[0m
[1m
Request ID [0m[33m1372588-f08d55b8-44c9-444b-b4c4-d44c1f083ff0[0m
[1m- Name: [0m[36mReuse a test script (Alternate Method)[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1372588-f5a382fb-c5cb-4fbd-af23-4a5b0ce89cb1[0m
[1m- Name: [0m[36mReuse a test script[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Pre-Request Script: [0m[32m//Evaluate the script to reference the request, that is stored as an environment variable.
eval(pm.variables.get("executeReferencedRequest"));

executeReferencedRequest({
    collectionUId: "<COLLECTION_UID>",
    requestUId: "<REQUEST_UID>",
    apiKey: pm.variables.get("apiKey")
});[0m
[1m
Request ID [0m[33m14513974-06bb5d90-1b10-4650-adec-55d5727c029a[0m
[1m- Name: [0m[36mValidate configuration[0m
[1m- URL: [0m[33m{{heroku_url}}/validate[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m{
    "text":{{text}}
}[0m[0m
[1m
Request ID [0m[33m14513974-1d19e2a8-8e61-46fe-82c5-2e6a117bcc09[0m
[1m- Name: [0m[36mInitialize O[0m
[1m- URL: [0m[33m{{heroku_url}}/initO[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m14513974-3216949d-d7d8-44d6-bfe8-92a3086f170d[0m
[1m- Name: [0m[36mDisplay inter[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "text": "Your move : \n{{data}}"
}[0m[0m
[1m
Request ID [0m[33m14513974-33ac3fc0-afba-454f-9985-835a3e1bd687[0m
[1m- Name: [0m[36mJokes[0m
[1m- URL: [0m[33mhttps://official-joke-api.appspot.com/random_joke[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m14513974-42babb05-1efc-415c-8516-779a9fc1c6b2[0m
[1m- Name: [0m[36mInitial Get[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Pre-Request Script: [0m[32mvar previousRequest = JSON.parse(globals.previousRequest),
    webhookRequestData = previousRequest.data;

// webhookRequestData contains the data sent to your webhook.
console.log(JSON.stringify(webhookRequestData));

pm.environment.set("response_url", webhookRequestData.response_url);
pm.environment.set("text", webhookRequestData.text);

if(webhookRequestData.text !=="X" && webhookRequestData.text !=="O")
{
    if(isNaN(parseInt(webhookRequestData.text)))
    {
        console.log("sda")
        pm.environment.set("data","Wrong input - Enter again - X/O/Number")
        postman.setNextRequest("Display board")
    }
    else
    postman.setNextRequest("Validate configuration")
}

[0m
[1m
Request ID [0m[33m14513974-54910839-e6c5-44b7-9a4c-5b05a353f6e6[0m
[1m- Name: [0m[36mDecide for opponent[0m
[1m- URL: [0m[33m{{heroku_url}}/decide[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m
Request ID [0m[33m14513974-57c6bb1e-b44e-4d54-a51d-c728769e94a0[0m
[1m- Name: [0m[36mSet Index[0m
[1m- URL: [0m[33m{{heroku_url}}/setIndex[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m{
    "text":{{text}}
}[0m[0m
[1m
Request ID [0m[33m14513974-5a9ad708-0266-4c80-9640-6402c7ef3f99[0m
[1m- Name: [0m[36mMeme or Quote[0m
[1m- URL: [0m[33mhttps://type.fit/api/quotes[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m
Request ID [0m[33m14513974-9cbf6c24-9ff1-4e65-96bf-38fbc85494ed[0m
[1m- Name: [0m[36mInvalid[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "text":"Invalid configuration, Enter Again!"
}[0m[0m
[1m
Request ID [0m[33m14513974-c62563de-4ea2-4470-9f46-10585fcbc254[0m
[1m- Name: [0m[36mInitialize X[0m
[1m- URL: [0m[33m{{heroku_url}}/initX[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m
Request ID [0m[33m14513974-e23ae50c-1127-4fa8-b181-00fbb314d7a6[0m
[1m- Name: [0m[36mDisplay quote[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
	"blocks": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": "{{data}}",
				"emoji": true
			}
		}
	]
}[0m[0m
[1m
Request ID [0m[33m14513974-e92749fb-54e8-4e29-9d39-dc0344d30368[0m
[1m- Name: [0m[36mDisplay board[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "text" : "{{data}}"
}[0m[0m
[1m
Request ID [0m[33m14760314-12eae685-3ae2-442b-8a2e-bbad2ed1954a[0m
[1m- Name: [0m[36mSend search result[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
	"blocks": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": "Please specify which of these shows are you interested in",
				"emoji": true
			}
		},
		{
			"type": "actions",
			"elements": {{actions}}
		}
	]
}[0m[0m
[1m
Request ID [0m[33m14760314-1e3b1617-a05a-4c46-8508-ac91e9123a1c[0m
[1m- Name: [0m[36mSend no search result[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
	"blocks": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": "Show {{search_show_query}} not found",
				"emoji": true
			}
		}
	]
}[0m[0m
[1m
Request ID [0m[33m14760314-2502bca8-1d62-4a08-838a-1bf3d85bdbd6[0m
[1m- Name: [0m[36mSend no next episode[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
	"blocks": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": "Future episodes haven't been announced for {{show_title}}",
				"emoji": true
			}
		}
	]
}[0m[0m
[1m
Request ID [0m[33m14760314-8dc70856-8cf6-4240-8c87-21125165ecf4[0m
[1m- Name: [0m[36mGet show next episode[0m
[1m- URL: [0m[33m{{trakt_base_url}}/shows/{{show_slug}}/next_episode?extended=full[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mextended[0m=[32mfull[0m
[1m
Request ID [0m[33m14760314-a3e1d2c8-3d39-4bee-911e-8346bbcf1f5b[0m
[1m- Name: [0m[36mBegin[0m
[1m- URL: [0m[33mhttp://example.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Pre-Request Script: [0m[32mif (globals.previousRequest) {
    const previousRequest = JSON.parse(globals.previousRequest);
    const webhookRequestData = previousRequest.data;
    if (webhookRequestData.payload) {
        const payload = JSON.parse(webhookRequestData.payload);
        pm.variables.set("response_url", payload.response_url);
        pm.variables.set("show_slug", payload.actions[0].value);
        pm.variables.set("show_title", payload.actions[0].text.text);
    }
    else {
        pm.variables.set("response_url", webhookRequestData.response_url);
        pm.variables.set("search_show_query", webhookRequestData.text);
    }
} else {
    console.log('You should run this collection as a webhook');
}[0m
[1m
Request ID [0m[33m14760314-ba024069-b3e9-48ab-a541-4e3719d8cbce[0m
[1m- Name: [0m[36mSend next episode[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
	"blocks": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": "{{show_title}}",
				"emoji": true
			}
		},
		{
			"type": "section",
			"fields": [
				{
					"type": "mrkdwn",
					"text": "*Season:*\n{{show_season}}"
				},
				{
					"type": "mrkdwn",
					"text": "*Episode:*\n{{show_number}}"
				}
			]
		},
		{
			"type": "section",
			"fields": [
				{
					"type": "mrkdwn",
					"text": "*When:*\n{{show_when}}"
				}
			]
		},
		
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "*Overview:*\n{{show_overview}}"
			}
		}
	]
}[0m[0m
[1m
Request ID [0m[33m14760314-dfd141df-cfd4-4a35-9de3-7a0a89b3ea25[0m
[1m- Name: [0m[36mSearch show[0m
[1m- URL: [0m[33m{{trakt_base_url}}/search/show?fields=title&query={{search_show_query}}&extended=full[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mfields[0m=[32mtitle[0m
[1m- Parameter: [0m[33mquery[0m=[32m{{search_show_query}}[0m
[1m- Parameter: [0m[33mextended[0m=[32mfull[0m
[1m
Request ID [0m[33m1559645-0a163b22-e933-4731-af92-976247575c5e[0m
[1m- Name: [0m[36mGet all cats[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Pre-Request Script: [0m[32mlet arrayOfCodes = JSON.parse(pm.environment.get("allCodes"))

let template = `
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    
    <style type="text/css">
        body { 
            padding: 24px;
        }
    </style>

    <div class="container-fluid">
        <div class="row">
            <div class="col mb-4">
                <h1>HTTP cats</h1>
            </div>
        </div>
        <div class="row">
            {{#each response}}
            <div class="col-sm-6 col-lg-4 col-xl-3 mb-5">
                <div class="card">
                    <div class="card-body">
                        <img class="img-thumbnail" src='https://http.cat{{code}}' />
                    </div>
                </div>
            </div>
            {{/each}}
        </div>
    </div>
`

pm.visualizer.set(template, {
    "response": JSON.parse(pm.environment.get("allCodes"))
})[0m
[1m
Request ID [0m[33m1559645-4ac78e35-75ac-482c-8aee-0ec553791851[0m
[1m- Name: [0m[36mGet one cat[0m
[1m- URL: [0m[33mhttps://http.cat{{statusCode}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Pre-Request Script: [0m[32mlet arrayOfCodes = JSON.parse(pm.environment.get("allCodes"))

// remove first item to update the URL path
let oneCode = arrayOfCodes.shift()
console.log('Setting this status code: ', oneCode.code)
pm.variables.set("statusCode", oneCode.code)

// re-save the shorter array
pm.environment.set("allCodes", JSON.stringify(arrayOfCodes))[0m
[1m
Request ID [0m[33m1559645-52957dbd-d532-430e-ac9c-534194f07067[0m
[1m- Name: [0m[36mHTTP cats website[0m
[1m- URL: [0m[33mhttps://http.cat/[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1559645-c92a647e-393e-4cc2-b0ea-91052ff75b6e[0m
[1m- Name: [0m[36mListing[0m
[1m- URL: [0m[33mhttps://women-in-tech.apievangelist.com/apis/people/[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1559645-354de3c0-b5c5-4700-b5d1-2f866e7949c2[0m
[1m- Name: [0m[36mAdding a request header[0m
[1m- URL: [0m[33m{{base_url}}/collections[33m[0m
[1m- Authorization: [0m[33mnoauth[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mx-api-key[0m: [32m{{postman_api_key}}[0m[0m
[1m
Request ID [0m[33m1559645-832f91b7-fc82-494e-89b2-a0d59715d6e2[0m
[1m- Name: [0m[36mAPI key as query parameter[0m
[1m- URL: [0m[33mhttps://api.nasa.gov/planetary/apod?api_key={{api_key}}[33m[0m
[1m- Authorization: [0m[33mnoauth[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mapi_key[0m=[32m{{api_key}}[0m
[1m- Pre-Request Script: [0m[32m// get the environment variable called `api_key`
let key = pm.environment.get("api_key")

// do something with that key, such as logging it to the Postman console
console.log(`Here is my key: ${key}`)
[0m
[1m
Request ID [0m[33m1559645-b966328d-124f-4a05-9da1-6e8326f31aac[0m
[1m- Name: [0m[36mUsing an Authorization helper[0m
[1m- URL: [0m[33mhttps://api.nasa.gov/planetary/apod[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1559645-12a8ff05-7f5c-41ee-9ec8-70a4b75f370a[0m
[1m- Name: [0m[36mAdd Entity[0m
[1m- URL: [0m[33mhttps://qhiug7xk62.execute-api.eu-central-1.amazonaws.com/default/Bucket[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mx-api-key[0m: [32mB8q6CdR6707ZV9YxGnivN4kHl9zbvP0h6jwxOsBS[0m[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "type": "add_entity",
    "json": "{'productName': 'Prod1', 'count': 1, 'id': 'id1', 'key': 'key1', 'active': true}"
}[0m[0m
[1m
Request ID [0m[33m1559645-5d75c6c4-ff40-48df-bc64-0bc6638f7841[0m
[1m- Name: [0m[36mLogin[0m
[1m- URL: [0m[33mhttps://qhiug7xk62.execute-api.eu-central-1.amazonaws.com/default/Bucket[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mx-api-key[0m: [32mB8q6CdR6707ZV9YxGnivN4kHl9zbvP0h6jwxOsBS[0m[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "type": "login",
    "json": "{'user': 'company', 'password': 'company'}"
}[0m[0m
[1m
Request ID [0m[33m1559645-6443db44-3729-48e7-8a38-1ecb6f211e4c[0m
[1m- Name: [0m[36mGet bucket[0m
[1m- URL: [0m[33mhttps://qhiug7xk62.execute-api.eu-central-1.amazonaws.com/default/Bucket[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mx-api-key[0m: [32mB8q6CdR6707ZV9YxGnivN4kHl9zbvP0h6jwxOsBS[0m[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "type": "get_bucket",
    "json": "{'key': '444511a6-07ed-4245-bc8c-92972f51b2de'}"
}[0m[0m
[1m
Request ID [0m[33m1559645-896326d7-9d4f-482c-94b8-e11bba4c2cdb[0m
[1m- Name: [0m[36mRemove Entity[0m
[1m- URL: [0m[33mhttps://qhiug7xk62.execute-api.eu-central-1.amazonaws.com/default/Bucket[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mx-api-key[0m: [32mB8q6CdR6707ZV9YxGnivN4kHl9zbvP0h6jwxOsBS[0m[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "type": "remove_entity",
    "json": "{'id': '335b0f82-5444-46e8-a9a1-4e6f91853323'}"
}[0m[0m
[1m
Request ID [0m[33m1559645-d3e2b84e-5ff9-4879-9958-66241d84704c[0m
[1m- Name: [0m[36mCreate User[0m
[1m- URL: [0m[33mhttps://qhiug7xk62.execute-api.eu-central-1.amazonaws.com/default/Bucket[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mx-api-key[0m: [32mB8q6CdR6707ZV9YxGnivN4kHl9zbvP0h6jwxOsBS[0m[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "type": "create_user",
    "json": "{'user': 'user2', 'password': 'password2', 'key': 'key2'}"
}[0m[0m
[1m
Request ID [0m[33m1559645-95700360-8738-4eba-b344-e79dee5a9860[0m
[1m- Name: [0m[36mFahrenheit to Celsius Conversion[0m
[1m- URL: [0m[33mhttps://www.w3schools.com/xml/tempconvert.asmx[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mtext/xml[0m[0m
[1m- Request Body: [0m[32m<soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">
  <soap12:Body>
    <FahrenheitToCelsius xmlns="https://www.w3schools.com/xml/">
      <Fahrenheit>75</Fahrenheit>
    </FahrenheitToCelsius>
  </soap12:Body>
</soap12:Envelope>[0m[0m
[1m
Request ID [0m[33m1559645-a7022d88-27da-42ed-a54a-2e93dd946f15[0m
[1m- Name: [0m[36mExample request[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get?city={{City}}&ramen={{Ramen}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Parameter: [0m[33mcity[0m=[32m{{City}}[0m
[1m- Parameter: [0m[33mramen[0m=[32m{{Ramen}}[0m
[1m
Request ID [0m[33m1559645-01e3620e-c88f-4c64-bbdf-e0ae0d04ac68[0m
[1m- Name: [0m[36mGet Imgur auth token[0m
[1m- URL: [0m[33mhttps://api.imgur.com/oauth2/token[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[33mrefresh_token[0m=[32m{{imgurRefreshToken}}[0m[0m
[1m- Request Body: [0m[33mclient_id[0m=[32m{{imgurClientId}}[0m[0m
[1m- Request Body: [0m[33mclient_secret[0m=[32m{{imgurClientSecret}}[0m[0m
[1m- Request Body: [0m[33mgrant_type[0m=[32mrefresh_token[0m[0m
[1m
Request ID [0m[33m1559645-06321db2-67f9-4797-8ff5-fb7ec3884fdc[0m
[1m- Name: [0m[36mGet the astronomy pic of the day[0m
[1m- URL: [0m[33mhttps://api.nasa.gov/planetary/apod?api_key=DEMO_KEY&hd=True[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mapi_key[0m=[32mDEMO_KEY[0m
[1m- Parameter: [0m[33mhd[0m=[32mTrue[0m
[1m
Request ID [0m[33m1559645-e3522a6b-f2a0-45f4-b698-73933c45c0a0[0m
[1m- Name: [0m[36mUpload image to Imgur[0m
[1m- URL: [0m[33mhttps://api.imgur.com/3/upload[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer {{imgurAccessToken}}[0m[0m
[1m- Request Body: [0m[33mimage[0m=[32m{{spaceUrl}}[0m[0m
[1m- Request Body: [0m[33mtitle[0m=[32m{{spaceTitle}}[0m[0m
[1m- Request Body: [0m[33mdescription[0m=[32m{{spaceExplanation}}[0m[0m
[1m
Request ID [0m[33m1559645-b1b45d19-e877-474c-b013-43e5dabdbf5f[0m
[1m- Name: [0m[36mAsynch request[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get?test=123[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1559645-3054beda-9334-4772-b33f-941450a78e1f[0m
[1m- Name: [0m[36mget all lights[0m
[1m- URL: [0m[33mhttp://{{bridge_ip}}/api/{{username}}/lights[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1559645-43a44e3d-8e42-456b-8d01-76eb91dc6f32[0m
[1m- Name: [0m[36mnew developer[0m
[1m- URL: [0m[33mhttp://{{bridge_ip}}/api/newdeveloper[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1559645-bc8cd93e-c050-44e5-8248-1b633bc70f8d[0m
[1m- Name: [0m[36mnew user[0m
[1m- URL: [0m[33mhttp://{{bridge_ip}}/api[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "devicetype": "my_hue_app#iphone apievangelist"
}[0m[0m
[1m
Request ID [0m[33m1559645-ce0938fe-4457-429a-ba93-8b9e5bedd339[0m
[1m- Name: [0m[36mget light by id[0m
[1m- URL: [0m[33mhttp://{{bridge_ip}}/api/{{username}}/lights/4[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1559645-e010c861-207f-44b9-aff8-b4790e6a854f[0m
[1m- Name: [0m[36mcheck bridge[0m
[1m- URL: [0m[33mhttp://{{bridge_ip}}/debug/clip.html[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1559645-e0d4736a-38b6-475a-b2dd-529c45fd39cb[0m
[1m- Name: [0m[36mupdate light[0m
[1m- URL: [0m[33mhttp://{{bridge_ip}}/api/{{username}}/lights/4/state[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Request Body: [0m[32m{
    "on": false
}[0m[0m
[1m
Request ID [0m[33m1559645-06219a6a-d649-4ab1-8842-1f3a35c0a780[0m
[1m- Name: [0m[36mmessage types[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Pre-Request Script: [0m[32mconsole.warn("This is a warning!");
console.log("I'm a boring old log.");
console.info("I am helpful information");
console.error("I am an annoying error");
[0m
[1m
Request ID [0m[33m1559645-57160dc2-67c1-4f52-9e53-b80662fd147e[0m
[1m- Name: [0m[36masync request[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get?foo1=bar1&foo2=bar2[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mfoo1[0m=[32mbar1[0m
[1m- Parameter: [0m[33mfoo2[0m=[32mbar2[0m
[1m
Request ID [0m[33m1559645-1e8aa3e9-ab6f-47b2-92cb-b9724b7f992b[0m
[1m- Name: [0m[36mredirect test[0m
[1m- URL: [0m[33m{{url}}/{{path}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1559645-659ce806-6110-4d3d-b1ef-9d8e87a8152d[0m
[1m- Name: [0m[36murlize[0m
[1m- URL: [0m[33m{{url}}/encode[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m
Request ID [0m[33m1559645-799cb0de-1c69-468a-85f0-1a9ee6f5bdcd[0m
[1m- Name: [0m[36mredirect allow[0m
[1m- URL: [0m[33m{{url}}/{{path}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1559645-fd0756c0-167f-48c6-8d33-894d21f123c7[0m
[1m- Name: [0m[36mHoliday web service[0m
[1m- URL: [0m[33mhttp://www.holidaywebservice.com/HolidayService_v2/HolidayService2.asmx[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mtext/xml[0m[0m
[1m- Request Body: [0m[32m<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:hs="http://www.holidaywebservice.com/HolidayService_v2/">
 <soapenv:Body>
     <hs:GetHolidaysForMonth>
        <hs:year>2018</hs:year>
        <hs:countryCode>UnitedStates</hs:countryCode>
        <hs:month>11</hs:month>
     </hs:GetHolidaysForMonth>
 </soapenv:Body>
</soapenv:Envelope>[0m[0m
[1m
Request ID [0m[33m1559645-3afaf594-e8c5-4e94-b9f8-1f1fc1680fc5[0m
[1m- Name: [0m[36mPost to slack (unavailable)[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "response_type": "in_channel",
    "text": "Oops, this book is not available :(",
    "attachments": [
        {
            "text":"Time to get a new book? ;)"
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m1559645-3c4206da-6761-46c2-be0a-4eb535129e9e[0m
[1m- Name: [0m[36mPost to slack (available)[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "text": "This book is available!",
    "attachments": [
        {
            "title": "{{book_name}}",
        
            "author_name": "{{book_author}}",
  
            "image_url": "{{book_image}}"
        },
        {
            "title": "Here's what goodreads has to say about this book -",
            "text": "{{book_goodreads_url}}"
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m1559645-88e67744-4266-4f9c-a0e5-d4e06fa9ef44[0m
[1m- Name: [0m[36mPost to slack (currently being read)[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "text": "*{{book_name}} is currently being read by {{book_readby}}. Check back later maybe?*"
}[0m[0m
[1m
Request ID [0m[33m1559645-abd2b43c-b6b1-49d2-8300-841bf161dae9[0m
[1m- Name: [0m[36mGet list of all books[0m
[1m- URL: [0m[33m{{airtable_url}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer {{airtable_api_key}}[0m[0m
[1m- Pre-Request Script: [0m[32mvar previousRequest = JSON.parse(globals.previousRequest),
    webhookRequestData = previousRequest.data;

console.log(JSON.stringify(webhookRequestData));

pm.environment.set("user_query", webhookRequestData.text );
pm.environment.set("response_url", webhookRequestData.response_url );

console.log(pm.environment.get("user_query"));
console.log(pm.environment.get("response_url"));[0m
[1m
Request ID [0m[33m1559645-e5aa5c26-4e6f-44fe-b0de-7c07401bafa4[0m
[1m- Name: [0m[36mRetrieve a record[0m
[1m- URL: [0m[33m{{airtable_url}}/{{record_id}}[33m[0m
[1m- Authorization: [0m[33mnoauth[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer {{airtable_api_key}}[0m[0m
[1m
Request ID [0m[33m1559645-045f2a80-d99f-4ff9-a3ed-52383dca2d31[0m
[1m- Name: [0m[36mUsing JSON request body[0m
[1m- URL: [0m[33mhttps://swapi.apis.guru[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "query" : "query { allFilms { films { id title episodeID } } }"
}[0m[0m
[1m
Request ID [0m[33m1559645-e2ef8e31-1420-49d8-8edf-e17af1e38d9f[0m
[1m- Name: [0m[36mBuilt-in support for GraphQL[0m
[1m- URL: [0m[33mhttps://spotify-graphql-server.herokuapp.com/graphql[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m
Request ID [0m[33m1559645-ea1e9560-3d04-490f-9fc5-18a8effffe9a[0m
[1m- Name: [0m[36mImport as cURL[0m
[1m- URL: [0m[33mhttps://api.github.com/graphql[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer {{myGitHubAccessToken}}[0m[0m
[1m- Request Body: [0m[32m{"query": "query {repository(owner: \"loopDelicious\", name: \"cat-kube-stateless\") {description}}"}[0m[0m
[1m
Request ID [0m[33m1559645-f525b3f6-4c74-4097-bff1-a9ed94b91f1e[0m
[1m- Name: [0m[36mUsing GraphQL query[0m
[1m- URL: [0m[33mhttps://swapi.apis.guru[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/graphql[0m[0m
[1m
Request ID [0m[33m1559645-3477efc5-66e1-4cb0-92b7-0528dd403c44[0m
[1m- Name: [0m[36mUse a code snippet in app[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get?foo1=bar1&foo2=bar2[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mfoo1[0m=[32mbar1[0m
[1m- Parameter: [0m[33mfoo2[0m=[32mbar2[0m
[1m
Request ID [0m[33m1559645-8476ba09-4cc4-411f-9f3c-0c40c27ed31b[0m
[1m- Name: [0m[36mImport as cURL[0m
[1m- URL: [0m[33mhttps://oauth.reddit.com/api/vote?redditWebClient=web2x&app=web2x-client-production&raw_json=1[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mPostman-Token[0m: [32m00e67caa-e330-489e-b422-07b864fe3ad5[0m[0m
[1m- Header: [0m[33maccept[0m: [32m*/*[0m[0m
[1m- Header: [0m[33maccept-encoding[0m: [32mgzip, deflate, br[0m[0m
[1m- Header: [0m[33maccept-language[0m: [32men-US,en;q=0.9[0m[0m
[1m- Header: [0m[33mauthority[0m: [32moauth.reddit.com[0m[0m
[1m- Header: [0m[33mauthorization[0m: [32m{{vault:bearer-token}}[0m[0m
[1m- Header: [0m[33mcache-control[0m: [32mno-cache[0m[0m
[1m- Header: [0m[33mcontent-type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m- Header: [0m[33morigin[0m: [32mhttps://www.reddit.com[0m[0m
[1m- Header: [0m[33mreferer[0m: [32mhttps://www.reddit.com/[0m[0m
[1m- Header: [0m[33muser-agent[0m: [32mMozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36[0m[0m
[1m- Header: [0m[33mx-reddit-loid[0m: [32m00000000002s6v7f1i.2.1544780469944.Z0FBQUFBQmNFM3Exa3dYbXlCV3lDOFozZTJnTmJZdGtFUlMySkJqZzVEUWJKRDRBSjZOZllRNmF3MzJnSmY2c2dtTGMxQXFIN19vYW95Vi1qQzJsaFU1Z3FjeHFKc2Rib1c4SFhnMnVMcWYtbnN0ZUVEdUdJdEpQSDJqSGZ2VVBRVElxcjNBUUZWd0U[0m[0m
[1m- Header: [0m[33mx-reddit-session[0m: [32mpJJeNwZJCfWDXWIwJY.0.1545093753930.Z0FBQUFBQmNHRUo1YjhpbUl4VFlucmY0RGpYNDA0QWRrZmlaNjBPR3pRRlNqOXdzVms0NHM4cFF0YzZIZVBXMWd5M1Rrc3QwSTNTUFpHNTMzSW9RLUV3alE1eU92amtmOE9fMDRvNFZ4TXNIeXlBOW9uRzB5U25RS2FlbHJsQnlZQWl3ejZXQjRyRXI[0m[0m
[1m- Parameter: [0m[33mredditWebClient[0m=[32mweb2x[0m
[1m- Parameter: [0m[33mapp[0m=[32mweb2x-client-production[0m
[1m- Parameter: [0m[33mraw_json[0m=[32m1[0m
[1m
Request ID [0m[33m1559645-d8f839b4-7750-463c-881e-4771c18b1a3f[0m
[1m- Name: [0m[36mUse snippet from web documentation[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get?foo1=bar1&foo2=bar2[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mfoo1[0m=[32mbar1[0m
[1m- Parameter: [0m[33mfoo2[0m=[32mbar2[0m
[1m
Request ID [0m[33m1559645-26912a1b-d735-426b-b25d-ad875cc8f09f[0m
[1m- Name: [0m[36mPagerDuty - PKCE flow (via helper)[0m
[1m- URL: [0m[33mhttps://api.pagerduty.com/incidents[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{pagerduty_pkce_token}}[0m
  [1m- [0m[33mtokenType[0m: [32mbearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/vnd.pagerduty+json;version=2[0m[0m
[1m
Request ID [0m[33m1559645-2d039c80-0401-48bd-8e3f-3f1ddf8e2795[0m
[1m- Name: [0m[36mSpotify - Client Credentials flow (via helper)[0m
[1m- URL: [0m[33mhttps://accounts.spotify.com/api/token[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33mpassword[0m=[32m{{spotify_client_secret}}[0m
  [1m- [0m[33musername[0m=[32m{{spotify_client_id}}[0m
[1m- Request Method: [0m[33mPOST[0m
[1m
Request ID [0m[33m1559645-37132a43-9840-4ea1-ba49-0194803b53eb[0m
[1m- Name: [0m[36mSpotify - Client Credentials flow (via manual header)[0m
[1m- URL: [0m[33mhttps://accounts.spotify.com/api/token[33m[0m
[1m- Authorization: [0m[33mnoauth[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBasic {{encodedIdAndKey}}[0m[0m
[1m- Pre-Request Script: [0m[32m// Base 64 encode client ID and client secret key to include in Auth Header
let client_id = pm.environment.get("spotify_client_id")
let client_secret = pm.environment.get("spotify_client_secret")
let stringToEncode = `${client_id}:${client_secret}`

let rawStr = CryptoJS.enc.Utf8.parse(stringToEncode)
let base64 = CryptoJS.enc.Base64.stringify(rawStr)
// console.log(`Encrypted value: ${base64}`)

// set local variable to be used in Auth Header
pm.variables.set("encodedIdAndKey", base64)[0m
[1m
Request ID [0m[33m1559645-40290b02-eee3-4940-b621-abbddf7026e6[0m
[1m- Name: [0m[36mSpotify - Implicit flow (via helper)[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/search?q=classical&type=track&market=US[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{spotify_implicit_token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mq[0m=[32mclassical[0m
[1m- Parameter: [0m[33mtype[0m=[32mtrack[0m
[1m- Parameter: [0m[33mmarket[0m=[32mUS[0m
[1m
Request ID [0m[33m1559645-78b78b39-83fd-4360-9985-b67d9072b34e[0m
[1m- Name: [0m[36mPagerDuty - Authentication (via manual header)[0m
[1m- URL: [0m[33mhttps://api.pagerduty.com/incidents[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/vnd.pagerduty+json;version=2[0m[0m
[1m- Header: [0m[33mAuthorization[0m: [32mToken token={{pagerduty_api_key}}[0m[0m
[1m
Request ID [0m[33m1559645-93938553-6bcd-41d5-a955-4de757fecf54[0m
[1m- Name: [0m[36mSpotify - Authorization Code flow (via helper)[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/search?q=classical&type=track&market=US[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{spotify_access_token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mq[0m=[32mclassical[0m
[1m- Parameter: [0m[33mtype[0m=[32mtrack[0m
[1m- Parameter: [0m[33mmarket[0m=[32mUS[0m
[1m
Request ID [0m[33m1559645-2dc4567e-dde2-4451-9434-604049087897[0m
[1m- Name: [0m[36mSpaceX past launches[0m
[1m- URL: [0m[33mhttps://api.spacexdata.com/v2/launches[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Pre-Request Script: [0m[32mpostman.clearEnvironmentVariable("launchData");
[0m
[1m
Request ID [0m[33m1559645-7640de7e-d2af-43a2-bd64-2fa7dfb311e7[0m
[1m- Name: [0m[36mSend data to local server[0m
[1m- URL: [0m[33mhttp://localhost:3000/launches[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m
Request ID [0m[33m1559645-72764c0b-5eaf-472e-b494-8e207c143799[0m
[1m- Name: [0m[36mPost confirmation message to Slack[0m
[1m- URL: [0m[33m{{slackWebhook}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
  "username": "Postman-watered-my-rooftop-plants",
  "icon_emoji": ":corn:",
  
  "attachments": [
        {
            "text": "Plants have been watered for {{waterDuration}} seconds",
            "color": "#389f59"
        }
    ]
}
[0m[0m
[1m
Request ID [0m[33m1559645-b503ae3e-300f-4951-8397-10f7a81e03b4[0m
[1m- Name: [0m[36mShould I water the plants?[0m
[1m- URL: [0m[33m{{wateringEndpoint}}/hygrometer[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Pre-Request Script: [0m[32m// Before running the collection, check for required environment variables
// Throw an error if any are missing
const postmanEnvironment = pm.environment.toObject();

// Make sure required environment keys are present
pm.expect(postmanEnvironment, 'no watering endpoint provided').to.include.any.keys("wateringEndpoint");

// Make sure environment value for watering endpoint looks like a URL
const urlRegex = /^https?:\/\//;
pm.expect(postmanEnvironment.wateringEndpoint, 'wateringEndpoint does not match URL pattern').to.match(urlRegex);

pm.environment.set("waterDuration", 0);
[0m
[1m
Request ID [0m[33m1559645-f909516b-9360-4a7b-9cfd-3e79aac20e77[0m
[1m- Name: [0m[36mWater the plants[0m
[1m- URL: [0m[33m{{wateringEndpoint}}/water[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[33mduration[0m=[32m{{waterDuration}}[0m[0m
[1m- Request Body: [0m[33mpassword[0m=[32m[0m[0m
[1m- Pre-Request Script: [0m[32m// if no slackWebhook entered as an environment variable, terminate the collection run after this request executes
try {
    const postmanEnvironment = pm.environment.toObject();
    pm.expect(postmanEnvironment, 'no slack endpoint provided').to.include.any.keys("slackWebhook");
} 
catch (error) {
    console.error("Your environment does not have the `slackWebhook` variable. To add your own slack webhook, edit the environment to include {slackwebHook: <your-webhook-here>}");
    postman.setNextRequest(null);
}[0m
[1m
Request ID [0m[33m16038220-0f6804a4-019f-422e-92d8-ea9c1119d86e[0m
[1m- Name: [0m[36mJokes[0m
[1m- URL: [0m[33mhttps://official-joke-api.appspot.com/random_joke[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16038220-113e7158-2781-4cea-bc04-423c5fab023d[0m
[1m- Name: [0m[36mDisplay board[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "text" : "{{data}}"
}[0m[0m
[1m
Request ID [0m[33m16038220-20bd6519-8e78-49a0-99c3-1582208548da[0m
[1m- Name: [0m[36mMeme or Quote[0m
[1m- URL: [0m[33mhttps://type.fit/api/quotes[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m
Request ID [0m[33m16038220-3fe30bfd-aa00-401f-81ad-169307e289fd[0m
[1m- Name: [0m[36mInitialize O[0m
[1m- URL: [0m[33m{{heroku_url}}/initO[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16038220-5fe8b1c2-47e0-46bc-80c0-15e8ea2670ba[0m
[1m- Name: [0m[36mInvalid[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "text":"Invalid configuration, Enter Again!"
}[0m[0m
[1m
Request ID [0m[33m16038220-6e3da152-929d-4183-b1d7-4e7eac297a40[0m
[1m- Name: [0m[36mInitial Get[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Pre-Request Script: [0m[32mvar previousRequest = JSON.parse(globals.previousRequest),
    webhookRequestData = previousRequest.data;

// webhookRequestData contains the data sent to your webhook.
console.log(JSON.stringify(webhookRequestData));

pm.environment.set("response_url", webhookRequestData.response_url);
pm.environment.set("text", webhookRequestData.text);

if(webhookRequestData.text !=="X" && webhookRequestData.text !=="O")
{
    if(isNaN(parseInt(webhookRequestData.text)))
    {
        console.log("sda")
        pm.environment.set("data","Wrong input - Enter again - X/O/Number")
        postman.setNextRequest("Display board")
    }
    else
    postman.setNextRequest("Validate configuration")
}

[0m
[1m
Request ID [0m[33m16038220-76d8f7a3-733c-45d6-9064-36a771a5689f[0m
[1m- Name: [0m[36mSet Index[0m
[1m- URL: [0m[33m{{heroku_url}}/setIndex[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m{
    "text":{{text}}
}[0m[0m
[1m
Request ID [0m[33m16038220-92fcf2cc-3613-4988-bb8a-8862ea1b3164[0m
[1m- Name: [0m[36mDecide for opponent[0m
[1m- URL: [0m[33m{{heroku_url}}/decide[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m
Request ID [0m[33m16038220-9beee8cf-bccc-435f-a58d-4927b559afe0[0m
[1m- Name: [0m[36mInitialize X[0m
[1m- URL: [0m[33m{{heroku_url}}/initX[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m
Request ID [0m[33m16038220-e111ac68-46a8-43d4-a318-8e57615a40c4[0m
[1m- Name: [0m[36mDisplay quote[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
	"blocks": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": "{{data}}",
				"emoji": true
			}
		}
	]
}[0m[0m
[1m
Request ID [0m[33m16038220-e3dfe681-5a75-4b09-bb92-8d3a6f937136[0m
[1m- Name: [0m[36mDisplay inter[0m
[1m- URL: [0m[33m{{response_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "text": "Your move : \n{{data}}"
}[0m[0m
[1m
Request ID [0m[33m16038220-f22b1c24-558b-4ead-8c1b-64efa2f5b095[0m
[1m- Name: [0m[36mValidate configuration[0m
[1m- URL: [0m[33m{{heroku_url}}/validate[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m{
    "text":{{text}}
}[0m[0m
[1m
Request ID [0m[33m16712233-b2056bc2-4083-45af-9333-62f9f9903500[0m
[1m- Name: [0m[36mPost Air Quality Status to Twitter[0m
[1m- URL: [0m[33mhttps://api.twitter.com/1.1/statuses/update.json?status={{twitterStatus}}[33m[0m
[1m- Authorization: [0m[33moauth1[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Parameter: [0m[33mstatus[0m=[32m{{twitterStatus}}[0m
[1m- Pre-Request Script: [0m[32m
[0m
[1m
Request ID [0m[33m16712233-c8919c13-e89c-4319-a5c6-52d7f0ce1ba8[0m
[1m- Name: [0m[36mGet Air Quality Status[0m
[1m- URL: [0m[33mhttp://dataservice.accuweather.com/forecasts/v1/daily/1day/{{locationKey}}.json?apikey={{accuweatherApiKey}}&details=true[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mapikey[0m=[32m{{accuweatherApiKey}}[0m
[1m- Parameter: [0m[33mdetails[0m=[32mtrue[0m
[1m- Pre-Request Script: [0m[32m// Validate environment variables
const pmEnvironment = pm.environment.toObject();

// Check for required environment variables
pm.expect(pmEnvironment).to.have.all.keys(
    'location',
    'accuweatherApiKey',
    'twitterConsumerKey',
    'twitterConsumerSecret',
    'twitterAccessToken',
    'twitterAccessTokenSecret'
);

// Get an accuweather location key
const apiKey = pm.environment.get('accuweatherApiKey');
const locationQuery = pm.environment.get('location');
const getLocationData = `http://dataservice.accuweather.com/locations/v1/search?apikey=${apiKey}&q=${locationQuery}`;

// Get and save location data from a location query string
function saveLocationData (e, response) {
    // Throw if we get an error
    if (e) { throw e; }
    
    // Handle error response
    if (response.code >= 400) {
        console.log(`PROBLEM :: ${response.code} error while getting location.`);
        console.log(response.text());
        
        // Throw
        throw new Error(`Couldn\'t get location. Check your environment's location value.`);
    }
    
    // Log location info and store the location information
    const responseData = response.json();
    
    if (responseData.length > 1) {
        console.log('WARNING :: Query returned multiple results. Returning the first result.');
    }
    
    const [{ Key: locationKey, EnglishName: locationName }] = responseData;
    
    pm.globals.set('locationKey', locationKey);
    pm.globals.set('locationName', locationName);
    
    console.log(`Getting air quality data for ${locationName} (AccuWeather key ${locationKey})`);
}

// Send the request to get location data
pm.sendRequest(getLocationData, saveLocationData);[0m
[1m
Request ID [0m[33m1715192-1b635356-2218-4792-8acc-0ec3e067dc5c[0m
[1m- Name: [0m[36mCountry specific data for a particular date[0m
[1m- URL: [0m[33mhttps://covidapi.info/api/v1/country/IND/2020-03-15[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m
Request ID [0m[33m1715192-2ab27a05-69de-4baa-aead-f31a351fa7da[0m
[1m- Name: [0m[36mGlobal Timeseries data in date range[0m
[1m- URL: [0m[33mhttps://covidapi.info/api/v1/global/timeseries/2020-03-10/2020-03-19[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1715192-3fde45d2-4b5e-4852-979e-592b414f9450[0m
[1m- Name: [0m[36mLatest record for a country[0m
[1m- URL: [0m[33mhttps://covidapi.info/api/v1/country/IND/latest[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1715192-423eecee-7c3c-46a3-a272-05d040508fe3[0m
[1m- Name: [0m[36mLatest Global Count[0m
[1m- URL: [0m[33mhttps://covidapi.info/api/v1/global[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1715192-481c473d-a329-49db-8d61-bb492578d490[0m
[1m- Name: [0m[36mCountry specific historic data[0m
[1m- URL: [0m[33mhttps://covidapi.info/api/v1/country/IND[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m
Request ID [0m[33m1715192-65985809-21b6-4254-bc20-dd697e0e82e1[0m
[1m- Name: [0m[36mDate of last record entry for any country[0m
[1m- URL: [0m[33mhttps://covidapi.info/api/v1/latest-date[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1715192-6ecd114d-4010-4576-925e-b44a5b602458[0m
[1m- Name: [0m[36mGlobal count in a date range[0m
[1m- URL: [0m[33mhttps://covidapi.info/api/v1/global/2020-03-10/2020-03-15[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1715192-7fb36b34-4fa9-4e2a-b1f1-1c6dafa8d9e6[0m
[1m- Name: [0m[36mLatest count for all countries[0m
[1m- URL: [0m[33mhttps://covidapi.info/api/v1/global/latest[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1715192-800441ff-ec31-4a78-be80-5c69526c8c21[0m
[1m- Name: [0m[36mCountry specific time-series data[0m
[1m- URL: [0m[33mhttps://covidapi.info/api/v1/country/IND/timeseries/2020-03-15/2020-03-20[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1715192-9148c1e8-08a4-4305-be0a-4d4f3a6ce9ff[0m
[1m- Name: [0m[36mGlobal date-wise count[0m
[1m- URL: [0m[33mhttps://covidapi.info/api/v1/global/count[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1715192-9a1a4710-d31e-4cda-8bd4-086f3612443a[0m
[1m- Name: [0m[36mGlobal count on  a particular date[0m
[1m- URL: [0m[33mhttps://covidapi.info/api/v1/global/2020-03-15[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1794236-88e45070-d8e2-490d-906b-c34fcf6659cf[0m
[1m- Name: [0m[36mGeneral Stats Table View[0m
[1m- URL: [0m[33mhttps://corona-virus-stats.herokuapp.com/api/v1/cases/countries-search?limit=200[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mlimit[0m=[32m200[0m
[1m
Request ID [0m[33m1794236-ddd60ad5-8aaf-44d4-9df7-fb29e8023703[0m
[1m- Name: [0m[36mCountry stats Card View[0m
[1m- URL: [0m[33mhttps://corona-virus-stats.herokuapp.com/api/v1/cases/countries-search[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Parameter: [0m[33msearch[0m=[32mUK[0m
[1m- Parameter: [0m[33mlimit[0m=[32m15[0m
[1m- Parameter: [0m[33mpage[0m=[32m4[0m
[1m- Parameter: [0m[33morder[0m=[32mactive_cases[0m
[1m
Request ID [0m[33m1794236-586396e7-9366-440f-b7fd-d8a2cc42b906[0m
[1m- Name: [0m[36mCreate a JSON Data File - Example 2[0m
[1m- URL: [0m[33mhttps://reqres.in/api/users?page=2[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Parameter: [0m[33mpage[0m=[32m2[0m
[1m
Request ID [0m[33m1794236-64853eb8-2f7b-4892-9549-c39bdc87b86f[0m
[1m- Name: [0m[36mCreate a JSON Data File - Example 3[0m
[1m- URL: [0m[33mhttps://restful-booker.herokuapp.com/booking/1[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m1794236-7d3b064c-50d1-41ee-a0b1-aeb1756cf363[0m
[1m- Name: [0m[36mCreate a JSON Data File - Example 1[0m
[1m- URL: [0m[33mhttps://randomuser.me/api?results=5[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Parameter: [0m[33mresults[0m=[32m5[0m
[1m
Request ID [0m[33m1794236-b1c1129a-217b-4b47-8f7c-743dfd896dc4[0m
[1m- Name: [0m[36mJSONpath Visualizer[0m
[1m- URL: [0m[33mhttps://randomuser.me/api/?results=5[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mresults[0m=[32m5[0m
[1m
Request ID [0m[33m19100705-0ef345cf-b4aa-4aa0-9153-25186200e403[0m
[1m- Name: [0m[36mSend-to-slack[0m
[1m- URL: [0m[33m{{slack-url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-type[0m: [32m application/json[0m[0m
[1m- Request Body: [0m[32m{
  "attachments": [
        {
            "fallback": "A dog from dogfetch",
            "image_url": "https://{{dog-url}}",
            "thumb_url": "https://{{dog-url}}"
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m19100705-8ba398ce-815c-4f02-9a9f-fe5cfa15733c[0m
[1m- Name: [0m[36mFetch Dog image[0m
[1m- URL: [0m[33mhttps://{{dog-url}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m19100705-b6ff554d-6942-421b-ab23-a32099d076bc[0m
[1m- Name: [0m[36mFetch Random Dog URL[0m
[1m- URL: [0m[33mhttps://dog.ceo/api/breeds/image/random[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m223408-9d87cedd-0325-41d7-80a2-55c868882845[0m
[1m- Name: [0m[36mSend Slack notification[0m
[1m- URL: [0m[33m{{slackWebhookUrl}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
  "channel": "#ops",
  "username": "Cloudinary Usage Watchdog",
  "icon_emoji": ":dog2:",
  "text": "{{slackNotificationText}}",
  "attachments": {{slackNotificationAttachments}}
}[0m[0m
[1m- Pre-Request Script: [0m[32m!pm.environment.get('slack_text') && pm.environment.set('slack_text', '');
!pm.environment.get('slack_icon') && pm.environment.set('slack_icon', ':robot_face:');
!pm.environment.get('slack_channel') && pm.environment.set('slack_channel', '#ops');
!pm.environment.get('slack_attachments') && pm.environment.set('slack_attachments', '[]');
!pm.environment.get('slack_username') && pm.environment.set('slack_username', 'aws-resource-limit-bot');
[0m
[1m
Request ID [0m[33m223408-ea992049-0e59-4d9d-991d-4993c28c1e9b[0m
[1m- Name: [0m[36mUsage[0m
[1m- URL: [0m[33m{{url}}/{{cloudName}}/usage[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33mpassword[0m=[32m{{apiSecret}}[0m
  [1m- [0m[33musername[0m=[32m{{apiKey}}[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m25426789-1faf5f21-837e-434e-8ab9-e75ccf54db10[0m
[1m- Name: [0m[36mInsert Multiple Documents[0m
[1m- URL: [0m[33m{{URL_ENDPOINT}}/action/insertMany[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/{{CONTENT_TYPE}}[0m[0m
[1m- Header: [0m[33mAccess-Control-Request-Headers[0m: [32m*[0m[0m
[1m- Header: [0m[33mapi-key[0m: [32m{{API_KEY}}[0m[0m
[1m- Request Body: [0m[32m{
      "dataSource": "{{DATA_SOURCE}}",
      "database": "{{DATABASE}}",
      "collection": "{{COLLECTION}}",
      "documents": [{
        "name": "John Sample",
        "age": 42
      },{
        "name": "Mister Postman",
        "age": 37
      },{
        "name": "Miss MongoDB",
        "age": 35
      }]
  }[0m[0m
[1m
Request ID [0m[33m25426789-20422dca-e784-4d53-9cb9-1faf11d365a3[0m
[1m- Name: [0m[36mInsert Document[0m
[1m- URL: [0m[33m{{URL_ENDPOINT}}/action/insertOne[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/{{CONTENT_TYPE}}[0m[0m
[1m- Header: [0m[33mAccess-Control-Request-Headers[0m: [32m*[0m[0m
[1m- Header: [0m[33mapi-key[0m: [32m{{API_KEY}}[0m[0m
[1m- Request Body: [0m[32m{
      "dataSource": "{{DATA_SOURCE}}",
      "database": "{{DATABASE}}",
      "collection": "{{COLLECTION}}",
      "document": {
        "name": "John Sample",
        "age": 42
      }
  }[0m[0m
[1m
Request ID [0m[33m25426789-4bca213a-21ef-42b7-ab2b-966e00983ea7[0m
[1m- Name: [0m[36mFind Multiple Documents[0m
[1m- URL: [0m[33m{{URL_ENDPOINT}}/action/find[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/{{CONTENT_TYPE}}[0m[0m
[1m- Header: [0m[33mAccess-Control-Request-Headers[0m: [32m*[0m[0m
[1m- Header: [0m[33mapi-key[0m: [32m{{API_KEY}}[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/{{CONTENT_TYPE}}[0m[0m
[1m- Request Body: [0m[32m{
      "dataSource": "{{DATA_SOURCE}}",
      "database": "{{DATABASE}}",
      "collection": "{{COLLECTION}}"
      }[0m[0m
[1m
Request ID [0m[33m25426789-74a3f685-ca61-43d0-97dd-9f33fc4cbde9[0m
[1m- Name: [0m[36mUpdate Multiple Documents[0m
[1m- URL: [0m[33m{{URL_ENDPOINT}}/action/updateMany[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/{{CONTENT_TYPE}}[0m[0m
[1m- Header: [0m[33mAccess-Control-Request-Headers[0m: [32m*[0m[0m
[1m- Header: [0m[33mapi-key[0m: [32m{{API_KEY}}[0m[0m
[1m- Request Body: [0m[32m{
      "dataSource": "{{DATA_SOURCE}}",
      "database": "{{DATABASE}}",
      "collection": "{{COLLECTION}}",
      "filter": { "age": { "$lt": 40 } },
      "update": { "$set": { "age": 42 } }
  }[0m[0m
[1m
Request ID [0m[33m25426789-933a29a0-e053-464f-b645-d32e8ae35c99[0m
[1m- Name: [0m[36mUpdate Document[0m
[1m- URL: [0m[33m{{URL_ENDPOINT}}/action/updateOne[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/{{CONTENT_TYPE}}[0m[0m
[1m- Header: [0m[33mAccess-Control-Request-Headers[0m: [32m*[0m[0m
[1m- Header: [0m[33mapi-key[0m: [32m{{API_KEY}}[0m[0m
[1m- Request Body: [0m[32m{
      "dataSource": "{{DATA_SOURCE}}",
      "database": "{{DATABASE}}",
      "collection": "{{COLLECTION}}",
      "filter": { "name": "John Sample" },
      "update": { "$set": { "age": 24 } }
  }[0m[0m
[1m
Request ID [0m[33m25426789-9adcedee-040b-4536-9e01-2f29af838032[0m
[1m- Name: [0m[36mFind Document[0m
[1m- URL: [0m[33m{{URL_ENDPOINT}}/action/findOne[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/{{CONTENT_TYPE}}[0m[0m
[1m- Header: [0m[33mAccess-Control-Request-Headers[0m: [32m*[0m[0m
[1m- Header: [0m[33mapi-key[0m: [32m{{API_KEY}}[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/{{CONTENT_TYPE}}[0m[0m
[1m- Request Body: [0m[32m{
    "collection":"movies",
    "database":"sample_mflix",
    "dataSource":"Cluster0",
    "projection": {"_id": 1}
}[0m[0m
[1m
Request ID [0m[33m25426789-b0d85bf7-c033-4132-b48c-feeff4be8c1a[0m
[1m- Name: [0m[36mRun Aggregation Pipeline[0m
[1m- URL: [0m[33m{{URL_ENDPOINT}}/action/aggregate[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/{{CONTENT_TYPE}}[0m[0m
[1m- Header: [0m[33mAccess-Control-Request-Headers[0m: [32m*[0m[0m
[1m- Header: [0m[33mapi-key[0m: [32m{{API_KEY}}[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/{{CONTENT_TYPE}}[0m[0m
[1m- Request Body: [0m[32m{
      "dataSource": "{{DATA_SOURCE}}",
      "database": "{{DATABASE}}",
      "collection": "{{COLLECTION}}",
      "pipeline": [
          {
              "$sort": { "age": 1 }
          },
          {
              "$limit": 1
          }
      ]
  }[0m[0m
[1m
Request ID [0m[33m25426789-b710a01f-cde1-4a18-9349-215b0af03de4[0m
[1m- Name: [0m[36mDelete Many Documents[0m
[1m- URL: [0m[33m{{URL_ENDPOINT}}/action/deleteMany[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/{{CONTENT_TYPE}}[0m[0m
[1m- Header: [0m[33mAccess-Control-Request-Headers[0m: [32m*[0m[0m
[1m- Header: [0m[33mapi-key[0m: [32m{{API_KEY}}[0m[0m
[1m- Request Body: [0m[32m{
      "dataSource": "{{DATA_SOURCE}}",
      "database": "{{DATABASE}}",
      "collection": "{{COLLECTION}}",
      "filter": { }
  }[0m[0m
[1m
Request ID [0m[33m25426789-e3a5ced5-9947-4fa2-ba8f-98ba16e463c2[0m
[1m- Name: [0m[36mDelete Document[0m
[1m- URL: [0m[33m{{URL_ENDPOINT}}/action/deleteOne[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/{{CONTENT_TYPE}}[0m[0m
[1m- Header: [0m[33mAccess-Control-Request-Headers[0m: [32m*[0m[0m
[1m- Header: [0m[33mapi-key[0m: [32m{{API_KEY}}[0m[0m
[1m- Request Body: [0m[32m{
      "dataSource": "{{DATA_SOURCE}}",
      "database": "{{DATABASE}}",
      "collection": "{{COLLECTION}}",
      "filter": { "name": "John Sample" }
  }[0m[0m
[1m
Request ID [0m[33m3407886-f0f97744-0413-4bcf-b4e4-7c85939c5a7f[0m
[1m- Name: [0m[36mDummy Request 1[0m
[1m- URL: [0m[33mhttp://www.africau.edu/images/default/sample.pdf[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m3407886-fff0ab46-1191-45f7-a31d-86c0a7124922[0m
[1m- Name: [0m[36mDummy Request 2[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get?product=postman[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mproduct[0m=[32mpostman[0m
[1m
Request ID [0m[33m3407886-0cd8c17f-45bc-48b0-9be0-cd7d7704425d[0m
[1m- Name: [0m[36mVisualize any JSON data[0m
[1m- URL: [0m[33mhttps://postman-echo.com/post[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "Analyst": {
        "name": "Jack",
        "email": "jack@xyz.com"
    },
    "Loaded by": "Jills",
    "Load id": 34,
    "git id": "xxqaygqertqsg98qhpughqer",
    "Analysis Id": "7asdlnagsd98gfaqsgf",
    "Load Date": "July 12, 2018",
    "Data Source": "Study XY123-456",
    "Jira Ticket": "Foo-1",
    "Confluence URL": "http://myserver/wxyz",
    "Study sponsors": [
        {
            "name": "john",
            "email": "john@@xyz.com"
        },
        {
            "name": "jane",
            "email": "jane@@xyz.com"
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m3407886-543a6f84-eaf4-4f18-b8ce-97978a1553cc[0m
[1m- Name: [0m[36mVisualize any CSV data[0m
[1m- URL: [0m[33mhttps://www.sample-videos.com/csv/Sample-Spreadsheet-100-rows.csv[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m3407886-b54d1f1d-5b0f-41eb-ab10-d1e2f8cdeab8[0m
[1m- Name: [0m[36mVisualize any XML data[0m
[1m- URL: [0m[33mhttps://postman-echo.com/post[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m<?xml version="1.0" encoding="UTF-8"?>
<book>
 <name>A Song of Ice and Fire</name>
 <author>George R. R. Martin</author>
 <language>English</language>
 <genre>Epic fantasy</genre>
</book>[0m[0m
[1m
Request ID [0m[33m3738312-14c5e857-d9ce-47d4-8824-ddd493ab708c[0m
[1m- Name: [0m[36mList Users[0m
[1m- URL: [0m[33mhttps://iam.amazonaws.com/?Action=ListUsers&Version=2010-05-08&MaxItems=1000[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mAction[0m=[32mListUsers[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-05-08[0m
[1m- Parameter: [0m[33mMaxItems[0m=[32m1000[0m
[1m
Request ID [0m[33m3738312-2537e2a2-ad3d-4e01-b932-fdb77aaab3a0[0m
[1m- Name: [0m[36mList Roles[0m
[1m- URL: [0m[33mhttps://iam.amazonaws.com/?Action=ListRoles&Version=2010-05-08&MaxItems=1000[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mAction[0m=[32mListRoles[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-05-08[0m
[1m- Parameter: [0m[33mMaxItems[0m=[32m1000[0m
[1m
Request ID [0m[33m3738312-568d69f7-a8a4-4b82-8139-f875305e583f[0m
[1m- Name: [0m[36mAnalyse IAM Credential Report[0m
[1m- URL: [0m[33mhttps://iam.amazonaws.com/?Action=GetCredentialReport&Version=2010-05-08[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mAction[0m=[32mGetCredentialReport[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-05-08[0m
[1m
Request ID [0m[33m3738312-59c9a6f7-94a6-445e-adb1-e042de5d8dde[0m
[1m- Name: [0m[36mList groups[0m
[1m- URL: [0m[33mhttps://iam.amazonaws.com/?Action=ListGroups&Version=2010-05-08&MaxItems=1000[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mAction[0m=[32mListGroups[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-05-08[0m
[1m- Parameter: [0m[33mMaxItems[0m=[32m1000[0m
[1m
Request ID [0m[33m3738312-60879323-1af7-4a46-878a-3eb1ff907b1a[0m
[1m- Name: [0m[36mPassword Policy Check[0m
[1m- URL: [0m[33mhttps://iam.amazonaws.com/?Action=GetAccountPasswordPolicy&Version=2010-05-08[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mAction[0m=[32mGetAccountPasswordPolicy[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-05-08[0m
[1m
Request ID [0m[33m3738312-7039f872-fe00-4a57-a3e7-9e794334986a[0m
[1m- Name: [0m[36mGet Account Summary[0m
[1m- URL: [0m[33mhttps://iam.amazonaws.com/?Action=GetAccountSummary&Version=2010-05-08&MaxItems=1000[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mAction[0m=[32mGetAccountSummary[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-05-08[0m
[1m- Parameter: [0m[33mMaxItems[0m=[32m1000[0m
[1m- Pre-Request Script: [0m[32maws_account_name = pm.variables.get('aws_account_name');

var slackBody = {
        username: 'AWS IAM Auditor',
        text: "*Please find below the findings of IAM Audit of an AWS Account: " + aws_account_name + "*",
        attachments:[],
        mrkdwn:true
};

var serviceAccessAttachment = {
    title: "Following users has not accessed certain services in a long time",
    text: "",
    mrkdwn : true
};

pm.variables.set('serviceAccessAttachment', JSON.stringify(serviceAccessAttachment));
pm.variables.set('slack_body',JSON.stringify(slackBody));[0m
[1m
Request ID [0m[33m3738312-7f45738a-7820-4c2f-b271-888cffdc6aee[0m
[1m- Name: [0m[36mGet account aliase[0m
[1m- URL: [0m[33mhttps://iam.amazonaws.com/?Action=ListAccountAliases&Version=2010-05-08[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mAction[0m=[32mListAccountAliases[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-05-08[0m
[1m
Request ID [0m[33m3738312-a2efa6fe-fe36-420a-8d2c-06ca3d4c5717[0m
[1m- Name: [0m[36mPost to Slack[0m
[1m- URL: [0m[33m{{slack_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{{slack_body}}[0m[0m
[1m- Pre-Request Script: [0m[32mpm.variables.get('slack_body');[0m
[1m
Request ID [0m[33m3738312-bb906a2f-a4d8-4c9a-993c-a6363deebae2[0m
[1m- Name: [0m[36mGenerate IAM Credential Report[0m
[1m- URL: [0m[33mhttps://iam.amazonaws.com/?Action=GenerateCredentialReport&Version=2010-05-08[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mAction[0m=[32mGenerateCredentialReport[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-05-08[0m
[1m
Request ID [0m[33m3738312-de31668e-2075-434f-891f-34ec9b2068b0[0m
[1m- Name: [0m[36mGenerate Service Last Accessed Details[0m
[1m- URL: [0m[33mhttps://iam.amazonaws.com/?Action=GenerateServiceLastAccessedDetails&Version=2010-05-08&Arn={{iamEntityArn}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mAction[0m=[32mGenerateServiceLastAccessedDetails[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-05-08[0m
[1m- Parameter: [0m[33mArn[0m=[32m{{iamEntityArn}}[0m
[1m- Pre-Request Script: [0m[32miamEntities = JSON.parse(pm.variables.get("iamEntities"));
iamEntity = iamEntities.shift();
iamEntityArn = iamEntity.Arn;

pm.environment.set('iamEntityArn', iamEntityArn);

pm.variables.set('iamEntities',JSON.stringify(iamEntities));
pm.variables.set('iamEntity',JSON.stringify(iamEntity));[0m
[1m
Request ID [0m[33m3738312-e21f59a4-fc33-47e6-9daa-594c44e519b9[0m
[1m- Name: [0m[36mList Policies[0m
[1m- URL: [0m[33mhttps://iam.amazonaws.com/?Action=ListPolicies&Version=2010-05-08&MaxItems=1000&Scope=Local[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mAction[0m=[32mListPolicies[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-05-08[0m
[1m- Parameter: [0m[33mMaxItems[0m=[32m1000[0m
[1m- Parameter: [0m[33mScope[0m=[32mLocal[0m
[1m
Request ID [0m[33m3738312-f4529ea6-7372-49d4-898a-654461e947d9[0m
[1m- Name: [0m[36mGet Service Last Accessed Details[0m
[1m- URL: [0m[33mhttps://iam.amazonaws.com/?Action=GetServiceLastAccessedDetails&JobId={{JobId}}&Version=2010-05-08
[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mAction[0m=[32mGetServiceLastAccessedDetails[0m
[1m- Parameter: [0m[33mJobId[0m=[32m{{JobId}}[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-05-08
[0m
[1m
Request ID [0m[33m38679134-f4c20777-b07a-49a5-8ba4-a12b7656819a[0m
[1m- Name: [0m[36mBegin Learning[0m
[1m- URL: [0m[33mlearn-by-api.glitch.me/intro[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m41103687-42e78b1c-97d7-4885-842f-1f4d66d03cd1[0m
[1m- Name: [0m[36mComplete my first challenge[0m
[1m- URL: [0m[33m{{baseUrl}}/welcome?email=peter.ostman@postman.com&firstName=Peter[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mtext/plain[0m[0m
[1m- Parameter: [0m[33memail[0m=[32mpeter.ostman@postman.com[0m
[1m- Parameter: [0m[33mfirstName[0m=[32mPeter[0m
[1m
Request ID [0m[33m4258786-5995e45c-d013-4b3c-9cac-8d57f5c74d62[0m
[1m- Name: [0m[36mDanceable blues[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/recommendations?seed_genres=blues&min_danceability=0.8[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer <access_token>[0m[0m
[1m- Parameter: [0m[33mseed_genres[0m=[32mblues[0m
[1m- Parameter: [0m[33mmin_danceability[0m=[32m0.8[0m
[1m- Parameter: [0m[33mmin_popularity[0m=[32m80[0m
[1m- Parameter: [0m[33mtarget_acousticness[0m=[32m0.9[0m
[1m
Request ID [0m[33m4258786-6fff1b37-9b52-4d0b-a015-ce01fde69816[0m
[1m- Name: [0m[36mPopular danceable songs - Pop & Rock[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/recommendations?seed_genres=pop, rock&min_danceability=0.5&min_popularity=80[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer <access_token>[0m[0m
[1m- Parameter: [0m[33mseed_genres[0m=[32mpop, rock[0m
[1m- Parameter: [0m[33mtarget_acousticness[0m=[32m0.9[0m
[1m- Parameter: [0m[33mmin_danceability[0m=[32m0.5[0m
[1m- Parameter: [0m[33mmin_popularity[0m=[32m80[0m
[1m
Request ID [0m[33m4258786-a765a3bf-a1c4-4a1a-9233-a4af02d993f7[0m
[1m- Name: [0m[36mAcoustic hip-hop[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/recommendations?seed_genres=hip-hop&target_acousticness=0.9[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer <access_token>[0m[0m
[1m- Parameter: [0m[33mtarget_acousticness[0m=[32m0.9[0m
[1m- Parameter: [0m[33mseed_genres[0m=[32mhip-hop[0m
[1m
Request ID [0m[33m4258786-d97ce27b-a424-4724-8b11-e840f3c20b51[0m
[1m- Name: [0m[36mExplore[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/recommendations?seed_genres=pop&min_tempo=160[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer <access_token>[0m[0m
[1m- Parameter: [0m[33mseed_genres[0m=[32mpop[0m
[1m- Parameter: [0m[33mmin_tempo[0m=[32m160[0m
[1m- Parameter: [0m[33mmin_acousticness[0m=[32m0.8[0m
[1m- Parameter: [0m[33mmin_danceability[0m=[32m[0m
[1m- Parameter: [0m[33mmin_popularity[0m=[32m[0m
[1m- Parameter: [0m[33mmin_liveness[0m=[32m0.6[0m
[1m- Parameter: [0m[33mmin_valence[0m=[32m[0m
[1m
Request ID [0m[33m4258786-f85b0d30-5c68-4225-9bb1-dcaf8b71ecc6[0m
[1m- Name: [0m[36mHigh tempo country[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/recommendations?seed_genres=country&min_tempo=160&target_acousticness=0.9[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer <access_token>[0m[0m
[1m- Parameter: [0m[33mseed_genres[0m=[32mcountry[0m
[1m- Parameter: [0m[33mmin_tempo[0m=[32m160[0m
[1m- Parameter: [0m[33mtarget_acousticness[0m=[32m0.9[0m
[1m
Request ID [0m[33m4520909-922acc8b-978b-41ea-a846-70887c82cd04[0m
[1m- Name: [0m[36mGet Place Coordinates[0m
[1m- URL: [0m[33mhttps://maps.googleapis.com/maps/api/place/textsearch/json?query={{Place}}&key={{googleAPIKey}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mquery[0m=[32m{{Place}}[0m
[1m- Parameter: [0m[33mkey[0m=[32m{{googleAPIKey}}[0m
[1m- Pre-Request Script: [0m[32mpm.environment.set("Place", "Rome");
pm.environment.set("phoneNumber", "");
pm.environment.set("type", "point_of_interest");
pm.environment.set("radius", "50000");[0m
[1m
Request ID [0m[33m4520909-96dd83f1-5c31-42f1-b112-5a06738827e7[0m
[1m- Name: [0m[36mGet Uber Ride Estimate[0m
[1m- URL: [0m[33mhttps://api.uber.com/v1.2/estimates/price?start_latitude={{latitude}}&start_longitude={{longitude}}&end_latitude={{end_latitude}}&end_longitude={{end_longitude}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAuthorization[0m: [32m{{uberAPIKey}}[0m[0m
[1m- Header: [0m[33mAccept-Language[0m: [32men_US[0m[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mstart_latitude[0m=[32m{{latitude}}[0m
[1m- Parameter: [0m[33mstart_longitude[0m=[32m{{longitude}}[0m
[1m- Parameter: [0m[33mend_latitude[0m=[32m{{end_latitude}}[0m
[1m- Parameter: [0m[33mend_longitude[0m=[32m{{end_longitude}}[0m
[1m- Pre-Request Script: [0m[32mvar result = JSON.parse(pm.environment.get("places"));

var end_latitude = result[pm.environment.get("completedNumberOfPlaces")].lat;
var end_longitude = result[pm.environment.get("completedNumberOfPlaces")].lng;

console.log('passes:'+pm.environment.get("completedNumberOfPlaces"));

pm.environment.set("end_latitude", end_latitude);
pm.environment.set("end_longitude", end_longitude);[0m
[1m
Request ID [0m[33m4520909-eb490c62-9174-4cc3-a936-d1e0d58d9553[0m
[1m- Name: [0m[36mGet Points Of Interest[0m
[1m- URL: [0m[33mhttps://maps.googleapis.com/maps/api/place/textsearch/json?query={{query}}&key={{googleAPIKey}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33m[0m: [32m12.9715987,77.5945627[0m[0m
[1m- Parameter: [0m[33mquery[0m=[32m{{query}}[0m
[1m- Parameter: [0m[33mkey[0m=[32m{{googleAPIKey}}[0m
[1m- Pre-Request Script: [0m[32mvar str = "tourist+attractions+in+"+pm.environment.get("Place");
pm.environment.set("query", str);
/*Bangalore:
pm.environment.set("latitude", "12.9715987");
pm.environment.set("longitude","77.5945627");


/*Paris:
pm.environment.set("latitude", "48.8566");
pm.environment.set("longitude","2.3522"); */


/*Original query: https://maps.googleapis.com/maps/api/place/nearbysearch/json?location={{latitude}},{{longitude}}&radius={{radius}}&type={{type}}&key= */

[0m
[1m
Request ID [0m[33m4520909-ec3c412c-dba9-4a20-adb0-c9bc34c3f8a1[0m
[1m- Name: [0m[36mPost to Slack[0m
[1m- URL: [0m[33mhttps://hooks.slack.com/services/{{slackWebHookURL}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"channel" : "#channelname",
	"username" : "username",
    "attachments": {{messageBody}}
}[0m[0m
[1m- Pre-Request Script: [0m[32mvar messageBody = 'Hi there User! Here are the places centered around ' + pm.environment.get("Place") +': \n';
var places = JSON.parse(pm.environment.get("places"));
var prices = JSON.parse(pm.environment.get("prices"));
pm.environment.set("sort","byFare");

resultArray = [];



for(var i=0;i < prices.length; i++){
    
    var fieldsArray = [];
    
    fieldsArray.push({"title": "Place type", "value": removeUnderscore(places[i].type), "short": true},
    {"title": "Price-estimate", "value": prices[i].estimate/*+' '+prices[i].currency*/, "short": true},
    {"title": "Transport-cost", "value": prices[i].typeOfVehicle, "short": true},
    {"title": "Distance", "value": prices[i].distance/*+' miles'*/, "short": true})
    
    resultArray.push({"title": places[i].name, "fields" : fieldsArray, "color": '#' + (function co(lor){   return (lor +=
  [0,1,2,3,4,5,6,7,8,9,'a','b','c','d','e','f'][Math.floor(Math.random()*16)])
  && (lor.length == 6) ?  lor : co(lor); })('')});
}

_ = require('lodash');
resultArray = _.sortBy(resultArray, function(o) {
    console.log(o['fields'][3]['value']);
    return o['fields'][getSortParam(pm.environment.get("sort"))]['value'];
    //getSortParam(pm.environment.get("sort"))
});

function getSortParam(str){
    if(str === "byDistance"){
        return 3;
    }
    else if(str === "byFare"){
        return 1;
    }
    else return 3;
}


//resultArray.push({"fields" : fieldsArray});
console.log(resultArray);

resultArray.unshift({"pretext": "Hi User! Find the "+  pm.environment.get("totalNumberOfPlaces") +  " locations centered around "+pm.environment.get("Place") + ", the lowest fares, and distance to get there:"});

pm.environment.set("messageBody", JSON.stringify(resultArray));

function removeUnderscore(str){
    console.log('here');
    var i = str.indexOf('_') ;
    var str2 = str
    str2[i] = " ";
    return str2;
}[0m
[1m
Request ID [0m[33m4630964-222f141a-7672-46e5-b4c0-9b38e3ce1866[0m
[1m- Name: [0m[36mSend weather to Slack[0m
[1m- URL: [0m[33m{{slackWebhookUrl}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
  "username": "weatherbot",
  "icon_emoji": ":earth_africa:",
  "attachments": [
        {
            "fallback": "{{title}}",
            "title": "{{title}}",
            "text": "{{body}}",
            "thumb_url": "{{imageUrl}}",
            "color": "#7CD197"
        }
    ]
}[0m[0m
[1m- Pre-Request Script: [0m[32mlet temp = Math.round(parseInt(pm.environment.get("temp"))),
    title = "Weather for " + pm.environment.get("formattedAddress"),
    body = "The temperature is " + globals.temp + " °C.",
    imageUrl;
    
pm.environment.set("temp", temp);

if (globals.icon === "clear-day")
    imageUrl = "https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/01-s.png";
else if (globals.icon === "clear-night")
    imageUrl = "https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/33-s.png";
else if (globals.icon === "rain")
    imageUrl = "https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/18-s.png";
else if (globals.icon === "fog")
    imageUrl = "https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/11-s.png";
else if (globals.icon === "snow")
    imageUrl = "https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/22-s.png";
else if (globals.icon === "wind")
    imageUrl = "https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/32-s.png";
else if (globals.icon === "cloudy")
    imageUrl = "https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/07-s.png";
else if (globals.icon === "sleet")
    imageUrl = "https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/25-s.png";
else if (globals.icon === "partly-cloudy-day")
    imageUrl = "https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/03-s.png";
else if (globals.icon === "partly-cloudy-night")
    imageUrl = "https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/35-s.png";

pm.environment.set("title", title);
pm.environment.set("body", body);
pm.environment.set("imageUrl", imageUrl);[0m
[1m
Request ID [0m[33m4630964-6bd4c71d-98f7-47c4-ae5f-7512d56ac7f9[0m
[1m- Name: [0m[36mGet Weather[0m
[1m- URL: [0m[33mhttps://api.darksky.net/forecast/{{ForecastAPIKey}}/{{latLong}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m4630964-b0c0868b-cba2-4127-afc8-a1abf4e03cb1[0m
[1m- Name: [0m[36mGet Latitude and Longitude[0m
[1m- URL: [0m[33mhttps://maps.googleapis.com/maps/api/geocode/json?address={{location}}&key={{GeocodingAPIKey}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33maddress[0m=[32m{{location}}[0m
[1m- Parameter: [0m[33mkey[0m=[32m{{GeocodingAPIKey}}[0m
[1m
Request ID [0m[33m4630964-a5ffbb0c-2540-4e9b-b84f-6b0e16f0a177[0m
[1m- Name: [0m[36mVisualize Latest News[0m
[1m- URL: [0m[33m{{url}}/top-headlines?language=en&apiKey={{api_key}}&country={{country}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mlanguage[0m=[32men[0m
[1m- Parameter: [0m[33mapiKey[0m=[32m{{api_key}}[0m
[1m- Parameter: [0m[33mcountry[0m=[32m{{country}}[0m
[1m- Parameter: [0m[33mcategory[0m=[32m{{category}}[0m
[1m
Request ID [0m[33m4630964-771bbd15-8e01-40e3-a775-e359f2853267[0m
[1m- Name: [0m[36mGet workspace[0m
[1m- URL: [0m[33m{{apiUrl}}/workspaces/{{oldWorkspaceId}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mx-api-key[0m: [32m{{oldKey}}[0m[0m
[1m
Request ID [0m[33m4630964-42b4458a-9413-4780-950e-2c9ea75a2f3e[0m
[1m- Name: [0m[36mCreate duplicate workspace[0m
[1m- URL: [0m[33m{{apiUrl}}/workspaces[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mx-api-key[0m: [32m{{apiKey}}[0m[0m
[1m- Request Body: [0m[32m{
	"workspace": {
		"name": "Duplicate Workspace",
		"type": "personal",
		"collections": {{collections}},
		"environments": {{environments}},
		"mocks": {{mocks}},
		"monitors": {{monitors}}
	}
}[0m[0m
[1m
Request ID [0m[33m4630964-55e820b4-0837-4795-80ee-346853463bbc[0m
[1m- Name: [0m[36mGet workspace [0m
[1m- URL: [0m[33m{{apiUrl}}/workspaces/{{workspaceId}}[33m[0m
[1m- Authorization: [0m[33mnoauth[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mx-api-key[0m: [32m{{apiKey}}[0m[0m
[1m
Request ID [0m[33m4630964-7238b5d1-cb20-4faf-9a74-a8617084bdeb[0m
[1m- Name: [0m[36mGet workspace [0m
[1m- URL: [0m[33m{{apiUrl}}/workspaces/{{workspaceId}}[33m[0m
[1m- Authorization: [0m[33mnoauth[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mx-api-key[0m: [32m{{apiKey}}[0m[0m
[1m
Request ID [0m[33m4630964-9be00211-63db-402f-aa30-cba54c0b6d5a[0m
[1m- Name: [0m[36mCreate duplicate workspace[0m
[1m- URL: [0m[33m{{apiUrl}}/workspaces[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mx-api-key[0m: [32m{{apiKey}}[0m[0m
[1m- Request Body: [0m[32m{
	"workspace": {
		"name": "Duplicate Workspace",
		"type": "personal",
		"collections": {{collections}},
		"environments": {{environments}},
		"mocks": {{mocks}},
		"monitors": {{monitors}}
	}
}[0m[0m
[1m
Request ID [0m[33m4630964-15a3c8ec-e668-43b5-a051-d0e2af9852b2[0m
[1m- Name: [0m[36mJWT signed without base64 encoding[0m
[1m- URL: [0m[33mhttps://postman-echo.com/post[33m[0m
[1m- Authorization: [0m[33mbearer[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Pre-Request Script: [0m[32m// JWT generation script adapted from
// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d

var jwtSecret = pm.environment.get('jwt_secret') || ''

// Set headers for JWT
var header = {
	'typ': 'JWT',
	'alg': 'HS256'
};

// Prepare timestamp in seconds
var currentTimestamp = Math.floor(Date.now() / 1000)

var data = {
	'iss': pm.environment.get('jwt_iss') || '',
	'ist': pm.environment.get('jwt_ist') || '',
	'iat': currentTimestamp,
	'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation
	'jti': 'jwt_nonce'
}

// encode header
var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))

// encode data
var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))

// build token
var token = `${stringifiedHeader}.${stringifiedData}`

// sign token
var signature = CryptoJS.HmacSHA256(token, jwtSecret)
var signedToken = `${token}.${signature}`

pm.environment.set('jwt_signed', signedToken)
console.log('Signed and non-encoded JWT', signedToken)[0m
[1m
Request ID [0m[33m4630964-9ba55dff-8aa0-4df1-9dc4-7f64e7b0c2ee[0m
[1m- Name: [0m[36mUsing JWT helper[0m
[1m- URL: [0m[33mhttps://postman-echo.com/post[33m[0m
[1m- Authorization: [0m[33mjwt[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m
Request ID [0m[33m4630964-df7c0fff-babc-420d-ad45-e9e731d5c50f[0m
[1m- Name: [0m[36mJWT signed with base64 encoding[0m
[1m- URL: [0m[33mhttps://postman-echo.com/post[33m[0m
[1m- Authorization: [0m[33mbearer[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Pre-Request Script: [0m[32m// JWT generation script adapted from
// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d

var jwtSecret = pm.environment.get('jwt_secret') || ''

// Set headers for JWT
var header = {
	'typ': 'JWT',
	'alg': 'HS256'
};

// Prepare timestamp in seconds
var currentTimestamp = Math.floor(Date.now() / 1000)

var data = {
	'iss': pm.environment.get('jwt_iss') || '',
	'ist': pm.environment.get('jwt_ist') || '',
	'iat': currentTimestamp,
	'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation
	'jti': 'jwt_nonce'
}


function base64url(source) {
    // Encode in classical base64
    encodedSource = CryptoJS.enc.Base64.stringify(source)
    
    // Remove padding equal characters
    encodedSource = encodedSource.replace(/=+$/, '')
    
    // Replace characters according to base64url specifications
    encodedSource = encodedSource.replace(/\+/g, '-')
    encodedSource = encodedSource.replace(/\//g, '_')
    
    return encodedSource
}

// encode header
var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))
var encodedHeader = base64url(stringifiedHeader)

// encode data
var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))
var encodedData = base64url(stringifiedData)

// build token
var token = `${encodedHeader}.${encodedData}`

// sign token
var signature = CryptoJS.HmacSHA256(token, jwtSecret)
signature = base64url(signature)
var signedToken = `${token}.${signature}`

pm.environment.set('jwt_signed', signedToken)
console.log('Signed and encoded JWT', signedToken)[0m
[1m
Request ID [0m[33m4796420-1238e091-4390-4f05-a824-8351f7fbf966[0m
[1m- Name: [0m[36mGet list of categories[0m
[1m- URL: [0m[33mhttps://public-apis-api.herokuapp.com/api/v1/apis/categories?page=1[33m[0m
[1m- Authorization: [0m[33mbearer[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mpage[0m=[32m1[0m
[1m
Request ID [0m[33m4796420-747c429e-709b-44e2-b4a7-89b5e6582fff[0m
[1m- Name: [0m[36mGet token[0m
[1m- URL: [0m[33mhttps://public-apis-api.herokuapp.com/api/v1/auth/token[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m4796420-b204a74f-a1f2-4c3b-a619-45b1e097c1d1[0m
[1m- Name: [0m[36mList entries per category currently cataloged in the project[0m
[1m- URL: [0m[33mhttps://public-apis-api.herokuapp.com/api/v1/apis/entry?page=1&category=Animals[33m[0m
[1m- Authorization: [0m[33mbearer[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mpage[0m=[32m1[0m
[1m- Parameter: [0m[33mcategory[0m=[32mAnimals[0m
[1m
Request ID [0m[33m4946945-3a6311a9-1df7-4cdf-9564-2b7f450719f5[0m
[1m- Name: [0m[36mTable view[0m
[1m- URL: [0m[33mhttps://postman-echo.com/post[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"contacts": [
		{
			"name": "{{$randomFullName}}",
			"email": "{{$randomEmail}}"
		},
		{
			"name": "{{$randomFullName}}",
			"email": "{{$randomEmail}}"
		},
		{
			"name": "{{$randomFullName}}",
			"email": "{{$randomEmail}}"
		},
		{
			"name": "{{$randomFullName}}",
			"email": "{{$randomEmail}}"
		}
		]
}
		[0m[0m
[1m
Request ID [0m[33m4946945-02ebac2c-ba88-45e3-ac14-76c17dda27fb[0m
[1m- Name: [0m[36mAdd a new cat[0m
[1m- URL: [0m[33m{{url}}/cats[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "name": "{{_cat_name}}",
    "breed": "{{_cat_breed}}",
    "age": {{_cat_age}}
}[0m[0m
[1m
Request ID [0m[33m4946945-67f9ea84-e5b6-40c3-b520-25d72293d5da[0m
[1m- Name: [0m[36mFind a cat by ID[0m
[1m- URL: [0m[33m{{url}}/cats/{{catId}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m4946945-68fb4fcd-1726-4000-8b93-23785c40b924[0m
[1m- Name: [0m[36mGet all cats[0m
[1m- URL: [0m[33m{{url}}/cats[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m
Request ID [0m[33m4946945-3c52d739-1511-4303-b191-bf1eb187dedc[0m
[1m- Name: [0m[36mHello World[0m
[1m- URL: [0m[33mhttps://postman-echo.com/post[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"message": "Hello, World!"
}[0m[0m
[1m
Request ID [0m[33m4946945-9f23dc19-2879-4753-8fd2-5bfac8b248b1[0m
[1m- Name: [0m[36mMonthly Global Land-Surface Temperature[0m
[1m- URL: [0m[33m{{demoUrl}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m4946945-dc6f5997-1a35-4f7c-a700-8ee78069324a[0m
[1m- Name: [0m[36mBar Chart of 2D data[0m
[1m- URL: [0m[33mhttps://postman-echo.com/post[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"labels": [
		"{{$randomCountryCode}}",
		"{{$randomCountryCode}}",
		"{{$randomCountryCode}}",
		"{{$randomCountryCode}}",
		"{{$randomCountryCode}}"
	],
	"data": [
		{{$randomInt}},
		{{$randomInt}},
		{{$randomInt}},
		{{$randomInt}},
		{{$randomInt}}
	]
}[0m[0m
[1m
Request ID [0m[33m5293839-1bd9fc30-23f1-4c90-aefc-5fe12a72b2d5[0m
[1m- Name: [0m[36m1st POST request[0m
[1m- URL: [0m[33mhttps://postman-echo.com/post?test2={{id}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Parameter: [0m[33mtest2[0m=[32m{{id}}[0m
[1m- Pre-Request Script: [0m[32m//check to see if a counter variable has been declared, and if so 
if(!pm.environment.has('counter'))
{
    pm.environment.set('counter',0);
}

//get the counter value
var counter = pm.environment.get('counter');

//parse the array we stored in the 1st request, since it gets stored as a string
var idArray = JSON.parse(pm.environment.get('idArray'));

//get the value of the idArray at the current iteration (counter)
var id = idArray[counter];

//store an environment variable with the value of the current id
//the {{id}} variable in the URL of this request will end up resolving to this value

pm.environment.set('id',id);

//incremement the counter, and store it in the environment
counter++;
pm.environment.set('counter',counter);[0m
[1m
Request ID [0m[33m5293839-540122cc-d3bb-49cb-94d0-b8d8e370ce39[0m
[1m- Name: [0m[36mGet ID list[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"idArray":[1,2,3,4,5,6,7,8,9,0]
}[0m[0m
[1m
Request ID [0m[33m5293839-99abf49f-cc84-46ef-b495-070a1d05881e[0m
[1m- Name: [0m[36m2nd POST request[0m
[1m- URL: [0m[33mhttps://postman-echo.com/post?test2={{id}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Parameter: [0m[33mtest2[0m=[32m{{id}}[0m
[1m
Request ID [0m[33m5293839-f17c28b3-5097-47a2-bce5-91611b17c06e[0m
[1m- Name: [0m[36m3rd POST request[0m
[1m- URL: [0m[33mhttps://postman-echo.com/post?test3={{id}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Parameter: [0m[33mtest3[0m=[32m{{id}}[0m
[1m
Request ID [0m[33m55577-04e692a5-a55c-4ca6-94ef-caf01358836e[0m
[1m- Name: [0m[36m1200 KB Raw[0m
[1m- URL: [0m[33mpostman-echo.com/bytes/1200/kb[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m55577-13314065-aa0c-4b07-8d8c-80a0f48034ad[0m
[1m- Name: [0m[36m6 MB[0m
[1m- URL: [0m[33mpostman-echo.com/bytes/6/mb?type=json[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mtype[0m=[32mjson[0m
[1m
Request ID [0m[33m55577-1c778bbd-4cc5-4006-94da-0ae3cb1b916c[0m
[1m- Name: [0m[36m3 MB[0m
[1m- URL: [0m[33mpostman-echo.com/bytes/3/mb?type=json[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mtype[0m=[32mjson[0m
[1m
Request ID [0m[33m55577-4477b5f4-86ed-46c5-a5d1-1626f55a98de[0m
[1m- Name: [0m[36m10 MB[0m
[1m- URL: [0m[33mpostman-echo.com/bytes/10/mb?type=json[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mtype[0m=[32mjson[0m
[1m
Request ID [0m[33m55577-47e1a23a-4f46-4986-a4dd-b1e69f68e75f[0m
[1m- Name: [0m[36m25 MB[0m
[1m- URL: [0m[33mpostman-echo.com/bytes/25/mb?type=json[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mtype[0m=[32mjson[0m
[1m
Request ID [0m[33m55577-4ff1d59c-67f2-45c8-b751-39ac8333f5c6[0m
[1m- Name: [0m[36m4 MB[0m
[1m- URL: [0m[33mpostman-echo.com/bytes/4/mb?type=json[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mtype[0m=[32mjson[0m
[1m
Request ID [0m[33m55577-7d4fc2a3-d3dc-4a07-82bf-fb5a749951da[0m
[1m- Name: [0m[36m1200 KB[0m
[1m- URL: [0m[33mpostman-echo.com/bytes/1200/kb?type=json[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mtype[0m=[32mjson[0m
[1m
Request ID [0m[33m55577-9868ef4f-09e5-442b-8217-c39fc8f5972e[0m
[1m- Name: [0m[36m2 MB[0m
[1m- URL: [0m[33mpostman-echo.com/bytes/2/mb?type=json[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mtype[0m=[32mjson[0m
[1m
Request ID [0m[33m55577-a9579fee-2c12-45ab-aeae-7eb038c12e3e[0m
[1m- Name: [0m[36m1 MB[0m
[1m- URL: [0m[33mpostman-echo.com/bytes/1/mb?type=json[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mtype[0m=[32mjson[0m
[1m
Request ID [0m[33m55577-b7e68959-cea6-4cf3-86ba-561255b82bf8[0m
[1m- Name: [0m[36m50 MB[0m
[1m- URL: [0m[33mpostman-echo.com/bytes/50/mb?type=json[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mtype[0m=[32mjson[0m
[1m
Request ID [0m[33m55577-edfc2254-c828-4a54-85b5-8ae397c6a5a2[0m
[1m- Name: [0m[36m100 KB Raw[0m
[1m- URL: [0m[33mpostman-echo.com/bytes/100/kb[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m55577-f59cfcd2-e1d1-4a4a-b1bb-07ea7580f61c[0m
[1m- Name: [0m[36m40 MB[0m
[1m- URL: [0m[33mpostman-echo.com/bytes/40/mb?type=json[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mtype[0m=[32mjson[0m
[1m
Request ID [0m[33m55577-ff50b4d4-1b0a-42b9-a573-b90099c732c5[0m
[1m- Name: [0m[36m5 MB[0m
[1m- URL: [0m[33mpostman-echo.com/bytes/5/mb?type=json[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mtype[0m=[32mjson[0m
[1m
Request ID [0m[33m5922408-3062c404-31ef-45c8-a736-3e73955d03cc[0m
[1m- Name: [0m[36mScan leaked key[0m
[1m- URL: [0m[33mhttps://api.getpostman.com/workspaces[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mX-Api-Key[0m: [32m{{postmanAPIKey}}[0m[0m
[1m
Request ID [0m[33m5922408-554e20b4-9614-4d43-a15b-fe4c5e740386[0m
[1m- Name: [0m[36mAccess the contents of workspaces accessible to you[0m
[1m- URL: [0m[33mhttps://api.getpostman.com/workspaces/{{workspaceId}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mX-Api-Key[0m: [32m{{postmanAPIKey}}[0m[0m
[1m- Pre-Request Script: [0m[32mvar teamWorkspaceArray = pm.variables.get("teamWorkspaceArray");
var arraySize = teamWorkspaceArray.length;
var counter = pm.variables.get("workspaceCounter");

if (counter < arraySize) {
    pm.variables.set("workspaceId", teamWorkspaceArray[counter]);
}
[0m
[1m
Request ID [0m[33m5922408-93389efb-9d08-4512-b05b-44db475889ee[0m
[1m- Name: [0m[36mGET all workspaces[0m
[1m- URL: [0m[33mhttps://api.getpostman.com/workspaces[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mX-Api-Key[0m: [32m{{postmanAPIKey}}[0m[0m
[1m- Pre-Request Script: [0m[32mvar postmanAPIKey = pm.environment.get("postmanAPIKey");
var regex = pm.environment.get("regex");

if (postmanAPIKey && regex) {
    // Looping through the array
    pm.variables.set("workspaceCounter", 0);
    pm.variables.set("environmentCounter", 0);
    
    // Flags for initialization
    pm.variables.set("workspaceFlag", 0);
    pm.variables.set("environmentFlag", 0);
    
    // Initialiaze array every time the monitor runs
    pm.variables.set("environmentArrayTeam", []);
    pm.variables.set("classified", []);
    pm.variables.set("keyValueString", []);
} else {
    console.log("Please Provide Necessary Environment Variables");
    postman.setNextRequest(null);
}
[0m
[1m
Request ID [0m[33m5922408-aff5df82-0e7f-4bff-9170-278485261e83[0m
[1m- Name: [0m[36mAccess contents of a specific environment[0m
[1m- URL: [0m[33mhttps://api.getpostman.com/environments/{{environmentUid}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mX-Api-Key[0m: [32m{{postmanAPIKey}}[0m[0m
[1m- Pre-Request Script: [0m[32mvar environmentArrayTeam = pm.variables.get("environmentArrayTeam");
var arraySize = environmentArrayTeam.length;
var counter = pm.variables.get("environmentCounter");

if (counter < arraySize) {
    pm.variables.set("environmentUid", environmentArrayTeam[counter]);
}
[0m
[1m
Request ID [0m[33m6186519-590cddd8-4440-4d7e-becd-eb70166267ec[0m
[1m- Name: [0m[36mfetch comments[0m
[1m- URL: [0m[33mhttps://api.github.com/repos/{{userName}}/{{repoName}}/comments  [33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{vault:authorization-secret}}[0m
  [1m- [0m[33maddTokenTo[0m: [32mqueryParams[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Pre-Request Script: [0m[32mlet repoCount = pm.environment.get("repoCount");  //number of repositories

if(repoCount>0){
    postman.setNextRequest("fetch comments");
}
else{
    postman.setNextRequest("calculate sentiment");
}[0m
[1m
Request ID [0m[33m6186519-67d6b43f-7a0d-430a-9a29-dbe2339cddd5[0m
[1m- Name: [0m[36mcalculate sentiment[0m
[1m- URL: [0m[33mhttps://apis.paralleldots.com/v3/sentiment?text={{sentimentText}}&api_key={{apiKey}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Parameter: [0m[33mtext[0m=[32m{{sentimentText}}[0m
[1m- Parameter: [0m[33mapi_key[0m=[32m{{apiKey}}[0m
[1m- Pre-Request Script: [0m[32mconsole.log("sentiment");

let sentimentText = pm.environment.get("sentimentText"); // GitHub comments for analyzing sentiment on it

if(sentimentText === ""){
    sentimentText = "neutral";
    pm.environment.set("sentimentText",sentimentText);
}
[0m
[1m
Request ID [0m[33m6186519-b8af6e84-95d6-46e6-ae3f-f14d8a3e7ec8[0m
[1m- Name: [0m[36mpush to slack[0m
[1m- URL: [0m[33m{{slackWebhookURL}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{{tempBody}}[0m[0m
[1m- Pre-Request Script: [0m[32mlet popularRepos = pm.environment.get("popularRepos");

popularRepos = JSON.parse(popularRepos);

let repoLinks = [];
popularRepos.forEach(function(data) {
    let repoUrl = "https://github.com/"+data.userName+"/"+data.repoName;
    if(data.sentimentValue == "negative"){
        repoLinks.push({
                    "name": "github repo",
                    "text": data.repoName,
                    "type": "button",
                    "value": "Click to view it on GitHub",
                    "style":"danger",
                    "url": repoUrl
    });
    }
    repoLinks.push({
                    "name": "github repo",
                    "text": data.repoName,
                    "type": "button",
                    "value": "Click to view it on GitHub",
                    "url": repoUrl
    });
});

pm.variables.set("repoLinks",JSON.stringify(repoLinks));

//template string to pass on body of slack webhook

let tempBody =  {
    "text": "Here, are the results!",
    "attachments": [
        {
            "text": "Find the Popular Repositories here!",
            "fallback": "Can't find the repo",
            "callback_id": "vinitshahdeo",
            "color": "#3AA3E3",
            "attachment_type": "default",
            "actions": repoLinks
        }
    ]
};
pm.variables.set('tempBody', JSON.stringify(tempBody))[0m
[1m
Request ID [0m[33m6186519-fa6a64c6-808f-41ee-9544-dc22bacf7069[0m
[1m- Name: [0m[36mnpm search[0m
[1m- URL: [0m[33mhttp://registry.npmjs.com/-/v1/search?text={{searchTerm}}&size={{maxSize}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mtext[0m=[32m{{searchTerm}}[0m
[1m- Parameter: [0m[33msize[0m=[32m{{maxSize}}[0m
[1m- Pre-Request Script: [0m[32mlet counter = 0; //variable to store 

pm.environment.set("counter", counter); 
pm.environment.set("popularRepos",""); // this variable stores popular repos[0m
[1m
Request ID [0m[33m640245-2bd5f15c-3184-903e-4f0d-d1e73f0032e0[0m
[1m- Name: [0m[36mCheck RDS Instance tags[0m
[1m- URL: [0m[33mhttps://rds.{{awsRegion}}.amazonaws.com/?Operation=ListTagsForResource&Version=2014-10-31&ResourceName={{arn}}[33m[0m
[1m- Authorization: [0m[33mawsv4[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m- Header: [0m[33mX-Amz-Date[0m: [32m20170410T102349Z[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mOperation[0m=[32mListTagsForResource[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2014-10-31[0m
[1m- Parameter: [0m[33mResourceName[0m=[32m{{arn}}[0m
[1m- Pre-Request Script: [0m[32mvar db;

try {
    db = JSON.parse(pm.environment.get('db'));
} catch (e) {
    db = {};
}

pm.environment.set('arn', db.DBInstanceArn);
[0m
[1m
Request ID [0m[33m640245-2fc42487-353a-f4d0-9d49-fa8d54aa4aa1[0m
[1m- Name: [0m[36mGet Metric Statistics: FreeStorageSpace[0m
[1m- URL: [0m[33mhttps://monitoring.{{awsRegion}}.amazonaws.com/?Dimensions.member.1.Name=DBInstanceIdentifier&Dimensions.member.1.Value={{dbIdentifier}}&MetricName=FreeStorageSpace&Namespace=AWS/RDS&Operation=GetMetricStatistics&Period={{secPerDay}}&Statistics.member.1=Average&Unit=Bytes&Version=2010-08-01&StartTime={{startTime}}&EndTime={{endTime}}[33m[0m
[1m- Authorization: [0m[33mawsv4[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mDimensions.member.1.Name[0m=[32mDBInstanceIdentifier[0m
[1m- Parameter: [0m[33mDimensions.member.1.Value[0m=[32m{{dbIdentifier}}[0m
[1m- Parameter: [0m[33mMetricName[0m=[32mFreeStorageSpace[0m
[1m- Parameter: [0m[33mNamespace[0m=[32mAWS/RDS[0m
[1m- Parameter: [0m[33mOperation[0m=[32mGetMetricStatistics[0m
[1m- Parameter: [0m[33mPeriod[0m=[32m{{secPerDay}}[0m
[1m- Parameter: [0m[33mStatistics.member.1[0m=[32mAverage[0m
[1m- Parameter: [0m[33mUnit[0m=[32mBytes[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-08-01[0m
[1m- Parameter: [0m[33mStartTime[0m=[32m{{startTime}}[0m
[1m- Parameter: [0m[33mEndTime[0m=[32m{{endTime}}[0m
[1m- Pre-Request Script: [0m[32mvar db,
    databases;

try {
    databases = JSON.parse(pm.environment.get('databases'));
    db = _.isFunction(databases.pop) && databases.pop();

    // Set relevant identifiers for the current database
    pm.environment.set('db', JSON.stringify(db));
    pm.environment.set('dbIdentifier', db.DBInstanceIdentifier);

    // update the databases list
    pm.environment.set('databases', JSON.stringify(databases));
} catch (e) {
    console.log(e);
}
[0m
[1m
Request ID [0m[33m640245-c2d88e99-9491-f474-04d0-172533786073[0m
[1m- Name: [0m[36mDescribe RDS Instances[0m
[1m- URL: [0m[33mhttps://rds.{{awsRegion}}.amazonaws.com/?Operation=DescribeDBInstances&Version=2014-10-31&MaxRecords={{maxRecords}}&Marker={{marker}}[33m[0m
[1m- Authorization: [0m[33mawsv4[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m- Header: [0m[33mX-Amz-Date[0m: [32m20170420T144512Z[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mOperation[0m=[32mDescribeDBInstances[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2014-10-31[0m
[1m- Parameter: [0m[33mMaxRecords[0m=[32m{{maxRecords}}[0m
[1m- Parameter: [0m[33mMarker[0m=[32m{{marker}}[0m
[1m- Pre-Request Script: [0m[32mvar end,
    start,
    timestamp;
    msPerDay = 864e5; // milliseconds per day

if (!(pm.environment.get('marker') && pm.environment.get('databases'))) {
    timestamp = new Date();

    !pm.environment.get('maxRecords') && pm.environment.set('maxRecords', 100);
    !pm.environment.get('awsRegion') && pm.environment.set('awsRegion', 'us-east-1');

    // set UTC milliseconds, seconds, minutes and hours to zero, effectively winding back to the start of the UTC day
    timestamp.setUTCMilliseconds(0);
    timestamp.setUTCSeconds(0);
    timestamp.setUTCMinutes(0);
    timestamp.setUTCHours(0);

    pm.environment.set("secPerDay", msPerDay / 1000);
    pm.environment.set('endTime', timestamp.toISOString());
    pm.environment.set('startTime', start = new Date(timestamp.valueOf() - msPerDay).toISOString());

    pm.environment.set('marker', '');
    pm.environment.unset('databases');

    console.info('Time range: ', start, '-', timestamp.toISOString());
}
[0m
[1m
Request ID [0m[33m640245-1734beb8-f2a0-0220-48e7-2b5f4ee43164[0m
[1m- Name: [0m[36mList tags for resource[0m
[1m- URL: [0m[33mhttps://elasticbeanstalk.{{awsRegion}}.amazonaws.com/?Action=ListTagsForResource&Version=2010-12-01&ResourceArn={{envArn}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m- Header: [0m[33mX-Amz-Date[0m: [32m20170425T102550Z[0m[0m
[1m- Header: [0m[33mAuthorization[0m: [32mAWS4-HMAC-SHA256 Credential={{vault:aws-access-key}}/20170425/us-east-1/ec2/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature=e45ce4d3f72bb476c4e09e39b9806e5154c01a5c5fce035a1fd051f8a10b054c[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mAction[0m=[32mListTagsForResource[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-12-01[0m
[1m- Parameter: [0m[33mResourceArn[0m=[32m{{envArn}}[0m
[1m- Pre-Request Script: [0m[32mvar member,
    environments,
    index = Number(pm.environment.get("index")) || 0;

try {
    environments = JSON.parse(pm.environment.get("environments"));

    pm.environment.set("envArn", _.get(environments, [index, 'EnvironmentArn']));
} catch (e) {
    console.error(e);
}
[0m
[1m
Request ID [0m[33m640245-4fbfc0cf-b0e6-e0af-d5e5-b4af4190035b[0m
[1m- Name: [0m[36mDescribe Environments[0m
[1m- URL: [0m[33mhttps://elasticbeanstalk.{{awsRegion}}.amazonaws.com/?Operation=DescribeEnvironments&Version=2010-12-01&MaxRecords={{maxRecords}}&NextToken={{nextToken}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m- Header: [0m[33mX-Amz-Date[0m: [32m20170425T091719Z[0m[0m
[1m- Header: [0m[33mAuthorization[0m: [32mAWS4-HMAC-SHA256 Credential={{vault:aws-access-key}}/20170425/us-east-1/elasticbeanstalk/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature=62709d15c6ec8c5aa0ac67c8411f421b41c78b0994dcabca836e2ca0a7c3b3aa[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mOperation[0m=[32mDescribeEnvironments[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-12-01[0m
[1m- Parameter: [0m[33mMaxRecords[0m=[32m{{maxRecords}}[0m
[1m- Parameter: [0m[33mNextToken[0m=[32m{{nextToken}}[0m
[1m- Pre-Request Script: [0m[32m// ensure that stale data left over from previous runs does not pollute the current one
if (!(pm.environment.get('environments') && pm.environment.get('nextToken'))) {
    !pm.environment.get('awsRegion') && pm.environment.set('awsRegion', 'us-east-1');
    !pm.environment.get('maxRecords') && pm.environment.set('maxRecords', 100);

    // ensure that the environment list is always traversed from the first element.
    pm.environment.set('nextToken', '');

    ['index', 'environments', 'envName', 'appName'].forEach((varName) => {
        pm.environment.unset(varName);
    });
}
[0m
[1m
Request ID [0m[33m640245-8ec6c98c-97d6-aa99-6a2e-7a1f88c3c354[0m
[1m- Name: [0m[36mDescribe Configuration Settings[0m
[1m- URL: [0m[33mhttps://elasticbeanstalk.{{awsRegion}}.amazonaws.com/?Operation=DescribeConfigurationSettings&Version=2010-12-01&EnvironmentName={{envName}}&ApplicationName={{appName}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m- Header: [0m[33mX-Amz-Date[0m: [32m20170425T100114Z[0m[0m
[1m- Header: [0m[33mAuthorization[0m: [32mAWS4-HMAC-SHA256 Credential={{vault:aws-access-key}}/20170425/us-east-1/elasticbeanstalk/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature=b352ec8a78738cdb3cf2d17c551327aaf53ce96d57596de4d1c93dd2206069fe[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mOperation[0m=[32mDescribeConfigurationSettings[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-12-01[0m
[1m- Parameter: [0m[33mEnvironmentName[0m=[32m{{envName}}[0m
[1m- Parameter: [0m[33mApplicationName[0m=[32m{{appName}}[0m
[1m- Pre-Request Script: [0m[32mvar environments,
    index = (Number(pm.environment.get('index')) + 1) || 0;

pm.environment.set('index', index);

try {
    environments = JSON.parse(pm.environment.get('environments'));

    pm.environment.set('envName', environments[index].EnvironmentName);
    pm.environment.set('appName', environments[index].ApplicationName);
} catch (e) {
    console.log(e);
}
[0m
[1m
Request ID [0m[33m6416206-07adc12b-3482-450e-ab2b-f1783c879298[0m
[1m- Name: [0m[36mlogin User[0m
[1m- URL: [0m[33mhttps://eisenhowermatrixapp.herokuapp.com/users/login[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33musername[0m=[32m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"email":"{{email}}",
	"password":"{{password}}"
}[0m[0m
[1m
Request ID [0m[33m6416206-0821b596-865e-49ca-875b-6d26dfb54daa[0m
[1m- Name: [0m[36mSlack todo[0m
[1m- URL: [0m[33m{{slackHook}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"text":"{{slackmessage}}"
}[0m[0m
[1m
Request ID [0m[33m6416206-3e5c4184-7415-4f74-b721-55a585ad5a74[0m
[1m- Name: [0m[36mSlack help[0m
[1m- URL: [0m[33m{{slackHook}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"text":"Write requests like this",
	"attachments":[{
		"fields": [
                {
                    "title": "Create a Todo",
                    "value": "/eisen create [your task] [type]",
                    "short": true
                }
            ],
            "color":"#2202f4"
	},
	{
         	"fields":[{
         		"title": "Type"
         		}],
         		"color":"#2202f4"
	},
	{
		"text":"UI=Urgent-Important",
		"color":"#99cc00"
	},
	{
		"text":"UNI=Urgent-Not-Important",
		"color":"#36a4dd"
	},
	{
		"text":"NUI=Not-Urgent-Important",
		"color":"#ff9f00"
	},
	{
		"text":"NUNI=Not Urgent-Not Important",
		"color":"#ff4d4e"
	},
	
	{
		"fields": [
                {
                    "title": "Fetch List of tasks ",
                    "value": "/eisen list",
                    "short": true
                }
                
            ],
            "color":"#2202f4"
	},
	{
		"fields": [
                {
                    "title": "Delete a task ",
                    "value": "click on the Delete button after fetching list",
                    "short": true
                }
                
            ],
            "color":"#2202f4"
	}
		]
}[0m[0m
[1m
Request ID [0m[33m6416206-43017271-d07c-49af-8795-ef0048eb8af3[0m
[1m- Name: [0m[36mUpdate Todo[0m
[1m- URL: [0m[33mhttps://eisenhowermatrixapp.herokuapp.com/todos/{{token}}/{{todoid}}[33m[0m
[1m- Request Method: [0m[33mPATCH[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"text":"{{text}}",
	"ttype":"{{ttype}}",
	"completed":"{{completed}}"
}[0m[0m
[1m
Request ID [0m[33m6416206-559841ff-72ce-4ab0-bd66-8d23001bf5a6[0m
[1m- Name: [0m[36mSlack[0m
[1m- URL: [0m[33m{{slackHook}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"text":"{{slackmessage}}",
	"attachments":{{attachments}}
}[0m[0m
[1m- Pre-Request Script: [0m[32mvar alltodo = pm.environment.get('alltodos');
var message = "";

var dictionary = {
    "N-Urg-Imp": "#ff9f00",
    "N-Urg-N-Imp": "#ff4d4e",
    "Urg-Imp": "#99cc00",
    "Urg-N-Imp": "#36a4dd"
};
var arrayofattach = {
    "N-Urg-Imp": [],
    "N-Urg-N-Imp": [],
    "Urg-Imp": [],
    "Urg-N-Imp": []
};

var attachments = [];
if (alltodo.length > 0) {
    alltodo.forEach((element) => {
     
        var color = dictionary[element.ttype];
        
        var attach = {
            "text": element.text,
            "color": color,
            "callback_id": element._id,
            "actions": [{
                "name": "Delete",
                "text": "Delete",
                "type": "button",
                "style": "danger",
                "value": "delete",
                "confirm": {
                    "title": "Are you sure?",
                    "text": "You want to delete it?",
                    "ok_text": "Yes",
                    "dismiss_text": "No"
                }
            }]
        };
        arrayofattach[element.ttype].push(attach);
    });
attachments=attachments.concat(arrayofattach['Urg-Imp']);
attachments=attachments.concat(arrayofattach['Urg-N-Imp']);
attachments=attachments.concat(arrayofattach['N-Urg-Imp']);
attachments=attachments.concat(arrayofattach['N-Urg-N-Imp']);
    attachments = JSON.stringify(attachments);
    pm.environment.set('attachments', attachments);
    postman.setNextRequest(null);

} else {
    pm.environment.set('slackmessage', 'You are free!! there is no task');
    pm.environment.set('attachments', attachments);
    postman.setNextRequest('Slack todo');
}[0m
[1m
Request ID [0m[33m6416206-9502e656-fdfa-4df1-887d-42e194801d0b[0m
[1m- Name: [0m[36mSignup User[0m
[1m- URL: [0m[33mhttps://eisenhowermatrixapp.herokuapp.com/users[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"email":"{{email}}",
	"password":"{{password}}"
}[0m[0m
[1m
Request ID [0m[33m6416206-b6e5da8c-e4a3-4f47-80cb-93a7f0557090[0m
[1m- Name: [0m[36mDelete Todo with id[0m
[1m- URL: [0m[33mhttps://eisenhowermatrixapp.herokuapp.com/todos/{{token}}/{{todoid}}[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m- Request Body: [0m[32m[0m[0m
[1m
Request ID [0m[33m6416206-d0496633-cde3-493a-933b-095d09bfff63[0m
[1m- Name: [0m[36mGet Todos[0m
[1m- URL: [0m[33mhttps://eisenhowermatrixapp.herokuapp.com/todos/{{token}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m6416206-e9488aa5-feca-465f-a5d9-ad9fb8bbe033[0m
[1m- Name: [0m[36mSetup Request[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Pre-Request Script: [0m[32mvar data = JSON.parse(globals.previousRequest).data;
pm.environment.set('responseurl',data.response_url);
if (data.command== "/eisen") {
    var requesttype = data.text.split(' ');
    var task = requesttype[1];
    if (requesttype[0] === 'create') {
        var i = 1;
        for (i = 2; i < requesttype.length - 1; i++) {
            task = task.concat(" ");
            task = task.concat(requesttype[i]);
        }
        pm.environment.set('text', task);
        pm.environment.set('ttype', requesttype[requesttype.length - 1]);
        postman.setNextRequest('Post Todo');
    }else if (requesttype[0] == 'list') {
        postman.setNextRequest('Get Todos');
    }else if(requesttype[0]=='help'){
        postman.setNextRequest('Slack help');
    }else {
        postman.setNextRequest('Slack help');
    }
}
else{
    var payload=JSON.parse(data.payload);
    pm.environment.set('todoid',payload.callback_id);
        postman.setNextRequest('Delete Todo with id');
}[0m
[1m
Request ID [0m[33m6416206-ec046480-f818-41d7-aa09-8aea324bb792[0m
[1m- Name: [0m[36mPost Todo[0m
[1m- URL: [0m[33mhttps://eisenhowermatrixapp.herokuapp.com/todos/{{token}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"text":"{{text}}",
	"ttype":"{{ttype}}",
	"completed":"{{completed}}"
}[0m[0m
[1m- Pre-Request Script: [0m[32mvar dictionary = {
    "NUI": "N-Urg-Imp",
    "NUNI": "N-Urg-N-Imp",
    "UI": "Urg-Imp",
    "UNI": "Urg-N-Imp"
};

let taskType=pm.environment.get('ttype');
var p=taskType;
taskType=taskType.toUpperCase();
console.log(taskType);
if(taskType=='UI'||taskType=='UNI'||taskType=='NUI'||taskType=='NUNI'){
    console.log('in here ');
    taskType=dictionary[taskType];
}
else{
    var task=pm.environment.get('text');
    task=task.concat(" ");
    task=task.concat(p);
    pm.environment.set('text',task);
    console.log('was here ');
    taskType='N-Urg-N-Imp';
}

pm.environment.set("ttype", taskType);
[0m
[1m
Request ID [0m[33m6416206-04956980-c442-4c22-bf18-f6f413cb0757[0m
[1m- Name: [0m[36mCreate a table in Db[0m
[1m- URL: [0m[33m{{url}}/createtable[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mCREATE TABLE `fakeone` (
  `id` bigint(20) unsigned NOT NULL,
  `text` longtext CHARACTER SET ascii COLLATE ascii_bin NOT NULL,
  `randomNumber` int unsigned NOT NULL,
  `smallNumber` tinyint DEFAULT NULL,
  `limitedCharacter` varchar(64) CHARACTER SET ascii COLLATE ascii_bin NOT NULL DEFAULT '',
  `cratedAt` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;[0m[0m
[1m
Request ID [0m[33m6416206-2a1201bc-d234-443d-9749-1d29f09f0a5c[0m
[1m- Name: [0m[36mGenerate Data[0m
[1m- URL: [0m[33m{{url}}/generatedata/{{tablename}}/{{limit}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m
Request ID [0m[33m6416206-b2b93aa8-695e-4253-ab01-d622fdb888bc[0m
[1m- Name: [0m[36mQuery Route[0m
[1m- URL: [0m[33m{{url}}/query[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32mselect count(*) from fakeone[0m[0m
[1m
Request ID [0m[33m6442584-0e163659-1b87-4109-b50b-db34ee655e54[0m
[1m- Name: [0m[36mGet user ID[0m
[1m- URL: [0m[33mhttps://www.goodreads.com/api/auth_user[33m[0m
[1m- Authorization: [0m[33moauth1[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Pre-Request Script: [0m[32mvar oauthtoken  = pm.iterationData.get("oauthtoken") ? pm.iterationData.get("oauthtoken"): pm.variables.get("oauthtoken");
var oauthsecret  = pm.iterationData.get("oauthsecret") ? pm.iterationData.get("oauthsecret") :  pm.variables.get("oauthsecret");

var maxShelfSize  = pm.iterationData.get("max_shelf_size");

if(maxShelfSize && !isNaN(maxShelfSize)) {
    pm.environment.set("maxShelfSize", maxShelfSize);
}

pm.expect(oauthtoken).to.not.be.undefined;
pm.expect(oauthsecret).to.not.be.undefined;

pm.environment.set("oauthtoken", oauthtoken);
pm.environment.set("oauthsecret", oauthsecret);

console.log(pm.environment.get("addedBookIds"));[0m
[1m
Request ID [0m[33m6442584-2dff15c5-e1e3-4b05-8d9a-edd7747fca1b[0m
[1m- Name: [0m[36mCreate a shelf[0m
[1m- URL: [0m[33mhttps://www.goodreads.com/user_shelves.xml?user_shelf[name]=reading-list-{{timestamp}}&user_shelf[exclusive]=true[33m[0m
[1m- Authorization: [0m[33moauth1[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Parameter: [0m[33muser_shelf[name][0m=[32mreading-list-{{timestamp}}[0m
[1m- Parameter: [0m[33muser_shelf[exclusive][0m=[32mtrue[0m
[1m- Pre-Request Script: [0m[32mvar moment = require('moment');
pm.environment.set("timestamp", moment().format("DD-MMM-YYYY-HH-mm-ss"));
[0m
[1m
Request ID [0m[33m6442584-af0f3ac8-7ad4-4e71-95fc-975079ceb26d[0m
[1m- Name: [0m[36mGet following users[0m
[1m- URL: [0m[33mhttps://www.goodreads.com/user/{{userId}}/following.xml[33m[0m
[1m- Authorization: [0m[33moauth1[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m6442584-e1ff3330-88b2-4e7c-bcc9-2e68472e5053[0m
[1m- Name: [0m[36mGet user reviews[0m
[1m- URL: [0m[33mhttps://www.goodreads.com/review/list?key={{key}}&v=2&id={{followingUserId}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mkey[0m=[32m{{key}}[0m
[1m- Parameter: [0m[33mv[0m=[32m2[0m
[1m- Parameter: [0m[33mid[0m=[32m{{followingUserId}}[0m
[1m- Pre-Request Script: [0m[32mvar userIds = JSON.parse(pm.environment.get("userIds"));

if(userIds.length > 0) {
    
    var followingUserId = userIds[0];
    pm.environment.set("followingUserId", followingUserId);
    
} else {
    postman.setNextRequest("Get following user");
}
[0m
[1m
Request ID [0m[33m6442584-f0bf4ddb-715e-490f-af56-d0f75b220f70[0m
[1m- Name: [0m[36mAdd a book to shelf[0m
[1m- URL: [0m[33mhttps://www.goodreads.com/shelf/add_to_shelf.xml?name={{shelfName}}&book_id={{bookId}}[33m[0m
[1m- Authorization: [0m[33moauth1[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Parameter: [0m[33mname[0m=[32m{{shelfName}}[0m
[1m- Parameter: [0m[33mbook_id[0m=[32m{{bookId}}[0m
[1m- Pre-Request Script: [0m[32mvar bookIds = JSON.parse(pm.environment.get("bookIds")),
    addedBookIds = pm.environment.get("addedBookIds") ? JSON.parse(pm.environment.get("addedBookIds")) : [];

if (bookIds.length > 0) {
    var randomIndex = Math.floor(Math.random() * bookIds.length);
   
    while (addedBookIds.indexOf(bookIds[randomIndex]) > -1) {
        randomIndex = Math.floor(Math.random()*bookIds.length);
    }
    
    var bookId = bookIds[randomIndex];
     
    bookIds.splice(randomIndex, 1);

    pm.environment.set("bookIds", JSON.stringify(bookIds));
    pm.environment.set("bookId", bookId);
}
[0m
[1m
Request ID [0m[33m6442584-30a6642b-3e38-4aa0-a009-e71a62edba5d[0m
[1m- Name: [0m[36mFind upcoming birthdays[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m6442584-7a6af6a4-6ae8-4f9a-b693-8228835dad9e[0m
[1m- Name: [0m[36mSend Slack Notification[0m
[1m- URL: [0m[33m{{slackUrl}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{{slackMessage}}[0m[0m
[1m
Request ID [0m[33m6461441-1d901828-4dd9-4386-8a0d-f39521112964[0m
[1m- Name: [0m[36mMonster Stat Block[0m
[1m- URL: [0m[33mhttp://www.dnd5eapi.co/api/monsters/{{monster_name}}/[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m6461441-41a1b914-134a-4b70-8486-db165657b168[0m
[1m- Name: [0m[36mSearch breweries by term[0m
[1m- URL: [0m[33mhttps://api.openbrewerydb.org/breweries/search?query={{search_term}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Parameter: [0m[33mquery[0m=[32m{{search_term}}[0m
[1m
Request ID [0m[33m6461441-8891117a-1cd4-4a5a-92bd-fb0c599073cc[0m
[1m- Name: [0m[36mList of breweries filtered by state[0m
[1m- URL: [0m[33mhttps://api.openbrewerydb.org/breweries?by_state={{state}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Parameter: [0m[33mby_state[0m=[32m{{state}}[0m
[1m
Request ID [0m[33m6461441-d15d1e5b-cfe8-485c-bd53-0a71d947ff26[0m
[1m- Name: [0m[36mList of breweries[0m
[1m- URL: [0m[33mhttps://api.openbrewerydb.org/breweries[33m[0m
[1m- Authorization: [0m[33mbearer[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m6461441-d41509d6-37cc-4544-95cd-2e7a7a88d13a[0m
[1m- Name: [0m[36mList of breweries filtered by name[0m
[1m- URL: [0m[33mhttps://api.openbrewerydb.org/breweries?by_name={{brewery_name}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Parameter: [0m[33mby_name[0m=[32m{{brewery_name}}[0m
[1m
Request ID [0m[33m6568367-427aa3b6-9a31-47e8-93b8-c7be2bd4aa9d[0m
[1m- Name: [0m[36mGet CurrentItems Statistics[0m
[1m- URL: [0m[33mhttp://monitoring.amazonaws.com/?Action=GetMetricStatistics&SignatureVersion=4&Version=2010-08-01&StartTime={{startTime}}&EndTime={{endTime}}&Period={{period}}&Statistics.member.1=Sum&Dimensions.member.1.Name=CacheClusterId&Dimensions.member.1.Value={{cacheClusterId}}&MetricName=CurrItems&Namespace=AWS%2FElastiCache[33m[0m
[1m- Authorization: [0m[33mawsv4[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mAction[0m=[32mGetMetricStatistics[0m
[1m- Parameter: [0m[33mSignatureVersion[0m=[32m4[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-08-01[0m
[1m- Parameter: [0m[33mStartTime[0m=[32m{{startTime}}[0m
[1m- Parameter: [0m[33mEndTime[0m=[32m{{endTime}}[0m
[1m- Parameter: [0m[33mPeriod[0m=[32m{{period}}[0m
[1m- Parameter: [0m[33mStatistics.member.1[0m=[32mSum[0m
[1m- Parameter: [0m[33mDimensions.member.1.Name[0m=[32mCacheClusterId[0m
[1m- Parameter: [0m[33mDimensions.member.1.Value[0m=[32m{{cacheClusterId}}[0m
[1m- Parameter: [0m[33mMetricName[0m=[32mCurrItems[0m
[1m- Parameter: [0m[33mNamespace[0m=[32mAWS%2FElastiCache[0m
[1m
Request ID [0m[33m6568367-53f95dbe-2f2d-45d0-b84e-3ea3457a6f13[0m
[1m- Name: [0m[36mGet CacheHits Statistics[0m
[1m- URL: [0m[33mhttp://monitoring.amazonaws.com/?Action=GetMetricStatistics&SignatureVersion=4&Version=2010-08-01&StartTime={{startTime}}&EndTime={{endTime}}&Period={{period}}&Statistics.member.1=Average&Dimensions.member.1.Name=CacheClusterId&Dimensions.member.1.Value={{cacheClusterId}}&MetricName=CacheHits&Namespace=AWS%2FElastiCache[33m[0m
[1m- Authorization: [0m[33mawsv4[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mAction[0m=[32mGetMetricStatistics[0m
[1m- Parameter: [0m[33mSignatureVersion[0m=[32m4[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-08-01[0m
[1m- Parameter: [0m[33mStartTime[0m=[32m{{startTime}}[0m
[1m- Parameter: [0m[33mEndTime[0m=[32m{{endTime}}[0m
[1m- Parameter: [0m[33mPeriod[0m=[32m{{period}}[0m
[1m- Parameter: [0m[33mStatistics.member.1[0m=[32mAverage[0m
[1m- Parameter: [0m[33mDimensions.member.1.Name[0m=[32mCacheClusterId[0m
[1m- Parameter: [0m[33mDimensions.member.1.Value[0m=[32m{{cacheClusterId}}[0m
[1m- Parameter: [0m[33mMetricName[0m=[32mCacheHits[0m
[1m- Parameter: [0m[33mNamespace[0m=[32mAWS%2FElastiCache[0m
[1m- Pre-Request Script: [0m[32mtry {
    var cacheNodeIdList = JSON.parse(pm.environment.get("cacheNodeIdList"))
    pm.environment.set("cacheClusterId", cacheNodeIdList[0])
    //Removing the item from top
    cacheNodeIdList.splice(0, 1);
    pm.environment.set("cacheNodeIdList", JSON.stringify(cacheNodeIdList))
}
catch (error) {
    throw error
}[0m
[1m
Request ID [0m[33m6568367-61613945-b541-4116-b640-76d61c65bde9[0m
[1m- Name: [0m[36mGet all clusters of a region[0m
[1m- URL: [0m[33mhttps://elasticache.{{region}}.amazonaws.com/?Action=DescribeCacheClusters&MaxRecords=100&ShowCacheNodeInfo=false&Version=2015-02-02[33m[0m
[1m- Authorization: [0m[33mawsv4[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mAction[0m=[32mDescribeCacheClusters[0m
[1m- Parameter: [0m[33mMaxRecords[0m=[32m100[0m
[1m- Parameter: [0m[33mShowCacheNodeInfo[0m=[32mfalse[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2015-02-02[0m
[1m- Pre-Request Script: [0m[32mvar currentDate = new Date()
var days = pm.environment.get("days")
currentDate.setDate(currentDate.getDate() - days)
pm.environment.set("startTime", currentDate)
pm.environment.set("endTime", new Date())
pm.environment.set("redundantCacheClustersList", JSON.stringify([]))[0m
[1m
Request ID [0m[33m6568367-d079f353-3c00-4221-927c-4350ae097ba2[0m
[1m- Name: [0m[36mGet CPUUtilization Statistics[0m
[1m- URL: [0m[33mhttp://monitoring.amazonaws.com/?Action=GetMetricStatistics&SignatureVersion=4&Version=2010-08-01&StartTime={{startTime}}&EndTime={{endTime}}&Period={{period}}&Statistics.member.1=Average&Dimensions.member.1.Name=CacheClusterId&Dimensions.member.1.Value={{cacheClusterId}}&MetricName=CPUUtilization&Namespace=AWS%2FElastiCache[33m[0m
[1m- Authorization: [0m[33mawsv4[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mAction[0m=[32mGetMetricStatistics[0m
[1m- Parameter: [0m[33mSignatureVersion[0m=[32m4[0m
[1m- Parameter: [0m[33mVersion[0m=[32m2010-08-01[0m
[1m- Parameter: [0m[33mStartTime[0m=[32m{{startTime}}[0m
[1m- Parameter: [0m[33mEndTime[0m=[32m{{endTime}}[0m
[1m- Parameter: [0m[33mPeriod[0m=[32m{{period}}[0m
[1m- Parameter: [0m[33mStatistics.member.1[0m=[32mAverage[0m
[1m- Parameter: [0m[33mDimensions.member.1.Name[0m=[32mCacheClusterId[0m
[1m- Parameter: [0m[33mDimensions.member.1.Value[0m=[32m{{cacheClusterId}}[0m
[1m- Parameter: [0m[33mMetricName[0m=[32mCPUUtilization[0m
[1m- Parameter: [0m[33mNamespace[0m=[32mAWS%2FElastiCache[0m
[1m
Request ID [0m[33m7853927-16e13b2d-a03e-4bb4-86e3-c179b2b17e91[0m
[1m- Name: [0m[36mGet Range TOP Recommendations[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/recommendations/?max_danceability={{getmaxDance}}&min_danceability={{getminDance}}&max_energy={{getmaxEnergy}}&min_energy={{getminEnergy}}&max_valence={{getmaxValence}}&min_valence={{getminValence}}&max_tempo={{getmaxTempo}}&min_tempo={{getminTempo}}&max_acoustic={{getmaxAcoustic}}&min_acoustic={{getminAcoustic}}&max_key={{getmaxKey}}&min_key={{getminKey}}&max_liveness={{getmaxLivenesse}}&min_liveness={{getminLiveness}}&max_loudness={{getmaxLoudness}}&min_loudness={{getminLoudness}}&max_speech={{getmaxSpeech}}&min_speech={{getminSpeech}}&max_instrumental={{getmaxInstrumental}}&min_instrumental={{getminInstrumental}}&limit={{rangenumber}}&seed_tracks={{rangeTopSongObject}}[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mmax_danceability[0m=[32m{{getmaxDance}}[0m
[1m- Parameter: [0m[33mmin_danceability[0m=[32m{{getminDance}}[0m
[1m- Parameter: [0m[33mmax_energy[0m=[32m{{getmaxEnergy}}[0m
[1m- Parameter: [0m[33mmin_energy[0m=[32m{{getminEnergy}}[0m
[1m- Parameter: [0m[33mmax_valence[0m=[32m{{getmaxValence}}[0m
[1m- Parameter: [0m[33mmin_valence[0m=[32m{{getminValence}}[0m
[1m- Parameter: [0m[33mmax_tempo[0m=[32m{{getmaxTempo}}[0m
[1m- Parameter: [0m[33mmin_tempo[0m=[32m{{getminTempo}}[0m
[1m- Parameter: [0m[33mmax_acoustic[0m=[32m{{getmaxAcoustic}}[0m
[1m- Parameter: [0m[33mmin_acoustic[0m=[32m{{getminAcoustic}}[0m
[1m- Parameter: [0m[33mmax_key[0m=[32m{{getmaxKey}}[0m
[1m- Parameter: [0m[33mmin_key[0m=[32m{{getminKey}}[0m
[1m- Parameter: [0m[33mmax_liveness[0m=[32m{{getmaxLivenesse}}[0m
[1m- Parameter: [0m[33mmin_liveness[0m=[32m{{getminLiveness}}[0m
[1m- Parameter: [0m[33mmax_loudness[0m=[32m{{getmaxLoudness}}[0m
[1m- Parameter: [0m[33mmin_loudness[0m=[32m{{getminLoudness}}[0m
[1m- Parameter: [0m[33mmax_speech[0m=[32m{{getmaxSpeech}}[0m
[1m- Parameter: [0m[33mmin_speech[0m=[32m{{getminSpeech}}[0m
[1m- Parameter: [0m[33mmax_instrumental[0m=[32m{{getmaxInstrumental}}[0m
[1m- Parameter: [0m[33mmin_instrumental[0m=[32m{{getminInstrumental}}[0m
[1m- Parameter: [0m[33mlimit[0m=[32m{{rangenumber}}[0m
[1m- Parameter: [0m[33mseed_tracks[0m=[32m{{rangeTopSongObject}}[0m
[1m- Pre-Request Script: [0m[32mvar value = pm.variables.get("counter");
// console.log(value);
// console.log(typeof value);

// if (value === "" || value !== 0){
//     pm.environment.set("counter", value);
// }
// else{
//     console.log("Value is Zero");
// }

var integer = parseInt(value, 10);
console.log(integer);
if (integer<=9) {
    console.log("Okay");

for (var i = integer; i <= integer; i++) {

var value = pm.variables.get("rangeTopSongID");
//console.log(value);
var nameArr = value.split(';');
//console.log(nameArr);
pm.environment.set("rangeTopSongObject", nameArr[i]);

//Dance
var value = pm.variables.get("maxDance");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxDance", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minDance");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminDance", nameArr[i]);


//Energy
var value = pm.variables.get("maxEnergy");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxEnergy", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minEnergy");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminEnergy", nameArr[i]);

//Speech
var value = pm.variables.get("maxSpeech");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxSpeech", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minSpeech");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminSpeech", nameArr[i]);

//Liveness
var value = pm.variables.get("maxLiveness");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxLivenesse", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minLiveness");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminLiveness", nameArr[i]);

//Key
var value = pm.variables.get("maxKey");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxKey", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minKey");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminKey", nameArr[i]);

//Acoustic
var value = pm.variables.get("maxAcoustic");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxAcoustic", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minAcoustic");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminAcoustic", nameArr[i]);

//Valence
var value = pm.variables.get("maxValence");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxValence", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minValence");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminValence", nameArr[i]);

//Tempo
var value = pm.variables.get("maxTempo");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxTempo", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minTempo");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminTempo", nameArr[i]);

//Loudness
var value = pm.variables.get("maxLoudness");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxLoudness", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minLoudness");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminLoudness", nameArr[i]);

//Instrumental
var value = pm.variables.get("maxInstrumental");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxInstrumental", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minInstrumental");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminInstrumental", nameArr[i]);

}

}
else{
    console.log("Not Okay");
}[0m
[1m
Request ID [0m[33m7853927-29a8bdcf-a475-48d0-9ea7-86d8dbc43fb9[0m
[1m- Name: [0m[36mCreate New Playlist TOP[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/users/{{user_id}}/playlists[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"name":"{{string2}}",
	"public":"true"
}[0m[0m
[1m- Pre-Request Script: [0m[32m//var string1 = pm.variables.get("string1");[0m
[1m
Request ID [0m[33m7853927-2f49a646-a3a5-45ed-9a4c-8e4d66164796[0m
[1m- Name: [0m[36mExtract Fetures From Tracks[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/audio-features?ids={{ids_str}}[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mids[0m=[32m{{ids_str}}[0m
[1m
Request ID [0m[33m7853927-3a274170-ed16-4d84-a348-d631f69b7092[0m
[1m- Name: [0m[36mExtract Fetures From TOP Tracks[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/audio-features?ids={{topIds}}[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mids[0m=[32m{{topIds}}[0m
[1m
Request ID [0m[33m7853927-4ce1e59d-a992-4311-89b1-632319027342[0m
[1m- Name: [0m[36mGet Tracks From Playlist[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/playlists/{{foundPlaylistID}}/tracks[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Pre-Request Script: [0m[32m// var previousRequest = JSON.parse(globals.previousRequest),
//     webhookRequestData = previousRequest.data;

// console.log(JSON.stringify(webhookRequestData));

// pm.environment.set("user_query", webhookRequestData.text );
// //pm.environment.set("response_url", webhookRequestData.response_url );

// console.log(pm.environment.get("user_query"));

// var value = webhookRequestData.text;
// var nameArr = value.split(',');

// var input1 = nameArr[0];
// pm.variables.set("string1", input1);
// //console.log(input1);
// var input2 = nameArr[1];
// pm.variables.set("string2", input2);
// //console.log(input2);
// var input3 = nameArr[2];
// pm.variables.set("string3", input3);
// //console.log(input3);
// var input4 = nameArr[3];
// pm.environment.set("string4", input4);







//console.log(input4);
//console.log(pm.environment.get("response_url"));



// var previousRequest = JSON.parse(globals.previousRequest),
// webhookRequestData = previousRequest.data;
// JSON.parse(globals.previousRequest)
// console.log( previousRequest.data,'previous request')
// //webhookRequestData contains the data sent to your webhook.
// // console.log(JSON.stringify(webhookRequestData));

// //var previousRequest = JSON.parse(globals.previousRequest.data.text),
// //webhookRequestData = previousRequest;

// //webhookRequestData contains the data sent to your webhook.
// //console.log(JSON.stringify(webhookRequestData));

// var value = previousRequest.data.text;

// var nameArr = value.split(',');

// var input1 = nameArr[0];
// pm.variables.set("string1", input1);
// //console.log(input1);
// var input2 = nameArr[1];
// pm.variables.set("string2", input2);
// //console.log(input2);
// var input3 = nameArr[2];
// pm.variables.set("string3", input3);
// //console.log(input3);
// //var input4 = nameArr[3];
// //console.log(input4);




// //pm.environment.set("string4", input4);


//  for (var i = 0; i < nameArr.length-2; i++) {
//       //console.log(nameArr[i]);"\n"
//       ppm.environment.set("string[i]", nameArr[i]);
//   }

// //console.log(nameArr[0]);
[0m
[1m
Request ID [0m[33m7853927-5ac8573a-a039-4806-be5f-fb4b063917cf[0m
[1m- Name: [0m[36mGet Users Top Tracks[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/me/top/tracks?limit=50[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{toptoken}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mlimit[0m=[32m50[0m
[1m
Request ID [0m[33m7853927-61c64ebf-601d-4209-a21e-487644e6fcc2[0m
[1m- Name: [0m[36mExtract Range Fetures From Tracks[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/audio-features?ids={{ids_str}}[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mids[0m=[32m{{ids_str}}[0m
[1m- Pre-Request Script: [0m[32m//DANCE
        var arrmax = [];
        var arrmin = [];

        for ( i = 0; i < 50; i = i + 5){
            j = i+5;
            console.log(i);
                var value1 = pm.variables.get("featuresDance");
        
        var nameArr = value1.split(',');
        //console.log(nameArr);
        var newArr = nameArr.slice(i,j);
        //console.log(newArr);
        var max = Math.max.apply(Math, newArr);
        arrmax.push(max);
        //console.log(max+" Max");
        var mini = Math.min.apply(Math, newArr);
        arrmin.push(mini);
        //console.log(mini+" Mini");
        }
        //pm.environment.unset("maxDance");
        pm.environment.set("maxDance", arrmax.join(','));
        //pm.environment.unset("minDance");
        pm.environment.set("minDance", arrmin.join(','));

//Energy        
        var arrmax = [];
        var arrmin = [];

        for ( i = 0; i < 50; i = i + 5){
            j = i+5;
            console.log(i);
                var value1 = pm.variables.get("featuresEnergy");
        
        var nameArr = value1.split(',');
        //console.log(nameArr);
        var newArr = nameArr.slice(i,j);
        //console.log(newArr);
        var max = Math.max.apply(Math, newArr);
        arrmax.push(max);
        //console.log(max+" Max");
        var mini = Math.min.apply(Math, newArr);
        arrmin.push(mini);
        //console.log(mini+" Mini");
        }
        //pm.environment.unset("maxEnergy");
        pm.environment.set("maxEnergy", arrmax.join(','));
        pm.environment.set("minEnergy", arrmin.join(','));
        
//Instrumental
        var arrmax = [];
        var arrmin = [];

        for ( i = 0; i < 50; i = i + 5){
            j = i+5;
            console.log(i);
                var value1 = pm.variables.get("featuresInstrumental");
        
        var nameArr = value1.split(',');
        //console.log(nameArr);
        var newArr = nameArr.slice(i,j);
        //console.log(newArr);
        var max = Math.max.apply(Math, newArr);
        arrmax.push(max);
        //console.log(max+" Max");
        var mini = Math.min.apply(Math, newArr);
        arrmin.push(mini);
        //console.log(mini+" Mini");
        }
        pm.environment.set("maxInstrumental", arrmax.join(','));
        pm.environment.set("minInstrumental", arrmin.join(','));
//Valence 
        var arrmax = [];
        var arrmin = [];

        for ( i = 0; i < 50; i = i + 5){
            j = i+5;
            console.log(i);
                var value1 = pm.variables.get("featuresValence");
        
        var nameArr = value1.split(',');
        //console.log(nameArr);
        var newArr = nameArr.slice(i,j);
        //console.log(newArr);
        var max = Math.max.apply(Math, newArr);
        arrmax.push(max);
        //console.log(max+" Max");
        var mini = Math.min.apply(Math, newArr);
        arrmin.push(mini);
        //console.log(mini+" Mini");
        }
        pm.environment.set("maxValence", arrmax.join(','));
        pm.environment.set("minValence", arrmin.join(','));
//Tempo
        var arrmax = [];
        var arrmin = [];

        for ( i = 0; i < 50; i = i + 5){
            j = i+5;
            console.log(i);
                var value1 = pm.variables.get("featuresTempo");
        
        var nameArr = value1.split(',');
        //console.log(nameArr);
        var newArr = nameArr.slice(i,j);
        //console.log(newArr);
        var max = Math.max.apply(Math, newArr);
        arrmax.push(max);
        //console.log(max+" Max");
        var mini = Math.min.apply(Math, newArr);
        arrmin.push(mini);
        //console.log(mini+" Mini");
        }
        pm.environment.set("maxTempo", arrmax.join(','));
        pm.environment.set("minTempo", arrmin.join(','));
//Speech
        var arrmax = [];
        var arrmin = [];

        for ( i = 0; i < 50; i = i + 5){
            j = i+5;
            console.log(i);
                var value1 = pm.variables.get("featuresSpeech");
        
        var nameArr = value1.split(',');
        //console.log(nameArr);
        var newArr = nameArr.slice(i,j);
        //console.log(newArr);
        var max = Math.max.apply(Math, newArr);
        arrmax.push(max);
        //console.log(max+" Max");
        var mini = Math.min.apply(Math, newArr);
        arrmin.push(mini);
        //console.log(mini+" Mini");
        }
        pm.environment.set("maxSpeech", arrmax.join(','));
        pm.environment.set("minSpeech", arrmin.join(','));
//Loudness
        var arrmax = [];
        var arrmin = [];

        for ( i = 0; i < 50; i = i + 5){
            j = i+5;
            console.log(i);
                var value1 = pm.variables.get("featuresLoudness");
        
        var nameArr = value1.split(',');
        //console.log(nameArr);
        var newArr = nameArr.slice(i,j);
        //console.log(newArr);
        var max = Math.max.apply(Math, newArr);
        arrmax.push(max);
        //console.log(max+" Max");
        var mini = Math.min.apply(Math, newArr);
        arrmin.push(mini);
        //console.log(mini+" Mini");
        }
        pm.environment.set("maxLoudness", arrmax.join(','));
        pm.environment.set("minLoudness", arrmin.join(','));[0m
[1m
Request ID [0m[33m7853927-7bc3a1e5-5379-4cf6-8b01-536a1e5b792e[0m
[1m- Name: [0m[36mCreate New Playlist[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/users/{{user_id}}/playlists[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"name":"{{string2}}",
	"public":"true"
}[0m[0m
[1m- Pre-Request Script: [0m[32m//var string1 = pm.variables.get("string1");[0m
[1m
Request ID [0m[33m7853927-7f7010ba-38a6-44af-8c58-439a2eee8527[0m
[1m- Name: [0m[36mPost Playlist to Slack[0m
[1m- URL: [0m[33m{{slackwebhook}}[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"text":"{{playlist_url}}"
}[0m[0m
[1m
Request ID [0m[33m7853927-7fc1fcfe-38a0-40b6-81fc-542af5aaa85e[0m
[1m- Name: [0m[36mSTOP[0m
[1m- URL: [0m[33mhttps://api.getpostman.com/collections[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m7853927-8b333738-70b2-463d-a5c5-d17d8f02663d[0m
[1m- Name: [0m[36mGet Playlist Url[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/users/{{user_id}}/playlists[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m7853927-8dd82621-d454-4aee-86bb-2a81212fc611[0m
[1m- Name: [0m[36mAdd Range Songs To Playlists[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/playlists/{{playlist_id1}}/tracks?uris={{rangeRecArr}}[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Parameter: [0m[33muris[0m=[32m{{rangeRecArr}}[0m
[1m
Request ID [0m[33m7853927-9b854768-ff11-4ac2-a37e-81662ac4c7c9[0m
[1m- Name: [0m[36mSearch For Playlist[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/users/{{user_id}}/playlists?limit=50[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mlimit[0m=[32m50[0m
[1m- Pre-Request Script: [0m[32m// var previousRequest = JSON.parse(globals.previousRequest),
//     webhookRequestData = previousRequest.data;

// console.log(JSON.stringify(webhookRequestData));

// pm.environment.set("user_query", webhookRequestData.text );
// //pm.environment.set("response_url", webhookRequestData.response_url );

// console.log(pm.environment.get("user_query"));

// var value = webhookRequestData.text;
// var nameArr = value.split(',');

// var input1 = nameArr[0];
// pm.variables.set("string1", input1);
// //console.log(input1);
// var input2 = nameArr[1];
// pm.variables.set("string2", input2);
// //console.log(input2);
// var input3 = nameArr[2];
// pm.variables.set("string3", input3);
// //console.log(input3);
// var input4 = nameArr[3];
// pm.environment.set("string4", input4);







// //console.log(input4);
// //console.log(pm.environment.get("response_url"));



// // var previousRequest = JSON.parse(globals.previousRequest),
// // webhookRequestData = previousRequest.data;
// // JSON.parse(globals.previousRequest)
// // console.log( previousRequest.data,'previous request')
// // //webhookRequestData contains the data sent to your webhook.
// // // console.log(JSON.stringify(webhookRequestData));

// // //var previousRequest = JSON.parse(globals.previousRequest.data.text),
// // //webhookRequestData = previousRequest;

// // //webhookRequestData contains the data sent to your webhook.
// // //console.log(JSON.stringify(webhookRequestData));

// // var value = previousRequest.data.text;

// // var nameArr = value.split(',');

// // var input1 = nameArr[0];
// // pm.variables.set("string1", input1);
// // //console.log(input1);
// // var input2 = nameArr[1];
// // pm.variables.set("string2", input2);
// // //console.log(input2);
// // var input3 = nameArr[2];
// // pm.variables.set("string3", input3);
// // //console.log(input3);
// // //var input4 = nameArr[3];
// // //console.log(input4);




// // //pm.environment.set("string4", input4);


// //  for (var i = 0; i < nameArr.length-2; i++) {
// //       //console.log(nameArr[i]);"\n"
// //       ppm.environment.set("string[i]", nameArr[i]);
// //   }

// // //console.log(nameArr[0]);
[0m
[1m
Request ID [0m[33m7853927-9bc76c52-a0dd-4847-89cd-f993b6675da3[0m
[1m- Name: [0m[36mGet Recommendations[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/recommendations/?seed_tracks={{getid}}&target_danceability={{getRecDance}}&target_energy={{getRecEnergy}}&target_valence={{getRecValence}}&target_tempo={{getRecTempo}}&target_acoustic={{getRecAcoustic}}&target_key={{getRecKey}}&target_liveness={{getRecLiveness}}&target_loudness={{getRecLoudness}}&target_speech={{getRecSpeech}}&target_instrumental={{getRecInstrumental}}&limit={{number}}[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mseed_tracks[0m=[32m{{getid}}[0m
[1m- Parameter: [0m[33mtarget_danceability[0m=[32m{{getRecDance}}[0m
[1m- Parameter: [0m[33mtarget_energy[0m=[32m{{getRecEnergy}}[0m
[1m- Parameter: [0m[33mtarget_valence[0m=[32m{{getRecValence}}[0m
[1m- Parameter: [0m[33mtarget_tempo[0m=[32m{{getRecTempo}}[0m
[1m- Parameter: [0m[33mtarget_acoustic[0m=[32m{{getRecAcoustic}}[0m
[1m- Parameter: [0m[33mtarget_key[0m=[32m{{getRecKey}}[0m
[1m- Parameter: [0m[33mtarget_liveness[0m=[32m{{getRecLiveness}}[0m
[1m- Parameter: [0m[33mtarget_loudness[0m=[32m{{getRecLoudness}}[0m
[1m- Parameter: [0m[33mtarget_speech[0m=[32m{{getRecSpeech}}[0m
[1m- Parameter: [0m[33mtarget_instrumental[0m=[32m{{getRecInstrumental}}[0m
[1m- Parameter: [0m[33mlimit[0m=[32m{{number}}[0m
[1m- Pre-Request Script: [0m[32m//IF YOU CHANGE REQUEST NAME - PLEASE CHANGE setNextRequest ASWELL

var value = pm.variables.get("counter");
// console.log(value);
// console.log(typeof value);

// if (value === "" || value !== 0){
//     pm.environment.set("counter", value);
// }
// else{
//     console.log("Value is Zero");
// }

var integer = parseInt(value, 10);
console.log(integer);
if (integer<=49) {
    console.log("Okay");

for (var i = integer; i <= integer; i++) {

console.log("These are ids_str");
var value = pm.variables.get("ids_str");
var forConsole = pm.variables.get("ids_str");
        console.log(forConsole);
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
console.log("These are getid in Params");
//pm.environment.unset("getid");
pm.environment.set("getid", nameArr[i]);
var forConsole = pm.variables.get("getid");
        console.log(forConsole);

var value = pm.variables.get("featuresInstrumental");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
//pm.environment.unset("getRecInstrumental");
pm.environment.set("getRecInstrumental", nameArr[i]);

var value = pm.variables.get("featuresDance");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
//pm.environment.unset("getRecDance");
pm.environment.set("getRecDance", nameArr[i]);

var value = pm.variables.get("featuresEnergy");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
//pm.environment.unset("getRecEnergy");
pm.environment.set("getRecEnergy", nameArr[i]);

var value = pm.variables.get("featuresValence");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
//pm.environment.unset("getRecValence");
pm.environment.set("getRecValence", nameArr[i]);

var value = pm.variables.get("featuresTempo");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
//pm.environment.unset("getRecTempo");
pm.environment.set("getRecTempo", nameArr[i]);

var value = pm.variables.get("featuresAcoustic");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
//pm.environment.unset("getRecAcoustic");
pm.environment.set("getRecAcoustic", nameArr[i]);

var value = pm.variables.get("featuresKey");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
//pm.environment.unset("getRecKey");
pm.environment.set("getRecKey", nameArr[i]);

var value = pm.variables.get("featuresLiveness");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
//pm.environment.unset("getRecLiveness");
pm.environment.set("getRecLiveness", nameArr[i]);

var value = pm.variables.get("featuresLoudness");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
//pm.environment.unset("getRecLoudness");
pm.environment.set("getRecLoudness", nameArr[i]);

var value = pm.variables.get("featuresSpeech");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
//pm.environment.unset("getRecSpeech");
pm.environment.set("getRecSpeech", nameArr[i]);

}

}
else{
    console.log("Not Okay");
}[0m
[1m
Request ID [0m[33m7853927-9f009fac-f6c6-4003-8a5c-6e0a0328c28b[0m
[1m- Name: [0m[36mExtract Range Fetures From TOP Tracks[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/audio-features?ids={{topIds}}[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mids[0m=[32m{{topIds}}[0m
[1m- Pre-Request Script: [0m[32m//DANCE
        var arrmax = [];
        var arrmin = [];

        for ( i = 0; i < 50; i = i + 5){
            j = i+5;
            //console.log(i);
                var value1 = pm.variables.get("featuresDance");
        
        var nameArr = value1.split(',');
        //console.log(nameArr);
        var newArr = nameArr.slice(i,j);
        //console.log(newArr);
        var max = Math.max.apply(Math, newArr);
        arrmax.push(max);
        //console.log(max+" Max");
        var mini = Math.min.apply(Math, newArr);
        arrmin.push(mini);
        //console.log(mini+" Mini");
        }
        //pm.environment.unset("maxDance");
        pm.environment.set("maxDance", arrmax.join(','));
        //pm.environment.unset("minDance");
        pm.environment.set("minDance", arrmin.join(','));

//Energy        
        var arrmax = [];
        var arrmin = [];

        for ( i = 0; i < 50; i = i + 5){
            j = i+5;
            //console.log(i);
                var value1 = pm.variables.get("featuresEnergy");
        
        var nameArr = value1.split(',');
        //console.log(nameArr);
        var newArr = nameArr.slice(i,j);
        //console.log(newArr);
        var max = Math.max.apply(Math, newArr);
        arrmax.push(max);
        //console.log(max+" Max");
        var mini = Math.min.apply(Math, newArr);
        arrmin.push(mini);
        //console.log(mini+" Mini");
        }
        //pm.environment.unset("maxEnergy");
        pm.environment.set("maxEnergy", arrmax.join(','));
        pm.environment.set("minEnergy", arrmin.join(','));
        
//Instrumental
        var arrmax = [];
        var arrmin = [];

        for ( i = 0; i < 50; i = i + 5){
            j = i+5;
            //console.log(i);
                var value1 = pm.variables.get("featuresInstrumental");
        
        var nameArr = value1.split(',');
        //console.log(nameArr);
        var newArr = nameArr.slice(i,j);
        //console.log(newArr);
        var max = Math.max.apply(Math, newArr);
        arrmax.push(max);
        //console.log(max+" Max");
        var mini = Math.min.apply(Math, newArr);
        arrmin.push(mini);
        //console.log(mini+" Mini");
        }
        pm.environment.set("maxInstrumental", arrmax.join(','));
        pm.environment.set("minInstrumental", arrmin.join(','));
//Valence 
        var arrmax = [];
        var arrmin = [];

        for ( i = 0; i < 50; i = i + 5){
            j = i+5;
            //console.log(i);
                var value1 = pm.variables.get("featuresValence");
        
        var nameArr = value1.split(',');
        //console.log(nameArr);
        var newArr = nameArr.slice(i,j);
        //console.log(newArr);
        var max = Math.max.apply(Math, newArr);
        arrmax.push(max);
        //console.log(max+" Max");
        var mini = Math.min.apply(Math, newArr);
        arrmin.push(mini);
        //console.log(mini+" Mini");
        }
        pm.environment.set("maxValence", arrmax.join(','));
        pm.environment.set("minValence", arrmin.join(','));
//Tempo
        var arrmax = [];
        var arrmin = [];

        for ( i = 0; i < 50; i = i + 5){
            j = i+5;
            //console.log(i);
                var value1 = pm.variables.get("featuresTempo");
        
        var nameArr = value1.split(',');
        //console.log(nameArr);
        var newArr = nameArr.slice(i,j);
        //console.log(newArr);
        var max = Math.max.apply(Math, newArr);
        arrmax.push(max);
        //console.log(max+" Max");
        var mini = Math.min.apply(Math, newArr);
        arrmin.push(mini);
        //console.log(mini+" Mini");
        }
        pm.environment.set("maxTempo", arrmax.join(','));
        pm.environment.set("minTempo", arrmin.join(','));
//Speech
        var arrmax = [];
        var arrmin = [];

        for ( i = 0; i < 50; i = i + 5){
            j = i+5;
            //console.log(i);
                var value1 = pm.variables.get("featuresSpeech");
        
        var nameArr = value1.split(',');
        //console.log(nameArr);
        var newArr = nameArr.slice(i,j);
        //console.log(newArr);
        var max = Math.max.apply(Math, newArr);
        arrmax.push(max);
        //console.log(max+" Max");
        var mini = Math.min.apply(Math, newArr);
        arrmin.push(mini);
        //console.log(mini+" Mini");
        }
        pm.environment.set("maxSpeech", arrmax.join(','));
        pm.environment.set("minSpeech", arrmin.join(','));
//Loudness
        var arrmax = [];
        var arrmin = [];

        for ( i = 0; i < 50; i = i + 5){
            j = i+5;
            console.log(i);
                var value1 = pm.variables.get("featuresLoudness");
        
        var nameArr = value1.split(',');
        //console.log(nameArr);
        var newArr = nameArr.slice(i,j);
        //console.log(newArr);
        var max = Math.max.apply(Math, newArr);
        arrmax.push(max);
        //console.log(max+" Max");
        var mini = Math.min.apply(Math, newArr);
        arrmin.push(mini);
        //console.log(mini+" Mini");
        }
        pm.environment.set("maxLoudness", arrmax.join(','));
        pm.environment.set("minLoudness", arrmin.join(','));[0m
[1m
Request ID [0m[33m7853927-aa2b130a-c1d5-4c68-8b72-9af0bf1c9e50[0m
[1m- Name: [0m[36mDecision Maker[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/playlists/{{playlist_id}}/tracks[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Pre-Request Script: [0m[32mvar previousRequest = JSON.parse(globals.previousRequest),
    webhookRequestData = previousRequest.data;

console.log(JSON.stringify(webhookRequestData));

pm.environment.set("user_query", webhookRequestData.text );
//pm.environment.set("response_url", webhookRequestData.response_url );

console.log(pm.environment.get("user_query"));

var value = webhookRequestData.text;
var nameArr = value.split(',');

var input1 = nameArr[0];
pm.variables.set("string1", input1);
//console.log(input1);
var input2 = nameArr[1];
pm.variables.set("string2", input2);
//console.log(input2);
var input3 = nameArr[2];
pm.variables.set("string3", input3);
//console.log(input3);[0m
[1m
Request ID [0m[33m7853927-b03e8388-2a14-44ab-8587-ac6f29ba7b9e[0m
[1m- Name: [0m[36mGet Users Saved Tracks List[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/me/tracks?limit=50[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mlimit[0m=[32m50[0m
[1m- Pre-Request Script: [0m[32m// var string1 = pm.variables.get("string1");

// if (string1 === "name1") {
//     console.log("Now you can make decision- Used");
// }

// var string1 = pm.variables.get("string1");
// console.log(string1);
// var string2 = pm.variables.get("string2");
// console.log(string2);
// var string3 = pm.variables.get("string3");
// console.log(string3);
// var string4 = pm.variables.get("string4");
// console.log(string4);

[0m
[1m
Request ID [0m[33m7853927-b9957a6d-e814-457d-bbd4-c47cb4d45a31[0m
[1m- Name: [0m[36mGet Range Recommendations[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/recommendations/?max_danceability={{getmaxDance}}&min_danceability={{getminDance}}&max_energy={{getmaxEnergy}}&min_energy={{getminEnergy}}&max_valence={{getmaxValence}}&min_valence={{getminValence}}&max_tempo={{getmaxTempo}}&min_tempo={{getminTempo}}&max_acoustic={{getmaxAcoustic}}&min_acoustic={{getminAcoustic}}&max_key={{getmaxKey}}&min_key={{getminKey}}&max_liveness={{getmaxLivenesse}}&min_liveness={{getminLiveness}}&max_loudness={{getmaxLoudness}}&min_loudness={{getminLoudness}}&max_speech={{getmaxSpeech}}&min_speech={{getminSpeech}}&max_instrumental={{getmaxInstrumental}}&min_instrumental={{getminInstrumental}}&limit={{rangenumber}}&seed_tracks={{rangeSongObject}}[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mmax_danceability[0m=[32m{{getmaxDance}}[0m
[1m- Parameter: [0m[33mmin_danceability[0m=[32m{{getminDance}}[0m
[1m- Parameter: [0m[33mmax_energy[0m=[32m{{getmaxEnergy}}[0m
[1m- Parameter: [0m[33mmin_energy[0m=[32m{{getminEnergy}}[0m
[1m- Parameter: [0m[33mmax_valence[0m=[32m{{getmaxValence}}[0m
[1m- Parameter: [0m[33mmin_valence[0m=[32m{{getminValence}}[0m
[1m- Parameter: [0m[33mmax_tempo[0m=[32m{{getmaxTempo}}[0m
[1m- Parameter: [0m[33mmin_tempo[0m=[32m{{getminTempo}}[0m
[1m- Parameter: [0m[33mmax_acoustic[0m=[32m{{getmaxAcoustic}}[0m
[1m- Parameter: [0m[33mmin_acoustic[0m=[32m{{getminAcoustic}}[0m
[1m- Parameter: [0m[33mmax_key[0m=[32m{{getmaxKey}}[0m
[1m- Parameter: [0m[33mmin_key[0m=[32m{{getminKey}}[0m
[1m- Parameter: [0m[33mmax_liveness[0m=[32m{{getmaxLivenesse}}[0m
[1m- Parameter: [0m[33mmin_liveness[0m=[32m{{getminLiveness}}[0m
[1m- Parameter: [0m[33mmax_loudness[0m=[32m{{getmaxLoudness}}[0m
[1m- Parameter: [0m[33mmin_loudness[0m=[32m{{getminLoudness}}[0m
[1m- Parameter: [0m[33mmax_speech[0m=[32m{{getmaxSpeech}}[0m
[1m- Parameter: [0m[33mmin_speech[0m=[32m{{getminSpeech}}[0m
[1m- Parameter: [0m[33mmax_instrumental[0m=[32m{{getmaxInstrumental}}[0m
[1m- Parameter: [0m[33mmin_instrumental[0m=[32m{{getminInstrumental}}[0m
[1m- Parameter: [0m[33mlimit[0m=[32m{{rangenumber}}[0m
[1m- Parameter: [0m[33mseed_tracks[0m=[32m{{rangeSongObject}}[0m
[1m- Pre-Request Script: [0m[32mvar value = pm.variables.get("counter");
// console.log(value);
// console.log(typeof value);

// if (value === "" || value !== 0){
//     pm.environment.set("counter", value);
// }
// else{
//     console.log("Value is Zero");
// }

var integer = parseInt(value, 10);
console.log(integer);
if (integer<=9) {
    console.log("Okay");

for (var i = integer; i <= integer; i++) {

var value = pm.variables.get("rangeSongID");
//console.log(value);
var nameArr = value.split(';');
//console.log(nameArr);
pm.environment.set("rangeSongObject", nameArr[i]);

      

//Dance
var value = pm.variables.get("maxDance");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxDance", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minDance");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminDance", nameArr[i]);


//Energy
var value = pm.variables.get("maxEnergy");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxEnergy", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minEnergy");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminEnergy", nameArr[i]);

//Speech
var value = pm.variables.get("maxSpeech");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxSpeech", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minSpeech");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminSpeech", nameArr[i]);

//Liveness
var value = pm.variables.get("maxLiveness");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxLivenesse", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minLiveness");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminLiveness", nameArr[i]);

//Key
var value = pm.variables.get("maxKey");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxKey", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minKey");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminKey", nameArr[i]);

//Acoustic
var value = pm.variables.get("maxAcoustic");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxAcoustic", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minAcoustic");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminAcoustic", nameArr[i]);

//Valence
var value = pm.variables.get("maxValence");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxValence", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minValence");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminValence", nameArr[i]);

//Tempo
var value = pm.variables.get("maxTempo");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxTempo", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minTempo");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminTempo", nameArr[i]);

//Loudness
var value = pm.variables.get("maxLoudness");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxLoudness", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minLoudness");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminLoudness", nameArr[i]);

//Instrumental
var value = pm.variables.get("maxInstrumental");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getmaxInstrumental", nameArr[i]);
////////////////////////////////////////////////////
var value = pm.variables.get("minInstrumental");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getminInstrumental", nameArr[i]);

}

}
else{
    console.log("Not Okay");
}[0m
[1m
Request ID [0m[33m7853927-b9ce696b-bdeb-4f36-a4ee-a4c81c9337b9[0m
[1m- Name: [0m[36mTop Tracks[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/me/top/tracks?limit=50[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{toptoken}}[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mlimit[0m=[32m50[0m
[1m
Request ID [0m[33m7853927-d4d9ae64-91ab-447a-979f-79ec1423e608[0m
[1m- Name: [0m[36mAdd TOP Songs To Playlists[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/playlists/{{playlist_id1}}/tracks?uris={{recsTopArr}}[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Parameter: [0m[33muris[0m=[32m{{recsTopArr}}[0m
[1m
Request ID [0m[33m7853927-db3765ba-65ec-4346-912d-395507e1c61d[0m
[1m- Name: [0m[36mAdd Songs To Playlists[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/playlists/{{playlist_id1}}/tracks?uris={{recsArr}}[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Parameter: [0m[33muris[0m=[32m{{recsArr}}[0m
[1m
Request ID [0m[33m7853927-dd4d4263-8bbc-4288-8169-c11907921b8a[0m
[1m- Name: [0m[36mAdd TOP Range Songs To Playlists[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/playlists/{{playlist_id1}}/tracks?uris={{rangeTopRecArr}}[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Parameter: [0m[33muris[0m=[32m{{rangeTopRecArr}}[0m
[1m
Request ID [0m[33m7853927-fa478566-7730-4130-9dab-9724416df6a0[0m
[1m- Name: [0m[36mGet Recommendations from TOP Tracks[0m
[1m- URL: [0m[33mhttps://api.spotify.com/v1/recommendations/?seed_tracks={{getid}}&target_danceability={{getRecDance}}&target_energy={{getRecEnergy}}&target_valence={{getRecValence}}&target_tempo={{getRecTempo}}&target_acoustic={{getRecAcoustic}}&target_key={{getRecKey}}&target_liveness={{getRecLiveness}}&target_loudness={{getRecLoudness}}&target_speech={{getRecSpeech}}&target_instrumental={{getRecInstrumental}}&limit={{number}}[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33maccessToken[0m: [32m{{token}}[0m
  [1m- [0m[33mtokenType[0m: [32mBearer[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mseed_tracks[0m=[32m{{getid}}[0m
[1m- Parameter: [0m[33mtarget_danceability[0m=[32m{{getRecDance}}[0m
[1m- Parameter: [0m[33mtarget_energy[0m=[32m{{getRecEnergy}}[0m
[1m- Parameter: [0m[33mtarget_valence[0m=[32m{{getRecValence}}[0m
[1m- Parameter: [0m[33mtarget_tempo[0m=[32m{{getRecTempo}}[0m
[1m- Parameter: [0m[33mtarget_acoustic[0m=[32m{{getRecAcoustic}}[0m
[1m- Parameter: [0m[33mtarget_key[0m=[32m{{getRecKey}}[0m
[1m- Parameter: [0m[33mtarget_liveness[0m=[32m{{getRecLiveness}}[0m
[1m- Parameter: [0m[33mtarget_loudness[0m=[32m{{getRecLoudness}}[0m
[1m- Parameter: [0m[33mtarget_speech[0m=[32m{{getRecSpeech}}[0m
[1m- Parameter: [0m[33mtarget_instrumental[0m=[32m{{getRecInstrumental}}[0m
[1m- Parameter: [0m[33mlimit[0m=[32m{{number}}[0m
[1m- Pre-Request Script: [0m[32mvar value = pm.variables.get("counter");
// console.log(value);
// console.log(typeof value);

// if (value === "" || value !== 0){
//     pm.environment.set("counter", value);
// }
// else{
//     console.log("Value is Zero");
// }

var integer = parseInt(value, 10);
console.log(integer);
if (integer<=49) {
    console.log("Okay");

for (var i = integer; i <= integer; i++) {

var value = pm.variables.get("topIds");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getid", nameArr[i]);

var value = pm.variables.get("featuresInstrumental");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getRecInstrumental", nameArr[i]);

var value = pm.variables.get("featuresDance");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getRecDance", nameArr[i]);

var value = pm.variables.get("featuresEnergy");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getRecEnergy", nameArr[i]);

var value = pm.variables.get("featuresValence");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getRecValence", nameArr[i]);

var value = pm.variables.get("featuresTempo");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getRecTempo", nameArr[i]);

var value = pm.variables.get("featuresAcoustic");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getRecAcoustic", nameArr[i]);

var value = pm.variables.get("featuresKey");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getRecKey", nameArr[i]);

var value = pm.variables.get("featuresLiveness");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getRecLiveness", nameArr[i]);

var value = pm.variables.get("featuresLoudness");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getRecLoudness", nameArr[i]);

var value = pm.variables.get("featuresSpeech");
//console.log(value);
var nameArr = value.split(',');
//console.log(nameArr);
pm.environment.set("getRecSpeech", nameArr[i]);

}

}
else{
    console.log("Not Okay");
}[0m
[1m
Request ID [0m[33m7865888-aaebeb02-5512-4a21-9bf2-5813afa56f68[0m
[1m- Name: [0m[36mVisualizer table[0m
[1m- URL: [0m[33mhttps://postman-echo.com/post[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"contacts": [
		{
			"name": "{{$randomFullName}}",
			"email": "{{$randomEmail}}"
		},
		{
			"name": "{{$randomFullName}}",
			"email": "{{$randomEmail}}"
		},
		{
			"name": "{{$randomFullName}}",
			"email": "{{$randomEmail}}"
		},
		{
			"name": "{{$randomFullName}}",
			"email": "{{$randomEmail}}"
		}
		]
}
		[0m[0m
[1m
Request ID [0m[33m7865888-f187d7f6-e7a8-4a80-9341-90accc2b34a2[0m
[1m- Name: [0m[36mVisualizer Bar chart[0m
[1m- URL: [0m[33mhttps://postman-echo.com/post[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"content":
	[
	 {{$randomInt}},
	 {{$randomInt}},
	 {{$randomInt}},
	 {{$randomInt}}
		
	]
}[0m[0m
[1m
Request ID [0m[33m8140651-1287ff8d-1eec-4a3b-9589-f62c3b42509a[0m
[1m- Name: [0m[36mSide Load JSRSASign [0m
[1m- URL: [0m[33mhttp://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m8140651-60e7082b-cd42-4e65-a739-1ab8d48990c3[0m
[1m- Name: [0m[36mGoogle Get Token[0m
[1m- URL: [0m[33mhttps://oauth2.googleapis.com/token[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m- Pre-Request Script: [0m[32mvar navigator = {};
var window = {};
eval(pm.environment.get("jsrsasign-js"));

var scope = pm.environment.get('scope');
var iss = pm.environment.get('iss');
var privateKey = pm.environment.get('privateKey');

const header = {"alg" : "RS256", "typ" : "JWT"};

const claimSet =
{
  "iss": iss,
  "scope": scope ,
  "aud":"https://oauth2.googleapis.com/token",
  "exp":KJUR.jws.IntDate.get("now + 1hour").toString(),
  "iat": KJUR.jws.IntDate.get("now").toString()
}

console.log(`header: ${ JSON.stringify(header)}`);
console.log(`claim set: ${ JSON.stringify(claimSet) }`);

var jwt =  KJUR.jws.JWS.sign(null, header, claimSet, privateKey);
console.log(jwt);

pm.environment.set('jwt', jwt);[0m
[1m
Request ID [0m[33m8140651-27b9311b-fa00-440c-b2c6-002607e9072a[0m
[1m- Name: [0m[36mSide Load JSRSASign [0m
[1m- URL: [0m[33mhttp://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m8140651-6b76251b-5ba9-48ba-9a26-f7629c174c9a[0m
[1m- Name: [0m[36mUpdate Sheet[0m
[1m- URL: [0m[33mhttps://sheets.googleapis.com/v4/spreadsheets/{{sheetId}}/values/{{range}}:append?valueInputOption=USER_ENTERED&insertDataOption=INSERT_ROWS[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer {{accessToken}}[0m[0m
[1m- Request Body: [0m[32m{
  "values": [
    [ 'Hello', 'World', '!']
  ]
}[0m[0m
[1m- Parameter: [0m[33mvalueInputOption[0m=[32mUSER_ENTERED[0m
[1m- Parameter: [0m[33minsertDataOption[0m=[32mINSERT_ROWS[0m
[1m
Request ID [0m[33m8140651-fa914e7e-362a-4698-8a5a-0c81dfebf5f9[0m
[1m- Name: [0m[36mGoogle Get Token[0m
[1m- URL: [0m[33mhttps://oauth2.googleapis.com/token[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m- Pre-Request Script: [0m[32mvar navigator = {};
var window = {};
eval(pm.environment.get("jsrsasign-js"));

var scope = pm.environment.get('scope');
var iss = pm.environment.get('iss');
var privateKey = pm.environment.get('privateKey');

const header = {"alg" : "RS256", "typ" : "JWT"};

const claimSet =
{
  "iss": iss,
  "scope": scope ,
  "aud":"https://oauth2.googleapis.com/token",
  "exp":KJUR.jws.IntDate.get("now + 1hour").toString(),
  "iat": KJUR.jws.IntDate.get("now").toString()
}

console.log(`header: ${ JSON.stringify(header)}`);
console.log(`claim set: ${ JSON.stringify(claimSet) }`);
console.log(`Private Key: ${ privateKey }`);

//  let jws = new KJUR.jws.JWS(); 
var jwt =  KJUR.jws.JWS.sign(null, header, claimSet, privateKey);
console.log(jwt);

pm.environment.set('jwt', jwt);[0m
[1m
Request ID [0m[33m8140651-32568360-f72d-40d8-bacf-ebb0e879273f[0m
[1m- Name: [0m[36mVeteran Positions[0m
[1m- URL: [0m[33mhttps://data.usajobs.gov/api/search?HiringPath=vet&DatePosted=7[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mHiringPath[0m=[32mvet[0m
[1m- Parameter: [0m[33mDatePosted[0m=[32m7[0m
[1m
Request ID [0m[33m8140651-c072d72e-d36f-4c6d-8693-8153442ec741[0m
[1m- Name: [0m[36mAdd Job to Wordpress[0m
[1m- URL: [0m[33m{{site}}/wp-json/wp/v2/posts[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33mpassword[0m=[32m{{password}}[0m
  [1m- [0m[33musername[0m=[32m{{username}}[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m- Parameter: [0m[33mcontent[0m=[32m{{content}}[0m
[1m- Parameter: [0m[33mtitle[0m=[32m{{title}}[0m
[1m- Parameter: [0m[33mexcerpt[0m=[32m{{excerpt}}[0m
[1m- Pre-Request Script: [0m[32m//get jobs and index post set index and add to environments 
let index = pm.environment.get('index');
console.log("index:\t"+index);

let totalJobs = pm.environment.get('jobNum');
console.log("total jobs:\t"+totalJobs);

if(index < totalJobs){
    //end collection run
    
    let jobs  = JSON.parse(pm.environment.get('jobs'));
    let job = jobs[index];
    console.log(job);
    
    const { departmentName, details, org, schedule, applyUri, locationDisplay, positionUri, title } = job;

    //build content, title, post, excerpt for Wordpress 
    let content = `<h1>${title}</h1><h3><i>${departmentName}, ${org} - ${schedule} -${locationDisplay}</i></h3><p>${details}</p>`;
    let excerpt = `${departmentName}, ${org} - ${schedule} -${locationDisplay}`;
    console.log("content:\t\n"+content );
    console.log("excerpt:\t\n"+excerpt );
    console.log("locationDisplay:\t"+locationDisplay);
    console.log("schedule:\t"+schedule);

    pm.environment.set("content", content);
    pm.environment.set("title", title);
    pm.environment.set("excerpt", excerpt );
}
[0m
[1m
Request ID [0m[33m8140651-0d43d0af-6a15-43ab-a792-df6aab2d649b[0m
[1m- Name: [0m[36mPost to Slack[0m
[1m- URL: [0m[33mhttps://hooks.slack.com/services/{{webhook_url}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "attachments": [
        {
            "color": "#ff0000",
            "title": "Zendesk IS Down!",
            "title_link": "https://twitter.com/ZendeskOps?s=17",
            "text": "Check Zendesk Ops Twitter for details![click the title^]",
            "image_url": "https://media.giphy.com/media/3oFzma9FGIblOf6Wk0/giphy.gif"

        }
    ]
}[0m[0m
[1m
Request ID [0m[33m8140651-af380292-1f18-42e1-b5bc-10c1f75b27b9[0m
[1m- Name: [0m[36mQuery Zendesk Status[0m
[1m- URL: [0m[33mhttps://status.zendesk.com/api/components/{{tag}}?domain={{domain}}.zendesk.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mdomain[0m=[32m{{domain}}.zendesk.com[0m
[1m
Request ID [0m[33m9213177-0e9ecb4a-144f-4b6b-97e0-c2c43490faac[0m
[1m- Name: [0m[36mGet channel Id from slack channel[0m
[1m- URL: [0m[33mhttps://slack.com/api/channels.list[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer {{botToken}}[0m[0m
[1m
Request ID [0m[33m9213177-13add0c9-8be0-42ce-a76e-384767918222[0m
[1m- Name: [0m[36mPost recomendations to slack[0m
[1m- URL: [0m[33mhttps://slack.com/api/chat.postMessage[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer {{botToken}}[0m[0m
[1m- Request Body: [0m[32m{{data}}[0m[0m
[1m- Pre-Request Script: [0m[32m
let pair = JSON.parse(pm.environment.get('pair'));
let users = JSON.parse(pm.environment.get('users'));
let count = pm.environment.get('count');
if(count) {
    count--;
    pm.environment.set('count',count);
    let currentUser = users[users.length-count-1];
    let userProduct = JSON.parse(pm.environment.get('userProduct'));
    
    let titles = userProduct[pair[currentUser]]['productTitles'];
    let urls = userProduct[pair[currentUser]]['productUrls'];
    let reqData = {
    "channel": currentUser,
    "text": `Hey <@${currentUser}>! You have been assigned to <@${pair[currentUser]}>\nHere are some gift ideas for you under Rs. ${pm.environment.get('budget')} based on your friend's interests!`,
    "attachments": [
        {
            "title":titles[0],
            "title_link":urls[0],
            "color": "#764FA5"
        },
        {
            "title":titles[1],
            "title_link":urls[1],
            "color": "#764FA5"
        },
        {
            "title":titles[2],
            "title_link":urls[2],
            "color": "#764FA5"
        }
    ]
};
pm.environment.set('data',JSON.stringify(reqData));
}
[0m
[1m
Request ID [0m[33m9213177-17692c8f-8daa-4e7e-8d8e-c71ba1df7e28[0m
[1m- Name: [0m[36mCreate Google calendar invite[0m
[1m- URL: [0m[33mhttps://www.googleapis.com/calendar/v3/calendars/primary/events[33m[0m
[1m- Authorization: [0m[33moauth2[33m[0m
  [1m- [0m[33mtokenType[0m: [32m[0m
  [1m- [0m[33maccessToken[0m: [32m[0m
  [1m- [0m[33maddTokenTo[0m: [32mheader[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{{payload}}[0m[0m
[1m- Pre-Request Script: [0m[32mlet eventDate = parseInt(pm.environment.get('eventDate'));
let userEmails = JSON.parse(pm.environment.get('userEmails'));
userEmails = userEmails.map(em=> {
    return {
        email: em
    }
});
let payload = {
    summary: 'Secret Santa!',
    description: 'Secret Santa gift exchange',
    colorId: "9",
    start: {
        dateTime: new Date(eventDate)
    },
    end: {
        dateTime: new Date(eventDate +30*60000)
    },
    attendees: userEmails
}
pm.environment.set('payload',JSON.stringify(payload));


[0m
[1m
Request ID [0m[33m9213177-4fc554fd-d2b1-4939-bf79-fc748f8f297d[0m
[1m- Name: [0m[36mGet user Ids from Slack channel[0m
[1m- URL: [0m[33mhttps://slack.com/api/channels.info?channel={{channelId}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer {{botToken}}[0m[0m
[1m- Parameter: [0m[33mchannel[0m=[32m{{channelId}}[0m
[1m
Request ID [0m[33m9213177-50bf6569-f941-47bc-992f-8133b79313c4[0m
[1m- Name: [0m[36mPost to slack channel[0m
[1m- URL: [0m[33mhttps://slack.com/api/chat.postMessage[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer {{botToken}}[0m[0m
[1m- Request Body: [0m[32m{{data}}[0m[0m
[1m- Pre-Request Script: [0m[32m
let reqData = {
    "channel": pm.environment.get('channel'),
	"blocks": [
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "*Ho Ho ho :santa: !* \nI am SecretSanta!\n I can help you organize a Secret Santa gift exchange in your Slack channel"
			}
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "Budget for the gift exchange is under Rs. "+pm.environment.get('budget')
			}
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "Gift exchange is scheduled for: "+new Date(parseInt(pm.environment.get('eventDate')))
			}
		}
	]
}
pm.environment.set('data',JSON.stringify(reqData));[0m
[1m
Request ID [0m[33m9213177-8e8618ab-ce21-40ec-934e-ce79b12335a5[0m
[1m- Name: [0m[36mGet user email from slack[0m
[1m- URL: [0m[33mhttps://slack.com/api/users.info?user={{userId}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer {{botToken}}[0m[0m
[1m- Parameter: [0m[33muser[0m=[32m{{userId}}[0m
[1m- Pre-Request Script: [0m[32mlet users = JSON.parse(pm.environment.get('users'));
let count = pm.environment.get('count');
if(count>0) {
    pm.environment.set('userId',users[count-1]);
}
[0m
[1m
Request ID [0m[33m9213177-ab199d30-db51-4fee-bd37-5fbaf2b6463a[0m
[1m- Name: [0m[36mGet Amazon product links for a user[0m
[1m- URL: [0m[33m{{amazonUrl}}/s?k={{category}}+under+{{budget}}&ref=nb_sb_noss_1[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33mk[0m=[32m{{category}}+under+{{budget}}[0m
[1m- Parameter: [0m[33mref[0m=[32mnb_sb_noss_1[0m
[1m- Pre-Request Script: [0m[32mlet users = JSON.parse(pm.environment.get('users'));
let count = pm.environment.get('count');
let userInterest = JSON.parse(pm.environment.get('userInterest'));
if(count) {
    count--;
    pm.environment.set('count',count);
    let currentUser = users[users.length-count-1];
    pm.environment.set('currentUser',currentUser);
    pm.environment.set('category',userInterest[currentUser] || 'gifts');
}[0m
[1m
Request ID [0m[33m9213177-adac61ea-7c6d-4d70-a8c7-c5d9415812da[0m
[1m- Name: [0m[36mPrompt slack user to input interests[0m
[1m- URL: [0m[33mhttps://slack.com/api/chat.postMessage[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAuthorization[0m: [32mBearer {{botToken}}[0m[0m
[1m- Request Body: [0m[32m{{data}}[0m[0m
[1m- Pre-Request Script: [0m[32mlet users = JSON.parse(pm.environment.get('users'));
let count = pm.environment.get('count');
if(count) {
    count--;
    pm.environment.set('count',count);
    let currentUser = users[users.length-count-1];
    let reqData = {
    "channel": currentUser,
    "text": `Hey <@${currentUser}>! \nWelcome to Secret Santa!\n Please use the /secretsanta command to input your interests!\nExample: /secretsanta books`
};
pm.environment.set('data',JSON.stringify(reqData));
}
[0m
[1m
Request ID [0m[33m9213177-f271d931-2a56-4c17-9b27-8a308d2ac9ec[0m
[1m- Name: [0m[36mGet all user interests from app[0m
[1m- URL: [0m[33mhttps://secretsantatest.herokuapp.com/slack[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m
Request ID [0m[33m9750465-02b7ad57-299f-45c9-a6c5-f0ef57946841[0m
[1m- Name: [0m[36mES6[0m
[1m- URL: [0m[33mhttps://postman-echo.com/get?title=ES6+Template&subtitle=w/+Module+Loading&hello=80&world=20[33m[0m
[1m- Authorization: [0m[33mbearer[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m- Parameter: [0m[33mtitle[0m=[32mES6+Template[0m
[1m- Parameter: [0m[33msubtitle[0m=[32mw/+Module+Loading[0m
[1m- Parameter: [0m[33mhello[0m=[32m80[0m
[1m- Parameter: [0m[33mworld[0m=[32m20[0m

[33m[*][0m Querying workspace ID [36mc26b5668-2188-4c70-8a31-b41fca63fe11[0m

[1m
Request ID [0m[33m20572866-4e4a4e9c-c2b2-402e-9223-66728fb2664c[0m
[1m- Name: [0m[36mShorten a Link[0m
[1m- URL: [0m[33m{{baseUrl}}/shorten[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
  "group_guid": "{{groupGUID}}",
  "domain": "bit.ly",
  "long_url": "https://dev.bitly.com"
}[0m[0m
[1m
Request ID [0m[33m20572866-5b207bd8-513d-4bbc-b33d-10e6e7e1379e[0m
[1m- Name: [0m[36mRetrieve OAuth App[0m
[1m- URL: [0m[33m{{baseUrl}}/apps/:client_id[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m
Request ID [0m[33m20572866-99b52e2a-d3bd-45fd-b828-12d6d7e46fb3[0m
[1m- Name: [0m[36mExpand a Bitlink[0m
[1m- URL: [0m[33m{{baseUrl}}/expand[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
  "bitlink_id": "bit.ly/12a4b6c"
}[0m[0m
[1m
Request ID [0m[33m20572866-9c36067b-6b9c-474f-8c31-14e3040dc91b[0m
[1m- Name: [0m[36mGet BSDs[0m
[1m- URL: [0m[33m{{baseUrl}}/bsds[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m

[33m[*][0m Querying workspace ID [36ma12dde60-c321-4797-af83-4f2ab255023d[0m

[1m
Request ID [0m[33m16863328-03e67d7c-7200-4c76-b67c-4c55d43c5f92[0m
[1m- Name: [0m[36m2. The provider finds the patient with a partial match on family and given name[0m
[1m- URL: [0m[33m{{baseUrl}}/v1/r4/Patient?family=val&given=g[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mfamily[0m=[32mval[0m
[1m- Parameter: [0m[33mgiven[0m=[32mg[0m
[1m
Request ID [0m[33m16863328-6d698e2d-1e6a-4655-bd07-9cdd2e876b67[0m
[1m- Name: [0m[36mRead a spacecraft[0m
[1m- URL: [0m[33m{{baseUrl}}/spacecrafts/:spacecraftId[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m
Request ID [0m[33m16901628-068166fb-53d8-4d0c-80a6-ac6145036014[0m
[1m- Name: [0m[36m15. The doctor writes a medication order[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/MedicationRequest/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
                "resourceType": "MedicationRequest",
                "identifier": [
                    {   
                        "system": "wtv",
                        "value": "medication-request-id"
                    }
                ],
                "status": "active",
                "intent": "order",
                "medicationCodeableConcept": {
                    "coding": [
                        {
                            "system": "http://www.nlm.nih.gov/research/umls/rxnorm",
                            "code": "861467",
                            "display": "Loratadine 5 MG Chewable Tablet"
                        }
                    ],
                    "text": "Loratadine 5 MG Chewable Tablet"
                },
                "requester":{
                    "reference":"Practitioner/{{practitioner-id}}"
                },
                "subject": {
                    "reference": "Patient/{{patient-id}}"
                },
                "authoredOn": "2015-04-08T02:11:28-04:00",
                "dosageInstruction": [
                    {
                        "sequence": 1,
                        "timing": {
                            "repeat": {
                                "frequency": 1,
                                "period": 4,
                                "periodUnit": "h"
                            }
                        },
                        "asNeededBoolean": false,
                        "doseAndRate": [
                            {
                                "type": {
                                    "coding": [
                                        {
                                            "system": "http://terminology.hl7.org/CodeSystem/dose-rate-type",
                                            "code": "ordered",
                                            "display": "Ordered"
                                        }
                                    ]
                                },
                                "doseQuantity": {
                                    "value": 1
                                }
                            }
                        ]
                    }
                ]
            }[0m[0m
[1m
Request ID [0m[33m16901628-14fee7f9-0527-457d-9d6e-711bc5cf0be8[0m
[1m- Name: [0m[36m13. The doctor writes a note[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/ClinicalImpression/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
                "resourceType": "ClinicalImpression",
                "status": "completed",
                "code": {
                    "coding": [
                        {
                            "system": "http://loinc.org",
                            "code": "77599-9",
                            "display": "Additional documentation"
                        }
                    ],
                    "text": "Additional documentation"
                },
                "subject": {
                    "reference": "Patient/{{patient-id}}"
                },
                "effectiveDateTime": "2020-01-29T15:15:04.000-08:00",
                "date": "2020-01-29T03:28:31.000-08:00",
                "summary": "Give a new medication to the patient 1"
            }[0m[0m
[1m
Request ID [0m[33m16901628-16839fbd-d8e5-47dc-8c95-f62bbeac1716[0m
[1m- Name: [0m[36m3. The Coordinator creates an appointment for the patient[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/Appointment/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "resourceType": "Appointment",
    "status": "proposed",
    "priority": 1,
    "description": "new appointment",
    "start": "2021-01-01T13:00:00.000+00:00",
    "end": "2021-01-01T15:00:00.000+00:00",
    "minutesDuration": 120,
    "slot": [
        {
            "reference": "Slot/{{slot-id}}"
        }
    ],
    "created": "2020-01-01T13:00:00.000+00:00",
    "patientInstruction": "Patient and Practitioner should confirm",
    "participant": [
        {
            "actor": {
                "reference": "Patient/{{patient-id}}"
            },
            "required": "required",
            "status": "needs-action"
        },
        {
            "actor": {
                "reference": "Practioner/{{practitioner-id}}"
            },
            "required": "required",
            "status": "needs-action"
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m16901628-64370766-e750-4c1a-a481-0406b48f6b90[0m
[1m- Name: [0m[36m1. Setup scenario[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "resourceType": "Bundle",
    "id": "bundle-transaction",
    "type": "transaction",
    "entry": [
        {
            "fullUrl": "patient",
            "resource": {
                "resourceType": "Patient",
                "active": true,
                "name": [
                    {
                        "use": "official",
                        "family": "Lopez",
                        "given": [
                            "Zaniar",
                            "Fernando"
                        ]
                    }
                ],
                "gender": "male",
                "birthDate": "1995-12-25"
            },
            "request": {
                "method": "POST",
                "url": "Patient"
            }
        },
        {
            "fullUrl": "practitioner",
            "resource": {
                "resourceType": "Practitioner",
                "id": "practitioner-1",
                "active": true,
                "name": [
                    {
                        "family": "Mendoza",
                        "given": [
                            "Daniel"
                        ],
                        "prefix": [
                            "Dr."
                        ]
                    }
                ],
                "address": [
                    {
                        "line": [
                            "67 & 100 TER HEUN DRIVE"
                        ],
                        "city": "FALMOUTH",
                        "state": "MA",
                        "postalCode": "02540",
                        "country": "US"
                    }
                ],
                "gender": "male"
            },
            "request": {
                "method": "POST",
                "url": "Practitioner"
            }
        },
        {
            "fullUrl": "family-member-history",
            "resource": {
                "resourceType": "FamilyMemberHistory",
                "status": "completed",
                "patient": {
                    "reference": "patient"
                },
                "relationship": {
                    "coding": [
                        {
                            "system": "http://hl7.org/fhir/v3/RoleCode",
                            "code": "FTH",
                            "display": "father"
                        }
                    ],
                    "text": "Father"
                },
                "condition": [
                    {
                        "code": {
                            "coding": [
                                {
                                    "system": "http://snomed.info/sct",
                                    "code": "38341003",
                                    "display": "Hypertension"
                                }
                            ],
                            "text": "Hypertension"
                        }
                    },
                    {
                        "code": {
                            "coding": [
                                {
                                    "system": "http://snomed.info/sct",
                                    "code": "53741008",
                                    "display": "Coronary Heart Disease"
                                }
                            ],
                            "text": "Coronary Heart Disease"
                        }
                    }
                ]
            },
            "request": {
                "method": "POST",
                "url": "FamilyMemberHistory"
            }
        },
        {
            "fullUrl": "observation",
            "resource": {
                "resourceType": "Observation",
                "status": "final",
                "category": [
                    {
                        "coding": [
                            {
                                "system": "http://terminology.hl7.org/CodeSystem/observation-category",
                                "code": "vital-signs",
                                "display": "Vital Signs"
                            }
                        ],
                        "text": "Vital Signs"
                    }
                ],
                "code": {
                    "coding": [
                        {
                            "system": "http://loinc.org",
                            "code": "8302-2",
                            "display": "Body height"
                        }
                    ],
                    "text": "Body height"
                },
                "subject": {
                    "reference": "patient"
                },
                "effectiveDateTime": "2020-01-01",
                "valueQuantity": {
                    "value": 66.89999999999999,
                    "unit": "in",
                    "system": "http://unitsofmeasure.org",
                    "code": "[in_i]"
                }
            },
            "request": {
                "method": "POST",
                "url": "Observation"
            }
        },
        {
            "fullUrl": "condition",
            "resource": {
                "resourceType": "Condition",
                "clinicalStatus": {
                    "coding": [
                        {
                            "system": "http://terminology.hl7.org/CodeSystem/condition-clinical",
                            "code": "active"
                        }
                    ]
                },
                "verificationStatus": {
                    "coding": [
                        {
                            "system": "http://terminology.hl7.org/CodeSystem/condition-ver-status",
                            "code": "confirmed"
                        }
                    ]
                },
                "code": {
                    "coding": [
                        {
                            "system": "http://snomed.info/sct",
                            "code": "368581000119106",
                            "display": "Neuropathy due to type 2 diabetes mellitus (disorder)"
                        }
                    ],
                    "text": "Neuropathy due to type 2 diabetes mellitus (disorder)"
                },
                "subject": {
                    "reference": "patient"
                },
                "onsetDateTime": "2020-12-24T02:27:02-05:00",
                "recordedDate": "2020-12-24"
            },
            "request": {
                "method": "POST",
                "url": "Condition"
            }
        },
        {
            "fullUrl": "schedule",
            "resource": {
                "resourceType": "Schedule",
                "active": true,
                "actor": [
                    {
                        "reference": "practitioner"
                    }
                ]
            },
            "request": {
                "method": "POST",
                "url": "Schedule"
            }
        },
        {
            "fullUrl": "slot",
            "resource": {
                "resourceType": "Slot",
                "schedule": {
                    "reference": "schedule"
                },
                "status": "free",
                "start": "2020-01-01T13:00:00.000+00:00",
                "end": "2020-01-01T15:00:00.000+00:00",
                "overbooked": false
            },
            "request": {
                "method": "POST",
                "url": "Slot"
            }
        },
        {
            "fullUrl": "medication-statement",
            "resource": {
                "resourceType": "MedicationStatement",
                "status": "completed",
                "category": {
                    "coding": [
                        {
                            "system": "http://hl7.org/fhir/medication-statement-category",
                            "code": "inpatient",
                            "display": "Inpatient",
                            "userSelected": true
                        }
                    ],
                    "text": "Inpatient"
                },
                "medicationCodeableConcept": {
                    "coding": [
                        {
                            "system": "http://snomed.info/sct",
                            "code": "50580-506-02",
                            "display": "Tylenol PM"
                        }
                    ]
                },
                "subject": {
                    "reference": "patient"
                },
                "effectiveDateTime": "2014-01-23",
                "dateAsserted": "2015-02-22",
                "informationSource": {
                    "reference": "urn:uuid:"
                },
                "reasonCode": [
                    {
                        "coding": [
                            {
                                "system": "http://snomed.info/sct",
                                "code": "32914008",
                                "display": "Restless LegsM"
                            }
                        ]
                    }
                ],
                "dosage": [
                    {
                        "text": "one capsule three times daily",
                        "timing": {
                            "repeat": {
                                "frequency": 3,
                                "period": 1,
                                "periodUnit": "d"
                            }
                        },
                        "asNeededBoolean": false,
                        "route": {
                            "coding": [
                                {
                                    "system": "http://snomed.info/sct",
                                    "code": "260548002",
                                    "display": "Oral"
                                }
                            ]
                        },
                        "maxDosePerPeriod": {
                            "numerator": {
                                "value": 3,
                                "unit": "capsules",
                                "system": "http://snomed.info/sct",
                                "code": "385055001"
                            },
                            "denominator": {
                                "value": 1,
                                "system": "http://unitsofmeasure.org",
                                "code": "d"
                            }
                        }
                    }
                ]
            },
            "request": {
                "method": "POST",
                "url": "MedicationStatement"
            }
        },
        {
            "fullUrl": "careplan",
            "resource": {
                "resourceType": "CarePlan",
                "status": "completed",
                "intent": "plan",
                "subject": {
                    "reference": "Patient/{{patient-id}}",
                    "display": "P. van de Heuvel"
                },
                "period": {
                    "start": "2019-06-26",
                    "end": "2020-06-27"
                },
                "activity": [
                    {
                        "detail": {
                            "kind": "ServiceRequest",
                            "code": {
                                "coding": [
                                    {
                                        "system": "http://snomed.info/sct",
                                        "code": "64915003",
                                        "display": "Operation on heart"
                                    }
                                ]
                            },
                            "status": "completed",
                            "doNotPerform": true,
                            "scheduledString": "2011-06-27T09:30:10+01:00",
                            "performer": [
                                {
                                    "reference": "Practitioner/{{practitioner-id}}",
                                    "display": "P. Voigt"
                                }
                            ]
                        }
                    }
                ]
            },
            "request": {
                "method": "POST",
                "url": "CarePlan"
            }
        },
        {
            "fullUrl": "procedure",
            "resource": {
                "resourceType": "Procedure",
                "status": "completed",
                "code": {
                    "coding": [
                        {
                            "system": "http://snomed.info/sct",
                            "code": "274474001",
                            "display": "Bone immobilization"
                        }
                    ],
                    "text": "Bone immobilization"
                },
                "subject": {
                    "reference": "patient"
                },
                "performedPeriod": {
                    "start": "2015-04-08T02:11:28-04:00",
                    "end": "2015-04-08T02:33:28-04:00"
                }
            },
            "request": {
                "method": "POST",
                "url": "Procedure"
            }
        },
         {
            "fullUrl": "endpoint-id",
            "resource": {
                "resourceType": "Endpoint",
                "status": "active",
                "name": "TELEHEALTH VIDEO CALL SYSTEM",
                "address": "mailto:MARTIN.SMIETANKA@directnppes.com",
                "connectionType": {
                    "code": "direct-project"
                },
                "payloadType": [
                    {
                        "coding": [
                            {
                                "system": "urn:oid:1.3.6.1.4.1.19376.1.2.3",
                                "code": "urn:ihe:pcc:cm:2008"
                            }
                        ]
                    }
                ]
            },
            "request": {
                "method": "POST",
                "url": "Endpoint"
            }
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m16901628-6eeed54e-c30c-4d69-9657-0df1f8048a49[0m
[1m- Name: [0m[36m5. The practitioner confirms the appointment[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/Appointment/{{appointment-id}}/[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Request Body: [0m[32m{
    "resourceType": "Appointment",
    "id": "{{appointment-id}}",
    "meta": {
        "extension": [
            {
                "extension": [
                    {
                        "url": "clientname",
                        "valueString": "dashboard"
                    },
                    {
                        "url": "person",
                        "valueReference": {
                            "reference": "Person/bea178a0-6ea4-4b47-99af-e4021bba8f99"
                        }
                    }
                ],
                "url": "https://commure.com/fhir/provenance/StructureDefinition/creator-structure-map"
            }
        ],
        "versionId": "3790babc-9fb0-468a-a8f9-6243df789c3b",
        "lastUpdated": "2020-10-28T22:20:48.585399+00:00"
    },
    "status": "booked",
    "priority": 1,
    "description": "new appointment",
    "start": "2021-01-01T13:00:00+00:00",
    "end": "2021-01-01T15:00:00+00:00",
    "minutesDuration": 120,
    "slot": [
        {
            "reference": "Slot/f91a758a-b2e7-4bac-804a-f492c354eccf"
        }
    ],
    "created": "2020-01-01T13:00:00.000+00:00",
    "patientInstruction": "Patient and Practitioner had confirmed",
    "participant": [
        {
            "actor": {
                "reference": "Patient/5ae20256-c536-4837-9ea8-270593c7c0d3"
            },
            "required": "required",
            "status": "accepted"
        },
        {
            "actor": {
                "reference": "Practioner/da81371f-70f3-4dcf-8d8a-bcf6b96ad08f"
            },
            "required": "required",
            "status": "accepted"
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m16901628-7cd307f5-e6a2-4e8b-a19d-e025dd398274[0m
[1m- Name: [0m[36m6. The coordinator updates the Slot as busy[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/Slot/{{slot-id}}[33m[0m
[1m- Request Method: [0m[33mPATCH[0m
[1m- Request Body: [0m[32m[
    {
        "op": "replace",
        "path": "/status",
        "value": "busy"
    }
][0m[0m
[1m
Request ID [0m[33m16901628-812836d0-362b-4873-8511-f6e4cda00b9f[0m
[1m- Name: [0m[36m8. Create encounter ( interaction between a patient and healthcare provider)[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/Encounter[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "resourceType": "Encounter",
    "status": "planned",
    "class": {
        "code": "virtual",
        "display": "virtual",
        "userSelected": true
    },
    "type": [
        {
            "text": "Virtual appointment"
        }
    ],
    "subject": {
        "reference": "Patient/{{patient-id}}"
    },
    "participant": [
        {
            "type": [
                {
                    "text": "Doctor"
                }
            ],
            "individual": {
                "reference": "Practitioner/{{practitioner-id}}"
            }
        }
    ],
    "period": {
        "start": "2021-01-01",
        "end": "2021-01-01"
    },
    "reasonCode": [
        {
            "text": "General Medicine"
        }
    ],
    "location": [
        {
            "location": {
                "reference": "Location/{{location-id}}"
            },
            "status": "planned",
            "period": {
                "start": "2021-01-01",
                "end": "2021-01-01"
            }
        }
    ],
    "appointment": [{
        "reference": "Appointment/{{appointment-id}}"
    }]
}[0m[0m
[1m
Request ID [0m[33m16901628-84aced71-0d26-4d71-ad97-6aadb05cd239[0m
[1m- Name: [0m[36m2. The coordinator checks the appointments and validates slot status[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/Schedule?actor={{practitioner-id}}&_revinclude=Slot:schedule[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mactor[0m=[32m{{practitioner-id}}[0m
[1m- Parameter: [0m[33m_revinclude[0m=[32mSlot:schedule[0m
[1m
Request ID [0m[33m16901628-94cdcd1c-0d1e-4b31-b919-8e33d31c9df4[0m
[1m- Name: [0m[36m14. The doctor schedules a new appointment[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/ServiceRequest/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
                "resourceType": "ServiceRequest",
                "status": "active",
                "intent": "original-order",
                "code": {
                    "coding": [
                        {
                            "system": "http://loinc.org",
                            "code": "58410-2",
                            "display": "Complete blood count (hemogram) panel - Blood by Automated count"
                        }
                    ]
                },
                "subject": {
                    "reference": "Patient/{{patient-id}}",
                    "display": "P. van den Heuvel"
                },
                "encounter": {
                    "reference": "Encounter/{{encounter-id}}"
                },
                "requester": {
                    "reference": "Practitioner/{{practitioner-id}}",
                    "display": "E.van den Broek"
                },
                "note": [
                    {
                        "text": "patient almost fainted during procedure"
                    }
                ]
            }[0m[0m
[1m
Request ID [0m[33m16901628-9b1d50f2-a94b-4c9a-8513-ab8fbff3c71c[0m
[1m- Name: [0m[36m16. The doctor closes the encounter[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/Encounter/{{encounter-id}}/[33m[0m
[1m- Request Method: [0m[33mPATCH[0m
[1m- Request Body: [0m[32m[
    {
        "op": "replace",
        "path": "/status",
        "value": "finished"
    }
][0m[0m
[1m
Request ID [0m[33m16901628-a433d308-08cb-4ee6-a36d-ffd4800756e7[0m
[1m- Name: [0m[36m11. The doctor checks the medications that the patient said they were taking[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/MedicationStatement?subject=Patient/{{patient-id}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33msubject[0m=[32mPatient/{{patient-id}}[0m
[1m
Request ID [0m[33m16901628-acbe07e0-4020-4ece-bc13-3cc4afec4cae[0m
[1m- Name: [0m[36m9. The coordinator checks that a patient has filled out the previsit survey[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/QuestionnaireResponse/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
  "resourceType": "QuestionnaireResponse",
  "status": "completed",
  "subject": {
    "reference": "Patient/{{patient-id}}",
    "type": "Patient"
  },
  "authored": "2013-02-19T14:15:00+10:00",
  "author": {
    "reference": "Practitioner/{{practitioner-id}}",
    "type": "Practitioner"
  },
  "item": [
    {
      "linkId": "birthDetails",
      "text": "Birth details - To be completed by health professional",
      "item": [
        {
          "linkId": "group",
          "item": [
            {
              "linkId": "nameOfChild",
              "text": "Name of child",
              "answer": [
                {
                  "valueString": "Cathy Jones"
                }
              ]
            },
            {
              "linkId": "sex",
              "text": "Sex",
              "answer": [
                {
                  "valueCoding": {
                    "code": "f"
                  }
                }
              ]
            }
          ]
        },
        {
          "linkId": "neonatalInformation",
          "text": "Neonatal Information",
          "item": [
            {
              "linkId": "birthWeight",
              "text": "Birth weight (kg)",
              "answer": [
                {
                  "valueDecimal": 3.25
                }
              ]
            },
            {
              "linkId": "birthLength",
              "text": "Birth length (cm)",
              "answer": [
                {
                  "valueDecimal": 44.3
                }
              ]
            },
            {
              "linkId": "vitaminKgiven",
              "text": "Vitamin K given",
              "answer": [
                {
                  "valueCoding": {
                    "code": "INJECTION"
                  },
                  "item": [
                    {
                      "linkId": "vitaminKgivenDoses",
                      "item": [
                        {
                          "linkId": "vitaminKDose1",
                          "text": "1st dose",
                          "answer": [
                            {
                              "valueDate": "1972-11-30"
                            }
                          ]
                        },
                        {
                          "linkId": "vitaminKDose2",
                          "text": "2nd dose",
                          "answer": [
                            {
                              "valueDate": "1972-12-11"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "linkId": "hepBgiven",
              "text": "Hep B given y / n",
              "answer": [
                {
                  "valueBoolean": true,
                  "item": [
                    {
                      "linkId": "hepBgivenDate",
                      "text": "Date given",
                      "answer": [
                        {
                          "valueDate": "1972-12-04"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "linkId": "abnormalitiesAtBirth",
              "text": "Abnormalities noted at birth",
              "answer": [
                {
                  "valueString": "heart defect"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}[0m[0m
[1m
Request ID [0m[33m16901628-bc25bea2-6e29-4e19-9b12-e70a658eaa93[0m
[1m- Name: [0m[36m4. The coordinator confirms that the Patient is going to the Appointment.[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/Appointment/{{appointment-id}}/[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Request Body: [0m[32m{
    "resourceType": "Appointment",
    "id": "{{appointment-id}}",
    "status": "proposed",
    "priority": 1,
    "description": "new appointment",
    "start": "2021-01-01T13:00:00+00:00",
    "end": "2021-01-01T15:00:00+00:00",
    "minutesDuration": 120,
    "slot": [
        {
            "reference": "Slot/{{slot-id}}"
        }
    ],
    "created": "2020-01-01T13:00:00.000+00:00",
    "patientInstruction": "Practitioner should confirm",
    "participant": [
        {
            "actor": {
                "reference": "Patient/{{patient-id}}"
            },
            "required": "required",
            "status": "accepted"
        },
        {
            "actor": {
                "reference": "Practioner/{{practitioner-id}}"
            },
            "required": "required",
            "status": "needs-action"
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m16901628-cfa6d9b4-1838-49bb-aa4a-a4cd3c282e2d[0m
[1m- Name: [0m[36m7. The coordinator updates the appointment with the information of the videocall[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/Appointment/{{appointment-id}}/[33m[0m
[1m- Request Method: [0m[33mPATCH[0m
[1m- Request Body: [0m[32m[
    {
        "op": "add",
        "path": "/supportingInformation",
        "value":[ {
            "reference": "Endpoint/{{endpoint-id}}"
        }]
    }
][0m[0m
[1m
Request ID [0m[33m16901628-d4d93378-8ff2-4acc-996c-9c239170c6f0[0m
[1m- Name: [0m[36m12. The doctor reviews the patient’s history.[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/Patient/?_id={{patient-id}}&_revinclude=Condition:subject&_revinclude=FamilyMemberHistory:patient&_revinclude=Observation:subject&_revinclude=Procedure:subject[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33m_id[0m=[32m{{patient-id}}[0m
[1m- Parameter: [0m[33m_revinclude[0m=[32mCondition:subject[0m
[1m- Parameter: [0m[33m_revinclude[0m=[32mFamilyMemberHistory:patient[0m
[1m- Parameter: [0m[33m_revinclude[0m=[32mObservation:subject[0m
[1m- Parameter: [0m[33m_revinclude[0m=[32mProcedure:subject[0m
[1m
Request ID [0m[33m16901628-eb0e1a28-741c-422f-b331-1937eddfec39[0m
[1m- Name: [0m[36m10. The doctor checks the patient’s previsit survey[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/QuestionnaireResponse/{{questionnaire-response-id}}/[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16901628-13804e20-6926-40c3-8890-b7220776d394[0m
[1m- Name: [0m[36m1. Setup Scenario[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "resourceType": "Bundle",
    "id": "bundle-transaction",
    "type": "transaction",
    "entry": [
        {
            "fullUrl": "patient",
            "resource": {
                "resourceType": "Patient",
                "identifier": [
                    {
                        "system": "https://commure.com/fhir/example-system",
                        "value": "medication-scenario-patient"
                    }
                ],
                "active": true,
                "name": [
                    {
                        "use": "official",
                        "family": "Evans",
                        "given": [
                            "Tiffany",
                            "Elise"
                        ]
                    }
                ],
                "gender": "female",
                "birthDate": "1990-12-25"
            },
            "request": {
                "method": "PUT",
                "url": "Patient?identifier=https://commure.com/fhir/example-system|medication-scenario-patient"
            }
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m16901628-348f5afa-87e2-46c6-b8f9-d83cce920384[0m
[1m- Name: [0m[36m5. Find the MedicationDispense for a known MedicationRequest identifier Request URL[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/MedicationDispense?prescription={{medication-request-id}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mprescription[0m=[32m{{medication-request-id}}[0m
[1m
Request ID [0m[33m16901628-4a21b920-b291-4bb8-be1a-a4dcc8d362a0[0m
[1m- Name: [0m[36m3a. Get snapshot of all active MedicationRequest resources[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/MedicationRequest[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m{
    "resourceType": "MedicationRequest",
    "identifier": [
        {
            "system": "wtv",
            "value": "medication-request-id"
        }
    ],
    "status": "active",
    "intent": "order",
    "medicationCodeableConcept": {
        "coding": [
            {
                "system": "http://www.nlm.nih.gov/research/umls/rxnorm",
                "code": "861467",
                "display": "Loratadine 5 MG Chewable Tablet"
            }
        ],
        "text": "Loratadine 5 MG Chewable Tablet"
    },
    "subject": {
        "identifier": {
            "system": "example-identifier-system",
            "value": "medication-scenario-patient"
        }
    },
    "authoredOn": "2015-04-08T02:11:28-04:00",
    "dosageInstruction": [
        {
            "sequence": 1,
            "timing": {
                "repeat": {
                    "frequency": 1,
                    "period": 4,
                    "periodUnit": "h"
                }
            },
            "asNeededBoolean": false,
            "doseAndRate": [
                {
                    "type": {
                        "coding": [
                            {
                                "system": "http://terminology.hl7.org/CodeSystem/dose-rate-type",
                                "code": "ordered",
                                "display": "Ordered"
                            }
                        ]
                    },
                    "doseQuantity": {
                        "value": 1
                    }
                }
            ]
        }
    ]
}[0m[0m
[1m- Pre-Request Script: [0m[32mpm.collectionVariables.set("search-timestamp", pm.variables.replaceIn("{{$isoTimestamp}}"))[0m
[1m
Request ID [0m[33m16901628-8b9d2b20-6cd4-4830-87d1-ee167040acb5[0m
[1m- Name: [0m[36m3c. Hypothetical update between history requests[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/MedicationRequest/{{medication-request-id}}[33m[0m
[1m- Request Method: [0m[33mPATCH[0m
[1m- Request Body: [0m[32m[
    {
        "op": "add",
        "path": "/priority",
        "value": "stat"
    }
][0m[0m
[1m
Request ID [0m[33m16901628-a146ab81-33d0-4d71-8a83-c2039a8f569f[0m
[1m- Name: [0m[36m3d. Request history with link to "next" from previous history request.[0m
[1m- URL: [0m[33m{{link-to-next-url}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m
Request ID [0m[33m16901628-c3156d25-93aa-42d9-a30c-377e4550a4db[0m
[1m- Name: [0m[36m3b. Request history of MedicationRequest resources since time of search[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/MedicationRequest/_history?_since={{search-timestamp}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Parameter: [0m[33m_since[0m=[32m{{search-timestamp}}[0m
[1m
Request ID [0m[33m16901628-edf20c95-43f1-420a-855f-78cda4c05a14[0m
[1m- Name: [0m[36m6. Create a completed MedicationAdministration and update the MedicationRequest within a transaction.[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "resourceType": "Bundle",
    "id": "bundle-transaction",
    "type": "transaction",
    "entry": [
        {
            "resource": {
                "resourceType": "MedicationAdministration",
                "status": "completed",
                "category": {
                    "coding": [
                        {
                            "system": "http://terminology.hl7.org/CodeSystem/medication-admin-category",
                            "code": "inpatient",
                            "display": "Inpatient",
                            "userSelected": true
                        }
                    ]
                },
                "medicationCodeableConcept": {
                    "coding": [
                        {
                            "system": "http://www.nlm.nih.gov/research/umls/rxnorm",
                            "code": "861467",
                            "display": "Loratadine 5 MG Chewable Tablet"
                        }
                    ],
                    "text": "Loratadine 5 MG Chewable Tablet"
                },
                "subject": {
                    "reference": "Patient/{{patient-id}}"
                },
                "effectiveDateTime": "{{$isoTimestamp}}",
                "request": {
                    "reference": "MedicationRequest/{{medication-request-id}}"
                }
            },
            "request": {
                "method": "POST",
                "url": "MedicationAdministration"
            }
        },
        {
            "resource": {
                "resourceType": "MedicationRequest",
                "id": "{{medication-request-id}}",
                "identifier": [
                    {
                        "system": "https://commure.com/fhir/example-system",
                        "value": "medication-request-id"
                    }
                ],
                "status": "completed",
                "intent": "order",
                "priority": "stat",
                "medicationCodeableConcept": {
                    "coding": [
                        {
                            "system": "http://www.nlm.nih.gov/research/umls/rxnorm",
                            "code": "861467",
                            "display": "Loratadine 5 MG Chewable Tablet"
                        }
                    ],
                    "text": "Loratadine 5 MG Chewable Tablet"
                },
                "subject": {
                    "reference": "Patient/{{patient-id}}"
                },
                "authoredOn": "2015-04-08T02:11:28-04:00",
                "dosageInstruction": [
                    {
                        "sequence": 1,
                        "timing": {
                            "repeat": {
                                "frequency": 1,
                                "period": 4,
                                "periodUnit": "h"
                            }
                        },
                        "asNeededBoolean": false,
                        "doseAndRate": [
                            {
                                "type": {
                                    "coding": [
                                        {
                                            "system": "http://terminology.hl7.org/CodeSystem/dose-rate-type",
                                            "code": "ordered",
                                            "display": "Ordered"
                                        }
                                    ]
                                },
                                "doseQuantity": {
                                    "value": 1
                                }
                            }
                        ]
                    }
                ]
            },
            "request": {
                "method": "PUT",
                "url": "MedicationRequest/{{medication-request-id}}"
            }
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m16901628-f46dfca4-a4b0-4516-9a80-9e2643d1f207[0m
[1m- Name: [0m[36m2. A physician sends a MedicationRequest[0m
[1m- URL: [0m[33m{{url}}/api/v1/r4/MedicationRequest[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "resourceType": "MedicationRequest",
    "identifier": [
        {
            "system": "https://commure.com/fhir/example-system",
            "value": "medication-request-id"
        }
    ],
    "status": "active",
    "intent": "order",
    "medicationCodeableConcept": {
        "coding": [
            {
                "system": "http://www.nlm.nih.gov/research/umls/rxnorm",
                "code": "861467",
                "display": "Loratadine 5 MG Chewable Tablet"
            }
        ],
        "text": "Loratadine 5 MG Chewable Tablet"
    },
    "subject": {
        "reference": "Patient/{{patient-id}}"
    },
    "authoredOn": "2015-04-08T02:11:28-04:00",
    "dosageInstruction": [
        {
            "sequence": 1,
            "timing": {
                "repeat": {
                    "frequency": 1,
                    "period": 4,
                    "periodUnit": "h"
                }
            },
            "asNeededBoolean": false,
            "doseAndRate": [
                {
                    "type": {
                        "coding": [
                            {
                                "system": "http://terminology.hl7.org/CodeSystem/dose-rate-type",
                                "code": "ordered",
                                "display": "Ordered"
                            }
                        ]
                    },
                    "doseQuantity": {
                        "value": 1
                    }
                }
            ]
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m16952431-4a332c46-5b74-4256-917e-e7887875b658[0m
[1m- Name: [0m[36mSearch and Retrieval Endpoint[0m
[1m- URL: [0m[33m{{baseurl}}/v0/graphql[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mx-mock-match-request-body[0m: [32mtrue[0m[0m
[1m
Request ID [0m[33m24113271-6443c566-5107-4b52-9e12-0f202756a06c[0m
[1m- Name: [0m[36m4. The QuestionnaireResponse is used to create a Coverage resource with $extract[0m
[1m- URL: [0m[33m{{formsUrl}}/api/v1/r4/QuestionnaireResponse/$extract[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "resourceType": "Parameters",
    "parameter": [
        {
            "name": "questionnaire-response",
            "resource": {
                "resourceType": "QuestionnaireResponse",
                "questionnaire": "https://commure.com/fhir/Questionnaire/insurance|1.0.0",
                "status": "in-progress",
                "subject": {
                    "reference": "Patient/{{patient-id}}"
                },
                "item": [
                    {
                        "linkId": "coverage",
                        "item": [
                            {
                                "linkId": "subscriber-id",
                                "definition": "http://hl7.org/fhir/StructureDefinition/Coverage#Coverage.subscriberId",
                                "text": "Insurance Id Number",
                                "answer": [
                                    {
                                        "valueString": "123-456-789"
                                    }
                                ]
                            },
                            {
                                "linkId": "payor",
                                "definition": "http://hl7.org/fhir/StructureDefinition/Coverage#Coverage.payor",
                                "text": "Insurance company name",
                                "answer": [
                                    {
                                        "valueReference": {
                                            "reference": "Organization/{{organization-id}}"
                                        }
                                    }
                                ]
                            },
                            {
                                "linkId": "status",
                                "definition": "http://hl7.org/fhir/StructureDefinition/Coverage#Coverage.status",
                                "text": "Status of coverage",
                                "answer": [
                                    {
                                        "valueCoding": {
                                            "system": "http://hl7.org/fhir/ValueSet/fm-status",
                                            "code": "active"
                                        }
                                    }
                                ]
                            },
                            {
                                "linkId": "beneficiary-reference",
                                "definition": "http://hl7.org/fhir/StructureDefinition/Coverage#Coverage.beneficiary.reference",
                                "answer": [
                                    {
                                        "valueString": "Patient/{{patient-id}}"
                                    }
                                ]
                            },
                            {
                                "linkId": "coverage-id",
                                "definition": "http://hl7.org/fhir/StructureDefinition/Coverage#Coverage.id"
                            }
                        ]
                    }
                ]
            }
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m24113271-6be73d67-2cbc-49ac-9680-a605245beb0b[0m
[1m- Name: [0m[36m3. A partially-filled QuestionnaireResponse is generated with $populate[0m
[1m- URL: [0m[33m{{formsUrl}}/api/v1/r4/Questionnaire/$populate[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "resourceType": "Parameters",
    "parameter": [
        {
            "name": "identifier",
            "valueUri": "https://commure.com/fhir/Questionnaire/insurance"
        },
        {
            "name": "subject",
            "valueReference": {
                "reference": "Patient/{{patient-id}}"
            }
        },
        {
            "name": "local",
            "valueBoolean": true
        }
    ]
}[0m[0m
[1m
Request ID [0m[33m24113271-84b37285-890e-45ba-9f44-94f18336ec62[0m
[1m- Name: [0m[36m2. The provider finds the patient with a partial match on family and given name[0m
[1m- URL: [0m[33m{{formsUrl}}/api/v1/r4/Patient?family=val&given=g[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mfamily[0m=[32mval[0m
[1m- Parameter: [0m[33mgiven[0m=[32mg[0m
[1m
Request ID [0m[33m24113271-c06b7c10-58cc-4d80-afd9-667cc66c4461[0m
[1m- Name: [0m[36m1. Prerequisite data: a Questionnaire, Patient, and Organization[0m
[1m- URL: [0m[33m{{formsUrl}}/api/v1/r4/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
  "resourceType": "Bundle",
  "type": "transaction",
  "entry": [
    {
      "request": { "method": "PUT", "url": "Questionnaire?url=https://commure.com/fhir/Questionnaire/insurance" },
      "resource": {
        "resourceType": "Questionnaire",
        "name": "patient-insurance",
        "status": "active",
        "title": "Patient Insurance",
        "url": "https://commure.com/fhir/Questionnaire/insurance",
        "version": "1.0.0",
        "extension": [
          {
            "url": "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-launchContext",
            "extension": [
              { "url": "name", "valueId": "patient" },
              { "url": "type", "valueCode": "patient" }
            ]
          },
          {
            "url": "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-launchContext",
            "extension": [
              { "url": "name", "valueId": "coverage" },
              { "url": "type", "valueCode": "coverage" }
            ]
          }
        ],
        "item": [
          {
            "linkId": "coverage",
            "type": "group",
            "extension": [
              {
                "url": "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-itemContext",
                "valueExpression": { "expression": "Coverage", "language": "application/x-fhir-query" }
              }
            ],
            "item": [
              {
                "definition": "http://hl7.org/fhir/StructureDefinition/Coverage#Coverage.subscriberId",
                "linkId": "subscriber-id",
                "type": "string",
                "text": "Insurance Id Number",
                "extension": [
                  {
                    "url": "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-initialExpression",
                    "valueExpression": { "expression": "%coverage.subscriberId", "language": "text/fhirpath" }
                  }
                ]
              },
              {
                "definition": "http://hl7.org/fhir/StructureDefinition/Coverage#Coverage.payor",
                "linkId": "payor",
                "type": "reference",
                "text": "Insurance company name",
                "extension": [
                  {
                    "url": "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-initialExpression",
                    "valueExpression": { "expression": "%coverage.payor", "language": "text/fhirpath" }
                  }
                ]
              },
              {
                "answerValueSet": "http://hl7.org/fhir/ValueSet/fm-status",
                "definition": "http://hl7.org/fhir/StructureDefinition/Coverage#Coverage.status",
                "linkId": "status",
                "type": "choice",
                "text": "Status of coverage",
                "extension": [
                  {
                    "url": "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-initialExpression",
                    "valueExpression": { "expression": "%coverage.status", "language": "text/fhirpath" }
                  }
                ],
                "initial": [{ "valueCoding": { "code": "active", "system": "http://hl7.org/fhir/ValueSet/fm-status" } }]
              },
              {
                "definition": "http://hl7.org/fhir/StructureDefinition/Coverage#Coverage.beneficiary.reference",
                "linkId": "beneficiary-reference",
                "type": "string",
                "extension": [
                  {
                    "url": "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-initialExpression",
                    "valueExpression": { "expression": "'Patient/'+%patient.id", "language": "text/fhirpath" }
                  },
                  { "url": "http://hl7.org/fhir/StructureDefinition/questionnaire-hidden", "valueBoolean": true }
                ],
                "required": true
              },
              {
                "definition": "http://hl7.org/fhir/StructureDefinition/Coverage#Coverage.id",
                "linkId": "coverage-id",
                "type": "string",
                "extension": [
                  {
                    "url": "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-initialExpression",
                    "valueExpression": { "expression": "%coverage.id", "language": "text/fhirpath" }
                  },
                  { "url": "http://hl7.org/fhir/StructureDefinition/questionnaire-hidden", "valueBoolean": true }
                ]
              }
            ]
          }
        ],
        "meta": {
          "profile": [
            "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire",
            "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-populate",
            "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-extract"
          ]
        },
        "subjectType": ["Patient"]
      }
    },
    {
      "fullUrl": "transaction-reference-patient",
      "request": {
        "method": "PUT",
        "url": "Patient?identifier=https://commure.com/fhir/sample-identifier-system|sample-patient-giuseppe"
      },
      "resource": {
        "resourceType": "Patient",
        "identifier": [
          { "system": "https://commure.com/fhir/sample-identifier-system", "value": "sample-patient-giuseppe" }
        ],
        "name": [{ "family": "Valentini", "given": ["Giuseppe"] }]
      }
    },
    {
      "request": {
        "method": "PUT",
        "url": "Organization?identifier=https://commure.com/fhir/sample-identifier-system|sample-insurance-company"
      },
      "resource": {
        "name": "Insurance Corp of Healthyland",
        "resourceType": "Organization",
        "identifier": [
          { "system": "https://commure.com/fhir/sample-identifier-system", "value": "sample-insurance-company" }
        ],
        "type": [
          {
            "coding": [
              {
                "code": "ins",
                "display": "Insurance Company",
                "system": "http://terminology.hl7.org/CodeSystem/organization-type"
              }
            ]
          }
        ],
        "active": true
      }
    }
  ]
}
[0m[0m
[1m
Request ID [0m[33m24113271-257a6d55-3702-4bc2-8247-b4c05a051b9a[0m
[1m- Name: [0m[36m2. The provider finds the patient with a partial match on family and given name[0m
[1m- URL: [0m[33m{{careTeamUrl}}/v1/r4/Patient?family=aliqua&given=Lorem[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Request Body: [0m[32m[0m[0m
[1m- Parameter: [0m[33mfamily[0m=[32maliqua[0m
[1m- Parameter: [0m[33mgiven[0m=[32mLorem[0m
[1m
Request ID [0m[33m24113271-2a629092-0ac7-4393-8ad9-5ac434c357bb[0m
[1m- Name: [0m[36m3. A partially-filled QuestionnaireResponse is generated with $populate[0m
[1m- URL: [0m[33m{{careTeamUrl}}/api/v1/r4/Questionnaire/populate[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
  "parameter": [
    {
      "name": "dolor velit eu proident cillum",
      "valueBoolean": true,
      "valueReference": {
        "reference": "ut enim nisi sit Duis"
      },
      "valueUri": "minim consectetur exercitation enim"
    },
    {
      "name": "ad dolore",
      "valueBoolean": true,
      "valueReference": {
        "reference": "do commodo"
      },
      "valueUri": "consectetur"
    }
  ],
  "resourceType": "eiusmod minim nulla"
}[0m[0m
[1m
Request ID [0m[33m24113271-65f0b38d-0bd3-4dfb-96a9-617fd3fa771c[0m
[1m- Name: [0m[36m4. The QuestionnaireResponse is used to create a Coverage resource with $extract[0m
[1m- URL: [0m[33m{{careTeamUrl}}/api/v1/r4/QuestionnaireResponse/extract[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
  "parameter": [
    {
      "name": "consectetur deserunt sed nostrud reprehenderit",
      "resource": {
        "item": [
          {
            "item": [
              {
                "answer": [
                  {
                    "valueString": {
                      "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                  },
                  {
                    "valueString": {
                      "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                  }
                ],
                "definition": "aliqua exercitation nostrud",
                "linkId": "nisi sint commodo",
                "text": "sit culpa"
              },
              {
                "answer": [
                  {
                    "valueString": {
                      "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                  },
                  {
                    "valueString": {
                      "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                  }
                ],
                "definition": "in ea dolor",
                "linkId": "sit incididunt velit",
                "text": "non exercitation co"
              }
            ],
            "linkId": "tempor Excepteur"
          },
          {
            "item": [
              {
                "answer": [
                  {
                    "valueString": {
                      "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                  },
                  {
                    "valueString": {
                      "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                  }
                ],
                "definition": "veniam fugiat minim eu",
                "linkId": "incididunt ad voluptate dolor",
                "text": "aliqua Duis ipsum a"
              },
              {
                "answer": [
                  {
                    "valueString": {
                      "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                  },
                  {
                    "valueString": {
                      "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                  }
                ],
                "definition": "ullamco officia",
                "linkId": "dolore",
                "text": "reprehenderit incididunt o"
              }
            ],
            "linkId": "fugiat pariatur sint"
          }
        ],
        "questionnaire": "minim ve",
        "resourceType": "ut sed fugiat incididunt",
        "status": "mollit Duis",
        "subject": {
          "reference": "occaecat ex magna"
        }
      }
    },
    {
      "name": "dolor do",
      "resource": {
        "item": [
          {
            "item": [
              {
                "answer": [
                  {
                    "valueString": {
                      "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                  },
                  {
                    "valueString": {
                      "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                  }
                ],
                "definition": "ullamco deserunt esse aliqua",
                "linkId": "esse officia",
                "text": "mollit dolor Excepteur exercitation tempor"
              },
              {
                "answer": [
                  {
                    "valueString": {
                      "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                  },
                  {
                    "valueString": {
                      "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                  }
                ],
                "definition": "veniam aliquip laborum et",
                "linkId": "Excepteur ea adipisicin",
                "text": "non qui Ut"
              }
            ],
            "linkId": "nisi cupidatat nostrud"
          },
          {
            "item": [
              {
                "answer": [
                  {
                    "valueString": {
                      "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                  },
                  {
                    "valueString": {
                      "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                  }
                ],
                "definition": "tempor ad enim",
                "linkId": "commodo quis",
                "text": "do culpa voluptate velit"
              },
              {
                "answer": [
                  {
                    "valueString": {
                      "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                  },
                  {
                    "valueString": {
                      "value": "<Error: Too many levels of nesting to fake this schema>"
                    }
                  }
                ],
                "definition": "mollit eiusmod",
                "linkId": "veniam exercitation ipsum",
                "text": "nisi reprehenderit in"
              }
            ],
            "linkId": "est laborum culpa"
          }
        ],
        "questionnaire": "est m",
        "resourceType": "pariatur veniam",
        "status": "adipisicing mollit null",
        "subject": {
          "reference": "ex incididunt"
        }
      }
    }
  ],
  "resourceType": "irure proident"
}[0m[0m
[1m
Request ID [0m[33m24113271-a583739c-907f-4332-b0ea-b77a2547c72d[0m
[1m- Name: [0m[36m1. Prerequisite data: a Questionnaire, Patient, & Organization[0m
[1m- URL: [0m[33m{{careTeamUrl}}/api/v1/r4/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
 "resourceType": "Bundle",
 "id": "bundle-transaction",
 "type": "transaction",
 "entry": [
  {
   "fullUrl": "organization",
   "resource": {
    "resourceType": "Organization",
    "type": [
     {
      "coding": [
       {
        "system": "http://hl7.org/fhir/ValueSet/organization-type",
        "code": "prov",
        "display": "Healthcare Provider"
       }
      ],
      "text": "Healthcare Provider"
     }
    ],
    "name": "Healthcare Provider Organization"
   },
   "request": {
    "method": "POST",
    "url": "Organization"
   }
  },
  {
   "fullUrl": "patient",
   "resource": {
    "resourceType": "Patient",
    "active": true,
    "name": [
     {
      "use": "official",
      "family": "Evans",
      "given": [
       "Tiffany",
       "Elise"
      ]
     }
    ],
    "gender": "female",
    "birthDate": "1990-12-25"
   },
   "request": {
    "method": "POST",
    "url": "Patient"
   }
  },
  {
   "fullUrl": "group",
   "resource": {
    "resourceType": "Group",
    "id": "id-3",
    "member": [
     {
      "entity": {
       "reference": "patient"
      },
      "period": {
       "start": "2020-10-08"
      }
     }
    ],
    "active": true,
    "type": "person",
    "actual": true,
    "name": "South Wing, second floor"
   },
   "request": {
    "method": "POST",
    "url": "Group"
   },
   "resourcetype": null
  },
  {
   "fullUrl": "practitioner",
   "resource": {
    "resourceType": "Practitioner",
    "id": "practitioner-1",
    "active": true,
    "name": [
     {
      "family": "Amud",
      "given": [
       "Angie"
      ],
      "prefix": [
       "Dr."
      ]
     }
    ],
    "address": [
     {
      "line": [
       "67 & 100 TER HEUN DRIVE"
      ],
      "city": "FALMOUTH",
      "state": "MA",
      "postalCode": "02540",
      "country": "US"
     }
    ],
    "gender": "female"
   },
   "request": {
    "method": "POST",
    "url": "Practitioner"
   }
  },
  {
   "fullUrl": "role",
   "resource": {
    "resourceType": "PractitionerRole",
    "id": "practitioner-role-1",
    "active": true,
    "period": {
     "start": "2012-01-01",
     "end": "2012-03-31"
    },
    "practitioner": {
     "reference": "practitioner",
     "display": "Dr Angie Amud"
    },
    "organization": {
     "reference": "organization"
    },
    "code": [
     {
      "coding": [
       {
        "system": "http://terminology.hl7.org/CodeSystem/v2-0286",
        "code": "RP"
       }
      ]
     }
    ],
    "specialty": [
     {
      "coding": [
       {
        "system": "http://snomed.info/sct",
        "code": "408443003",
        "display": "General medical practice"
       }
      ]
     }
    ]
   },
   "request": {
    "method": "POST",
    "url": "PractitionerRole"
   }
  },
  {
   "fullUrl": "careteam",
   "resource": {
    "resourceType": "CareTeam",
    "id": "careteam-1",
    "subject": {
     "reference": "group",
     "display": "Second floor patients"
    },
    "period": {
     "start": "2020-10-15T01:11:28-05:00",
     "end": "2020-10-16T01:11:28-05:00"
    },
    "participant": [
     {
      "role": [
       {
        "coding": [
         {
          "system": "http://snomed.info/sct",
          "code": "116153009",
          "display": "PracticionerRole"
         }
        ],
        "text": "Practicioner"
       }
      ],
      "member": {
       "reference": "practitioner",
       "display": "Doctor Angie Amud"
      }
     }
    ],
    "reasonCode": [
     {
      "coding": [
       {
        "system": "http://snomed.info/sct",
        "code": "10509002",
        "display": "Patient on second floor"
       }
      ],
      "text": "Patient on second floor"
     }
    ],
    "managingOrganization": [
     {
      "reference": "organization",
      "display": "FALMOUTH HOSPITAL"
     }
    ]
   },
   "request": {
    "method": "POST",
    "url": "CareTeam"
   }
  }
 ]
}[0m[0m

[33m[*][0m Querying workspace ID [36mace339e5-0f4c-4c2c-88c7-3c6eb92d27e1[0m

[1m
Request ID [0m[33m16863310-1a3c241b-7525-4d56-ad49-91080da001db[0m
[1m- Name: [0m[36mDelete user[0m
[1m- URL: [0m[33m{{baseUrl}}/delete?id={{id}}[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m- Header: [0m[33mContent-Type[0m: [32mtext/plain[0m[0m
[1m- Request Body: [0m[32m""[0m[0m
[1m- Parameter: [0m[33mid[0m=[32m{{id}}[0m
[1m
Request ID [0m[33m16863310-60761f41-51fe-4888-9296-96b6b7db628f[0m
[1m- Name: [0m[36mUpdate user[0m
[1m- URL: [0m[33m{{baseUrl}}/update?id={{id}}[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/form-urlencoded[0m[0m
[1m- Request Body: [0m[32m{
    "firstName": "Benjamin",
    "password": "foobar"
}[0m[0m
[1m- Parameter: [0m[33mid[0m=[32m{{id}}[0m
[1m
Request ID [0m[33m16863310-7ebe492e-5b36-4868-9727-7ee50f944547[0m
[1m- Name: [0m[36mNew user[0m
[1m- URL: [0m[33m{{baseUrl}}/create[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/form-urlencoded[0m[0m
[1m- Request Body: [0m[32m{
    "firstName": "{{$randomFirstName}}",
    "lastName": "{{$randomLastName}}"
}[0m[0m
[1m
Request ID [0m[33m16901632-05f3417e-6ada-4138-abf9-8f20062675cc[0m
[1m- Name: [0m[36mDelete[0m
[1m- URL: [0m[33m{{baseUrl}}/network[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m
Request ID [0m[33m16901632-f08d87b5-d163-49d0-a1f0-2022277de621[0m
[1m- Name: [0m[36mAll network usage[0m
[1m- URL: [0m[33m{{baseUrl}}/network[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mx-mock-response-name[0m: [32m401[0m[0m
[1m
Request ID [0m[33m16901632-0828a29e-1e97-443c-b236-d5dd0c3abdad[0m
[1m- Name: [0m[36mLog in as admin[0m
[1m- URL: [0m[33m{{baseUrl}}/network/login?username={{username}}&password={{password}}[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mContent-Transfer-Encoding[0m: [32mapplication/json[0m[0m
[1m- Parameter: [0m[33musername[0m=[32m{{username}}[0m
[1m- Parameter: [0m[33mpassword[0m=[32m{{password}}[0m
[1m
Request ID [0m[33m16901632-5c25e12d-494f-4cab-8c0b-3371367ca641[0m
[1m- Name: [0m[36mGet network users[0m
[1m- URL: [0m[33m{{baseUrl}}/network/:networkId/users[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept-Charset[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept-Encoding[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mX-AdminId[0m: [32m{{AdminId}}[0m[0m
[1m- Pre-Request Script: [0m[32m//Get the AdminId and set it as part of the request

let AdminId = pm.collectionVariables.get('AdminId')
console.log(AdminId)
[0m
[1m
Request ID [0m[33m16901632-75cb4e30-2823-4e50-bfd8-b7694e8b71d8[0m
[1m- Name: [0m[36mAttempt restricted action[0m
[1m- URL: [0m[33m{{baseUrl}}/network/:networkId/resource?resourceId={{resourceId}}[33m[0m
[1m- Request Method: [0m[33mPATCH[0m
[1m- Request Body: [0m[32m{
    "name": "us-west-2"
}[0m[0m
[1m- Parameter: [0m[33mresourceId[0m=[32m{{resourceId}}[0m
[1m
Request ID [0m[33m16901632-7f96dc25-401d-4481-b5bc-1eca9d15475f[0m
[1m- Name: [0m[36mLog out[0m
[1m- URL: [0m[33m{{baseUrl}}/network/login[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m
Request ID [0m[33m16901632-7fd0223a-51ac-45d9-b80f-c7bef2ebef5b[0m
[1m- Name: [0m[36mGet network resources for a given User[0m
[1m- URL: [0m[33m{{baseUrl}}/network/:networkId/resources/:userId[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mX-AdminId[0m: [32m{{AdminId}}[0m[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept-Encoding[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mAccept-Charset[0m: [32mapplication/json[0m[0m
[1m- Pre-Request Script: [0m[32m// get the FirstUserId
let FirstUserId = pm.collectionVariables.get('firstUserId');
pm.collectionVariables.set('userId', FirstUserId);[0m
[1m
Request ID [0m[33m16901632-8789d716-b262-487a-b9fd-c9cb9204ceed[0m
[1m- Name: [0m[36mAssess network connections[0m
[1m- URL: [0m[33m{{baseUrl}}/network/:networkId/connections[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m16901632-0050d43e-01fa-4de6-8718-fc3c424cb8b8[0m
[1m- Name: [0m[36mUpdate user[0m
[1m- URL: [0m[33m{{baseUrl}}/update?id={{id}}[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/form-urlencoded[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
  "firstName": "Benjamin",
  "password": "foobar"
}[0m[0m
[1m- Parameter: [0m[33mid[0m=[32m{{id}}[0m
[1m
Request ID [0m[33m16901632-63ec40a6-d828-47e2-8c0b-492c2f9b2043[0m
[1m- Name: [0m[36mDelete user[0m
[1m- URL: [0m[33m{{baseUrl}}/delete?id={{id}}[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m- Header: [0m[33mContent-Type[0m: [32mtext/plain[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m""[0m[0m
[1m- Parameter: [0m[33mid[0m=[32m{{id}}[0m
[1m
Request ID [0m[33m16901632-b095670c-d2c4-4e4d-927e-5fd7f1d7aefb[0m
[1m- Name: [0m[36mNew user[0m
[1m- URL: [0m[33m{{baseUrl}}/create[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/form-urlencoded[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mx-moc[0m: [32m503[0m[0m
[1m- Request Body: [0m[32m{
  "firstName": "{{$randomFirstName}}",
  "lastName": "{{$randomLastName}}"
}[0m[0m
[1m
Request ID [0m[33m17382210-06b40341-ba2e-43e4-b1c0-21b51187c04e[0m
[1m- Name: [0m[36mUpdate user[0m
[1m- URL: [0m[33m{{baseUrl}}/update?id={{id}}[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json; charset=utf-8[0m[0m
[1m- Parameter: [0m[33mid[0m=[32m{{id}}[0m
[1m
Request ID [0m[33m17382210-0a39fae9-4110-4bd7-b851-251e18f4f26e[0m
[1m- Name: [0m[36mDelete user[0m
[1m- URL: [0m[33m{{baseUrl}}/delete?id={{id}}[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json; charset=utf-8[0m[0m
[1m- Parameter: [0m[33mid[0m=[32m{{id}}[0m
[1m
Request ID [0m[33m17382210-7bb9d681-a9bf-48ae-99ab-658b04050006[0m
[1m- Name: [0m[36mNew user[0m
[1m- URL: [0m[33m{{baseUrl}}/create[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json; charset=utf-8[0m[0m
[1m
Request ID [0m[33m17382210-97107c2b-b251-4e31-a593-b630f52245af[0m
[1m- Name: [0m[36mGet all users[0m
[1m- URL: [0m[33m{{baseUrl}}/get?all=true[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mkey[0m: [32m{{key}}[0m[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json; charset=utf-8[0m[0m
[1m- Parameter: [0m[33mall[0m=[32mtrue[0m
[1m
Request ID [0m[33m23437215-a525b361-46a7-460d-950d-5a93ae156575[0m
[1m- Name: [0m[36mAll network usage[0m
[1m- URL: [0m[33m{{baseUrl}}/network[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m23437215-ed4df0a5-8ec4-47c2-96fc-e3f5f71fd91a[0m
[1m- Name: [0m[36mAll network usage[0m
[1m- URL: [0m[33m{{baseUrl}}/network[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mAccept[0m: [32mapplication/json[0m[0m

[33m[*][0m Querying workspace ID [36m5348a6d5-6219-44da-8030-0f0c9e368381[0m

[1m
Request ID [0m[33m20022148-777d3e46-1b23-41cf-b2b7-b2ea89d795e4[0m
[1m- Name: [0m[36mChai Assertion - examples[0m
[1m- URL: [0m[33mhttps://jsonplaceholder.typicode.com/users[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-dd90dd04-6fb1-4149-92c8-c5a28c7a5a69[0m
[1m- Name: [0m[36mLodash - examples[0m
[1m- URL: [0m[33mhttps://jsonplaceholder.typicode.com/users[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-45a75bcc-d66b-4ca8-a327-45f53cd86076[0m
[1m- Name: [0m[36mRead random employee[0m
[1m- URL: [0m[33mhttp://localhost:3000/employees/?name={{$randomFullName}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mname[0m=[32m{{$randomFullName}}[0m
[1m
Request ID [0m[33m20022148-b2446424-71b2-4680-8d88-b80646b49b3e[0m
[1m- Name: [0m[36mCreate employee with email validation[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "firstName": "Bartek",
    "lastName": "Czarny",
    "username": "bczarny",
    "email": {{email}},
    "phone": "731-111-111",
    "website": "testerprogramuje.pl",
    "role": "qa",
    "type": "b2b",
    "address": {
        "street": "Ul. Sezamkowa",
        "suite": "8",
        "city": "Wrocław",
        "zipcode": "12-123"
    },
    "company": {
        "companyName": "Akademia QA",
        "taxNumber": "531-1593-430",
        "companyPhone": "731-111-111"
    }
}[0m[0m
[1m
Request ID [0m[33m20022148-c2f6fbc9-c929-47d8-9bfc-ff945c7bd248[0m
[1m- Name: [0m[36mNew Request[0m
[1m- URL: [0m[33mhttp://localhost:3000/[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-d256caae-c5d0-4ad6-8de4-98b32c6806c4[0m
[1m- Name: [0m[36mRead another random[0m
[1m- URL: [0m[33mhttp://localhost:3000//users[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Pre-Request Script: [0m[32m// adres email
console.log("Email: " + pm.variables.replaceIn('{{$raandomEmail}}'));

// nazwa użytkownika
console.log("Nazwa użytkownika: " + pm.variables.replaceIn('{{$randomUserName}}'));

// imię
console.log("Imię: " + pm.variables.replaceIn('{{$randomFirstName}}'));

// nazwisko
console.log("Nazwisko: " + pm.variables.replaceIn('{{$randomLastName}}'));

// imię i nazwisko
console.log("Imię i nazwisko: " + pm.variables.replaceIn('{{$randomFullName}}'));

// numer telefonu
console.log("Numer telefonu: " + pm.variables.replaceIn('{{$randomPhoneNumber}}'));

// adres url
console.log("Adres URL: " + pm.variables.replaceIn('{{$randomUrl}}'));

// hasło
console.log("Hasło: " + pm.variables.replaceIn('{{$randomPassword}}'));

// miasto
console.log("Miasto: " + pm.variables.replaceIn('{{$randomCity}}'));

// miesiąc
console.log("Miesiąc: " + pm.variables.replaceIn('{{$randomMonth}}'));

// dzień tygodnia
console.log("Dzień tygodnia: " + pm.variables.replaceIn('$randomWeekday}}'));

// url obrazka
console.log("URL obrazka: " + pm.variables.replaceIn('{{$randomImageURL}}'));

// uuid
console.log("UUID: " + pm.variables.replaceIn('{{$randomUUID}}'));

// cena
console.log("Cena: " + pm.variables.replaceIn('{{$randomPrice}}'));

// data z przeszłości
console.log("Data z przeszłości: " + pm.variables.replaceIn('{{$randomDatePast}}'));

// data w przyszłości
console.log("Data w przyszłości: " + pm.variables.replaceIn('{{$randomDateFuture}}'));

[0m
[1m
Request ID [0m[33m20022148-f2acacd1-4ced-4962-a25f-cb8aead4f98a[0m
[1m- Name: [0m[36mCreate employee with random email[0m
[1m- URL: [0m[33mhttp://localhost:3000/employees[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "firstName": "Bartek",
    "lastName": "Czarny",
    "username": "bczarny",
    "email": "{{cRandomEmail}}",
    "phone": "731-111-111",
    "website": "testerprogramuje.pl",
    "role": "qa",
    "type": "b2b",
    "address": {
        "street": "Ul. Sezamkowa",
        "suite": "8",
        "city": "Wrocław",
        "zipcode": "12-123"
    },
    "company": {
        "companyName": "Akademia QA",
        "taxNumber": "531-1593-430",
        "companyPhone": "731-111-111"
    }
}[0m[0m
[1m- Pre-Request Script: [0m[32mconsole.log('Krok 1 - Jestem w Pre-request script');

const randEmail = pm.variables.replaceIn('{{$randomEmail}}');
pm.collectionVariables.set('cRandomEmail', randEmail);[0m
[1m
Request ID [0m[33m20022148-ac457199-bff4-49d4-abf3-faea09aace6d[0m
[1m- Name: [0m[36mNew Request[0m
[1m- URL: [0m[33mhttp://example.com/[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-cddd0e9b-cc02-4110-971c-1e242d0b5a7f[0m
[1m- Name: [0m[36mNew Request Copy[0m
[1m- URL: [0m[33mhttp://example.com/[33m[0m
[1m- Request Method: [0m[33mHEAD[0m
[1m
Request ID [0m[33m20022148-ebabacd6-d6e4-4ee0-ad58-0fc7637ee2f5[0m
[1m- Name: [0m[36mNew Request Copy 2[0m
[1m- URL: [0m[33mhttp://example.com/[33m[0m
[1m- Request Method: [0m[33mOPTIONS[0m
[1m
Request ID [0m[33m20022148-1feee122-c997-48c6-b906-62eb95459dc9[0m
[1m- Name: [0m[36mRead users with given query params[0m
[1m- URL: [0m[33mhttps://jsonplaceholder.typicode.com/users?email=Rey.Padberg@karina.biz[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33memail[0m=[32mRey.Padberg@karina.biz[0m
[1m- Parameter: [0m[33musername[0m=[32mBret[0m
[1m
Request ID [0m[33m20022148-4677f714-dbd9-47aa-b241-6f200bc40bde[0m
[1m- Name: [0m[36mCreate new post[0m
[1m- URL: [0m[33mhttps://jsonplaceholder.typicode.com/posts[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "userId": {{userId}},
    "title": "Pierwszy POST",
    "body": "Szkoła Testowania Backendu"
}[0m[0m
[1m
Request ID [0m[33m20022148-679c9e23-3a13-4d84-84e7-80338ca5435c[0m
[1m- Name: [0m[36mRead user with given id[0m
[1m- URL: [0m[33mhttps://jsonplaceholder.typicode.com/users/1[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-8a56a314-56b4-4fbf-81af-f2f1dbf4dda3[0m
[1m- Name: [0m[36mRead all users[0m
[1m- URL: [0m[33m{{url}}/users[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-a8350833-6f9f-47f6-afcb-c3b1ac202bfe[0m
[1m- Name: [0m[36mCount objects[0m
[1m- URL: [0m[33mhttps://jsonplaceholder.typicode.com/todos[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-24efd09c-5bf4-436d-9c87-48a4f160850c[0m
[1m- Name: [0m[36mInstrukcje warunkowe[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-668a7747-b66f-4958-95c5-0a93c7f65aa9[0m
[1m- Name: [0m[36mPętle[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-6b623074-30a3-4a12-90d5-c5ad86dc1b35[0m
[1m- Name: [0m[36mTablice[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-bc2169f1-ac96-4022-b778-a56acc54bbc2[0m
[1m- Name: [0m[36mTypy danych[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-bcfe0872-7807-4412-9f27-255a7b1b2bf0[0m
[1m- Name: [0m[36mOperatory logiczne[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-ed320a3b-1804-4374-b686-8f4fb221cedc[0m
[1m- Name: [0m[36mFunkcje[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-0fc3cd50-0363-45b8-b947-6109d83b9a65[0m
[1m- Name: [0m[36mTest[0m
[1m- URL: [0m[33mhttps://enlgzoc361rr.x.pipedream.net/users?email=sebastea@poczta.wp.pl[33m[0m
[1m- Authorization: [0m[33mbearer[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "name": "Zygfryd"
}[0m[0m
[1m- Parameter: [0m[33memail[0m=[32msebastea@poczta.wp.pl[0m
[1m
Request ID [0m[33m20022148-89861628-f45c-4384-8c90-8de7f97dc291[0m
[1m- Name: [0m[36mTest[0m
[1m- URL: [0m[33mhttps://enlgzoc361rr.x.pipedream.net/users[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-069b0f40-befa-4cf8-8065-5f5124cce2f2[0m
[1m- Name: [0m[36mRead all users[0m
[1m- URL: [0m[33mhttps://jsonplaceholder.typicode.com/users[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-0ddd95c2-808f-4ed5-9ff9-71cf5315b83b[0m
[1m- Name: [0m[36mRead one post[0m
[1m- URL: [0m[33mhttps://jsonplaceholder.typicode.com/posts/13[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-0e4724e1-a30b-47d3-8bc1-8fb1441d1ca4[0m
[1m- Name: [0m[36mPartial update post[0m
[1m- URL: [0m[33mhttps://jsonplaceholder.typicode.com/posts/13[33m[0m
[1m- Request Method: [0m[33mPATCH[0m
[1m- Request Body: [0m[32m{
    "title": "I'm looking for a new job opportunity"
}[0m[0m
[1m
Request ID [0m[33m20022148-59295847-54de-45ca-a253-c8963bb2c2eb[0m
[1m- Name: [0m[36mUpdate user[0m
[1m- URL: [0m[33mhttps://jsonplaceholder.typicode.com/users/1[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Request Body: [0m[32m{
    "name": "Leanne Graham",
    "username": "Brad",
    "email": "Sincere@april.biz",
    "address": {
        "street": "Kulas Light",
        "suite": "Apt. 556",
        "city": "Gwenborough",
        "zipcode": "92998-3874",
        "geo": {
            "lat": "-37.3159",
            "lng": "81.1496"
        }
    },
    "phone": "1-770-736-8031 x56442",
    "website": "hildegard.org",
    "company": {
        "name": "Romaguera-Crona",
        "catchPhrase": "Multi-layered client-server neural-net",
        "bs": "harness real-time e-markets"
    }
}[0m[0m
[1m
Request ID [0m[33m20022148-66398021-6870-4334-b0a9-9754fc3939bd[0m
[1m- Name: [0m[36mCreate user[0m
[1m- URL: [0m[33mhttps://jsonplaceholder.typicode.com/users/[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "name": " Tester Testowy",
    "username": "Tester",
    "email": "tester@testowy.pl",
    "address": {
      "street": "Kulas Light",
      "suite": "Apt. 556",
      "city": "Gwenborough",
      "zipcode": "92998-3874",
      "geo": {
        "lat": "-37.3159",
        "lng": "81.1496"
      }
    },
    "phone": "1-770-736-8031 x56442",
    "website": "hildegard.org",
    "company": {
      "name": "Romaguera-Crona",
      "catchPhrase": "Multi-layered client-server neural-net",
      "bs": "harness real-time e-markets"
    }
  }[0m[0m
[1m
Request ID [0m[33m20022148-7b43a51c-ca34-4503-b45d-07b13b38648f[0m
[1m- Name: [0m[36mCreate post[0m
[1m- URL: [0m[33mhttps://jsonplaceholder.typicode.com/posts[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "userId": 1,
    "title": "Test title",
    "body": "Test body"
  }[0m[0m
[1m
Request ID [0m[33m20022148-ae52ef04-8b35-466d-9cb8-ffb97a74a9e9[0m
[1m- Name: [0m[36mRead all posts[0m
[1m- URL: [0m[33mhttps://jsonplaceholder.typicode.com/posts[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-e3cd8233-1f0d-4b2d-97e0-df996ef44f41[0m
[1m- Name: [0m[36mPartial update user[0m
[1m- URL: [0m[33mhttps://jsonplaceholder.typicode.com/users/1[33m[0m
[1m- Request Method: [0m[33mPATCH[0m
[1m- Request Body: [0m[32m{
    "username": "Brad from PATCH"
}[0m[0m
[1m
Request ID [0m[33m20022148-f45ecf88-a548-4bc8-bc35-6c63a0b53159[0m
[1m- Name: [0m[36mRead one user[0m
[1m- URL: [0m[33mhttps://jsonplaceholder.typicode.com/users/7[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-f92fa307-65f9-427d-8387-d8ccc7103a92[0m
[1m- Name: [0m[36mDelete first user[0m
[1m- URL: [0m[33mhttps://jsonplaceholder.typicode.com/users/1[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m- Request Body: [0m[32m{
    "username": "Brad from PATCH"
}[0m[0m
[1m
Request ID [0m[33m20022148-0766aeb6-cc8f-4300-ad1d-02c42af49bc1[0m
[1m- Name: [0m[36mGet all bugs[0m
[1m- URL: [0m[33mhttp://localhost:3000/bugs[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m20022148-eea8ab1a-45fb-41de-908f-9c30d2270a56[0m
[1m- Name: [0m[36mNew Request[0m
[1m- URL: [0m[33mhttp://localhost:3000/bugs[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Request Body: [0m[32m{
    "id": 100,
    "title": "This is just a test",
    "description": "When I send a PATH request to /bugs, instead of status code 200, I'm getting 404",
    "employeeId": 1,
    "status": "in progress"
}[0m[0m

[33m[*][0m Querying workspace ID [36m610987f7-a457-4cdd-8364-cc8fa7bac940[0m

[1m
Request ID [0m[33m27426544-921b5886-dc96-4f81-9a6c-463fa05b6d9b[0m
[1m- Name: [0m[36mhttps://www.postman.com/get-navigation-format-data-saganist-60628695/workspace/volp900/request/create?example=27426544-0d3fb7f1-4409-458f-9d05-4fe932575996&delet&data=e-1142024153535[0m
[1m- URL: [0m[33mhttps://www.postman.com/get-navigation-format-data-saganist-60628695/workspace/volp900/request/create?example=27426544-0d3fb7f1-4409-458f-9d05-4fe932575996&delet&data=e-1142024153535[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mexample[0m=[32m27426544-0d3fb7f1-4409-458f-9d05-4fe932575996[0m
[1m- Parameter: [0m[33mdelet[0m=[32m[0m
[1m- Parameter: [0m[33mdata[0m=[32me-1142024153535[0m
[1m
Request ID [0m[33m27426544-2279bde9-40f4-4c62-be42-1626ee32122a[0m
[1m- Name: [0m[36mNew Request[0m
[1m- URL: [0m[33mNone[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m27426544-269325ce-188b-4935-a0f0-00c6978e36a6[0m
[1m- Name: [0m[36mhttps://postman.com/get-navigation-format-data-saganist-60628695/workspace/volp900/collection/64624cbed86ff05edb7890ce[0m
[1m- URL: [0m[33mhttps://postman.com/get-navigation-format-data-saganist-60628695/workspace/volp900/collection/64624cbed86ff05edb7890ce[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m27426544-b4f652a6-e322-4032-be75-202e8fdabeea[0m
[1m- Name: [0m[36mhttps://postman.com/get-navigation-format-data-saganist-60628695/workspace/volp900/collection/64624cbed86ff05edb7890ce[0m
[1m- URL: [0m[33mhttps://postman.com/get-navigation-format-data-saganist-60628695/workspace/volp900/collection/64624cbed86ff05edb7890ce[33m[0m
[1m- Request Method: [0m[33mGET[0m

[33m[*][0m Querying workspace ID [36m4fe7a401-fb00-4747-8994-c6250aa11d20[0m


[33m[*][0m Querying workspace ID [36m9767f84d-972c-4c93-80cc-c4661fce1234[0m

[1m
Request ID [0m[33m6934874-020f2a76-4218-4d56-83de-7c49d6568362[0m
[1m- Name: [0m[36m4 Get Products[0m
[1m- URL: [0m[33m{{baseUrl}}/products?query={{Product_ID}}[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mquery[0m=[32m{{Product_ID}}[0m
[1m
Request ID [0m[33m6934874-0da03335-b877-477b-a3b3-1de4c20dd488[0m
[1m- Name: [0m[36m5 Delete a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m
Request ID [0m[33m6934874-50f7f858-4688-4dac-84c0-2783e2fe7bf1[0m
[1m- Name: [0m[36m3 Get an Updated Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m6934874-5f0af52c-a2a0-4356-8219-8ea64b1c3534[0m
[1m- Name: [0m[36m2 Update a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "unitSalePrice": 25.99
}[0m[0m
[1m
Request ID [0m[33m6934874-70442e3f-3c5b-4489-9461-7367086152ef[0m
[1m- Name: [0m[36m1 Add a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
   "identifier": "XYZ-JEAN-123",
   "name": "Men's Skinny-fit Stretch Jean",
    "category": "Jeans",
    "brand": "Union",
    "color": "black",
    "gender": "m",
    "unitPrice": 49.99,
    "unitSalePrice": 39.99
}[0m[0m
[1m
Request ID [0m[33m6934874-2dfe820b-5433-4a89-b330-e7e9faae5fe1[0m
[1m- Name: [0m[36mList Breweries[0m
[1m- URL: [0m[33mhttps://api.openbrewerydb.org/breweries[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m6934874-11298b54-d3f2-4d26-8389-6cad8edab253[0m
[1m- Name: [0m[36mGet Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m6934874-21e9be12-5d8f-4c73-8966-d373abbef765[0m
[1m- Name: [0m[36mDelete[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m
Request ID [0m[33m6934874-4a151574-c4e2-4223-8696-b0168ad4248a[0m
[1m- Name: [0m[36mAdd Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{ 
    "category": "Jeans",
    "brand": "Union",
    "color": "black",
    "gender": "m",
    "unitPrice": 49.99,
    "unitSalePrice": 29.99
}[0m[0m
[1m
Request ID [0m[33m6934874-6b2aea3e-e94d-41be-9eef-cba59ee788b5[0m
[1m- Name: [0m[36mGet Products[0m
[1m- URL: [0m[33m{{baseUrl}}/products?query=shirts[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mquery[0m=[32mshirts[0m
[1m
Request ID [0m[33m6934874-f120cc69-3a77-44e1-9c28-aea54b05d719[0m
[1m- Name: [0m[36mUpdate[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "unitSalePrice": 29.99
}[0m[0m
[1m
Request ID [0m[33m6934874-4041e87a-5637-48f6-848c-c9f03e0081e9[0m
[1m- Name: [0m[36mVisualizer table[0m
[1m- URL: [0m[33mhttps://postman-echo.com/post[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"contacts": [
		{
			"name": "{{$randomFullName}}",
			"email": "{{$randomEmail}}"
		},
		{
			"name": "{{$randomFullName}}",
			"email": "{{$randomEmail}}"
		},
		{
			"name": "{{$randomFullName}}",
			"email": "{{$randomEmail}}"
		},
		{
			"name": "{{$randomFullName}}",
			"email": "{{$randomEmail}}"
		}
		]
}
		[0m[0m
[1m
Request ID [0m[33m6934874-e18d5356-c40a-4aee-a5d9-ede9dd175ca1[0m
[1m- Name: [0m[36mVisualizer Bar chart[0m
[1m- URL: [0m[33mhttps://postman-echo.com/post[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"content":
	[
	 {{$randomInt}},
	 {{$randomInt}},
	 {{$randomInt}},
	 {{$randomInt}}
		
	]
}[0m[0m
[1m
Request ID [0m[33m6934874-984b522e-cfc2-47ba-acb1-9316d8648312[0m
[1m- Name: [0m[36mResponse JSON schema valiation[0m
[1m- URL: [0m[33m{{baseUrl}}/products?query={{Product_Name}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mquery[0m=[32m{{Product_Name}}[0m
[1m
Request ID [0m[33m6934874-7d22302b-590b-43ec-8280-6f3e1289d4d5[0m
[1m- Name: [0m[36mhttps://bifrost-web-public-v10.gw.postman.com[0m
[1m- URL: [0m[33mhttps://bifrost-web-public-v10.gw.postman.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m6934874-f80331e4-3632-4944-bf52-055c572e88ca[0m
[1m- Name: [0m[36mAvailability and response time monitoring[0m
[1m- URL: [0m[33mpostman-echo.com[33m[0m
[1m- Request Method: [0m[33mGET[0m

[33m[*][0m Querying workspace ID [36m5bcfda59-28e7-4d49-843d-4ea1b58e0fc4[0m

[1m
Request ID [0m[33m32825151-5b10183f-b057-46d2-9147-0b4a1867eccb[0m
[1m- Name: [0m[36mglobals[0m
[1m- URL: [0m[33mhttps://api.marvelous.friendlee.ru/items/globals?fields=presentation[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mfields[0m=[32mpresentation[0m
[1m
Request ID [0m[33m32825151-7e565076-a57f-48f1-a39d-d1a636567ecb[0m
[1m- Name: [0m[36mget cases[0m
[1m- URL: [0m[33mhttps://api.marvelous.friendlee.ru/items/projects[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m32825151-8b857af0-a74f-4299-8460-d2a543a373b7[0m
[1m- Name: [0m[36mget file[0m
[1m- URL: [0m[33mhttps://api.marvelous.friendlee.ru/assets/c43f3aa0-3e77-4701-9ce8-d040ec065f39[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m32825151-be199c9b-b4cd-4751-8693-55f7891812e8[0m
[1m- Name: [0m[36mtg_bot_globals[0m
[1m- URL: [0m[33mhttps://api.marvelous.friendlee.ru/items/tg_bot_globals[33m[0m
[1m- Request Method: [0m[33mGET[0m

[33m[*][0m Querying workspace ID [36m73acf00b-e2f0-4a74-92c2-9e8e5f5a3a7e[0m

[1m
Request ID [0m[33m7896111-32409bed-a1db-4b1b-bd4c-5d4e2fdd153d[0m
[1m- Name: [0m[36m3 Get an Updated Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m7896111-8976b5f7-f4c3-435f-b4d9-b1b2733dab18[0m
[1m- Name: [0m[36m5 Delete a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m
Request ID [0m[33m7896111-8dc09c2f-8cbb-48c3-8a7c-238a62139970[0m
[1m- Name: [0m[36m2 Update a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "unitSalePrice": 25.99
}[0m[0m
[1m
Request ID [0m[33m7896111-a179fd67-7528-48e6-aaea-d16cbc920328[0m
[1m- Name: [0m[36m1 Add a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
   "identifier": "XYZ-JEAN-123",
   "name": "Men's Skinny-fit Stretch Jean",
    "category": "Jeans",
    "brand": "Union",
    "color": "black",
    "gender": "m",
    "unitPrice": 49.99,
    "unitSalePrice": 39.99
}[0m[0m
[1m
Request ID [0m[33m7896111-daf87a34-923f-447a-a208-ac271c3a6a7c[0m
[1m- Name: [0m[36m4 Get Products[0m
[1m- URL: [0m[33m{{baseUrl}}/products?query={{Product_ID}}[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mquery[0m=[32m{{Product_ID}}[0m
[1m
Request ID [0m[33m7896111-bbf41790-c523-4cbf-b8e5-a3a064ad3e90[0m
[1m- Name: [0m[36mResponse JSON schema valiation[0m
[1m- URL: [0m[33m{{baseUrl}}/products?query={{Product_Name}}[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mquery[0m=[32m{{Product_Name}}[0m
[1m
Request ID [0m[33m7896111-02e256b7-6f3c-4142-a15a-b552c4454048[0m
[1m- Name: [0m[36mUpdate[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "unitSalePrice": 29.99
}[0m[0m
[1m
Request ID [0m[33m7896111-289cb029-dab0-4a3c-a738-dad0bbd54d6e[0m
[1m- Name: [0m[36mGet Products[0m
[1m- URL: [0m[33m{{baseUrl}}/products?query=shirts[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mquery[0m=[32mshirts[0m
[1m
Request ID [0m[33m7896111-5a8e7c23-28b3-4841-b3d4-656fdc89b1e5[0m
[1m- Name: [0m[36mDelete[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m
Request ID [0m[33m7896111-623298f4-321d-46a7-9845-e1909d02662d[0m
[1m- Name: [0m[36mAdd Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{ 
    "category": "Jeans",
    "brand": "Union",
    "color": "black",
    "gender": "m",
    "unitPrice": 49.99,
    "unitSalePrice": 29.99
}[0m[0m
[1m
Request ID [0m[33m7896111-cb16a4c1-1117-4fc8-af92-fd219da5a7f6[0m
[1m- Name: [0m[36mGet Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m7896111-7d07c904-1ac1-431c-8ce6-36417603c5bb[0m
[1m- Name: [0m[36mAvailability and response time monitoring[0m
[1m- URL: [0m[33mpostman-echo.com[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m7896111-336bed97-0d3e-4eec-bc48-e02d54d9846b[0m
[1m- Name: [0m[36m2 Update a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPUT[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
    "unitSalePrice": 25.99
}[0m[0m
[1m
Request ID [0m[33m7896111-7db64c2d-e30a-4d91-8ae1-7a8830a193b3[0m
[1m- Name: [0m[36m4 Get Products[0m
[1m- URL: [0m[33m{{baseUrl}}/products?query={{Product_ID}}[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Parameter: [0m[33mquery[0m=[32m{{Product_ID}}[0m
[1m
Request ID [0m[33m7896111-9c5c3047-31a2-4e6a-8c91-ab7eca89d035[0m
[1m- Name: [0m[36m3 Get an Updated Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m7896111-9eb05478-7b77-41c2-a02f-1dfe1f81d837[0m
[1m- Name: [0m[36m5 Delete a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products/:productId[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m
Request ID [0m[33m7896111-b0beb9fb-db32-49d4-8611-44c3d358fced[0m
[1m- Name: [0m[36m1 Add a Product[0m
[1m- URL: [0m[33m{{baseUrl}}/products[33m[0m
[1m- Authorization: [0m[33mapikey[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
   "identifier": "XYZ-JEAN-123",
   "name": "Men's Skinny-fit Stretch Jean",
    "category": "Jeans",
    "brand": "Union",
    "color": "black",
    "gender": "m",
    "unitPrice": 49.99,
    "unitSalePrice": 39.99
}[0m[0m

[33m[*][0m Querying workspace ID [36mc1c06d73-0ae1-438f-8376-a0ae4a285f4b[0m

[1m
Request ID [0m[33m8101977-ff004566-5dc3-4cf9-9e5c-416ffbe67d35[0m
[1m- Name: [0m[36mNew Request[0m
[1m- URL: [0m[33mexample.com[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m
Request ID [0m[33m8101977-1787774a-0646-406e-aa84-be367e9f2387[0m
[1m- Name: [0m[36mGenerate reference[0m
[1m- URL: [0m[33mhttpbin.org/uuid[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m
Request ID [0m[33m8101977-1b58ff7f-d6e5-45b1-a072-430738f89f70[0m
[1m- Name: [0m[36mCheck status[0m
[1m- URL: [0m[33mhttpbin.org/status/200[33m[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/x-www-form-urlencoded[0m[0m
[1m
Request ID [0m[33m8101977-3c3bdc85-921a-4772-8766-81314dae4397[0m
[1m- Name: [0m[36mCreate order[0m
[1m- URL: [0m[33mhttpbin.org/post[33m[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
	"referenceId": "{{referenceId}}",
	"customerId": 200,
	"productId": 300
}[0m[0m
[1m
Request ID [0m[33m8101977-1758a5b8-cef1-4ec7-8f8d-454ecba43474[0m
[1m- Name: [0m[36mGet repo[0m
[1m- URL: [0m[33mhttps://api.github.com/repos/:owner/:repo[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33mpassword[0m=[32m{{githubPassword}}[0m
  [1m- [0m[33musername[0m=[32m{{githubUsername}}[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Pre-Request Script: [0m[32m// Generate random string to be used in the repo name
pm.globals.set('randomString', Math.random().toString(36).substring(7));[0m
[1m
Request ID [0m[33m8101977-390cc93d-6bcd-4162-8147-77737796e364[0m
[1m- Name: [0m[36mGet deleted repo & clean-up[0m
[1m- URL: [0m[33mhttps://api.github.com/repos/:owner/:repo[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33mpassword[0m=[32m{{githubPassword}}[0m
  [1m- [0m[33musername[0m=[32m{{githubUsername}}[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
  "name": "Hello World ({{randomString}})",
  "description": "This is a repository created using the API.",
  "homepage": "https://github.com",
  "private": false,
  "has_issues": true,
  "has_projects": true,
  "has_wiki": false
}[0m[0m
[1m- Pre-Request Script: [0m[32m// Generate random string to be used in the repo name
pm.globals.set('randomString', Math.random().toString(36).substring(7));[0m
[1m
Request ID [0m[33m8101977-3d29ae69-dfd9-4b46-b86e-f14e970d605f[0m
[1m- Name: [0m[36mDelete repo[0m
[1m- URL: [0m[33mhttps://api.github.com/repos/:owner/:repo[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33mpassword[0m=[32m{{githubPassword}}[0m
  [1m- [0m[33musername[0m=[32m{{githubUsername}}[0m
[1m- Request Method: [0m[33mDELETE[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m
Request ID [0m[33m8101977-983be702-d3e3-4bef-b29f-ee8be817297f[0m
[1m- Name: [0m[36mGet issue[0m
[1m- URL: [0m[33mhttps://api.github.com/repos/:owner/:repo/issues/1[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33mpassword[0m=[32m{{githubPassword}}[0m
  [1m- [0m[33musername[0m=[32m{{githubUsername}}[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
  "title": "Found a bug",
  "body": "I'm having a problem with this."
}[0m[0m
[1m
Request ID [0m[33m8101977-eaec1d4b-ca10-445b-a526-3b96ff7a10ef[0m
[1m- Name: [0m[36mCreate issue[0m
[1m- URL: [0m[33mhttps://api.github.com/repos/:owner/:repo/issues[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33mpassword[0m=[32m{{githubPassword}}[0m
  [1m- [0m[33musername[0m=[32m{{githubUsername}}[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
  "title": "Found a bug",
  "body": "This issue has been automatically created by Postman."
}[0m[0m
[1m
Request ID [0m[33m8101977-eda39726-9fb4-4386-8906-39552f4cf03d[0m
[1m- Name: [0m[36mCreate repo[0m
[1m- URL: [0m[33mhttps://api.github.com/user/repos[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33mpassword[0m=[32m{{githubPassword}}[0m
  [1m- [0m[33musername[0m=[32m{{githubUsername}}[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Request Body: [0m[32m{
  "name": "Hello World ({{randomString}})",
  "description": "This is a repository created using the API.",
  "homepage": "https://github.com",
  "private": false,
  "has_issues": true,
  "has_projects": true,
  "has_wiki": false
}[0m[0m
[1m- Pre-Request Script: [0m[32m// Generate random string to be used in the repo name
pm.globals.set('randomString', Math.random().toString(36).substring(7));[0m
[1m
Request ID [0m[33m8101977-2e104002-b622-465a-baad-360fc3aa22ec[0m
[1m- Name: [0m[36mGet deleted repo & clean-up[0m
[1m- URL: [0m[33mhttps://api.github.com/repos/:owner/:repo[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33mpassword[0m=[32m{{githubPassword}}[0m
  [1m- [0m[33musername[0m=[32m{{githubUsername}}[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mX-GitHub-OTP[0m: [32m{{otpCode}}[0m[0m
[1m- Request Body: [0m[32m{
  "name": "Hello World ({{randomString}})",
  "description": "This is a repository created using the API.",
  "homepage": "https://github.com",
  "private": false,
  "has_issues": true,
  "has_projects": true,
  "has_wiki": false
}[0m[0m
[1m- Pre-Request Script: [0m[32m// Generate random string to be used in the repo name
pm.globals.set('randomString', Math.random().toString(36).substring(7));[0m
[1m
Request ID [0m[33m8101977-56e82056-5c34-4564-9228-afbddc2accc4[0m
[1m- Name: [0m[36mCreate repo Copy[0m
[1m- URL: [0m[33mhttps://api.github.com/user/repos[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33mpassword[0m=[32m{{githubPassword}}[0m
  [1m- [0m[33musername[0m=[32m{{githubUsername}}[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mX-GitHub-OTP[0m: [32m{{otpCode}}[0m[0m
[1m- Request Body: [0m[32m{
  "name": "Hello World ({{randomString}})",
  "description": "This is a repository created using the API.",
  "homepage": "https://github.com",
  "private": false,
  "has_issues": true,
  "has_projects": true,
  "has_wiki": false
}[0m[0m
[1m- Pre-Request Script: [0m[32m// Generate random string to be used in the repo name
pm.globals.set('randomString', Math.random().toString(36).substring(7));[0m
[1m
Request ID [0m[33m8101977-82baa733-3e2d-436f-a717-0bbbe61611a4[0m
[1m- Name: [0m[36mCreate issue[0m
[1m- URL: [0m[33mhttps://api.github.com/repos/:owner/:repo/issues[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33mpassword[0m=[32m{{githubPassword}}[0m
  [1m- [0m[33musername[0m=[32m{{githubUsername}}[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mX-GitHub-OTP[0m: [32m{{otpCode}}[0m[0m
[1m- Request Body: [0m[32m{
  "title": "Found a bug",
  "body": "I'm having a problem with this."
}[0m[0m
[1m
Request ID [0m[33m8101977-8a8a362f-2500-4290-96e9-dcff34de7ea7[0m
[1m- Name: [0m[36mGet issue[0m
[1m- URL: [0m[33mhttps://api.github.com/repos/:owner/:repo/issues/1[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33mpassword[0m=[32m{{githubPassword}}[0m
  [1m- [0m[33musername[0m=[32m{{githubUsername}}[0m
[1m- Request Method: [0m[33mGET[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m- Header: [0m[33mX-GitHub-OTP[0m: [32m{{otpCode}}[0m[0m
[1m- Request Body: [0m[32m{
  "title": "Found a bug",
  "body": "I'm having a problem with this."
}[0m[0m
[1m
Request ID [0m[33m8101977-8fa06d4a-ed46-4d2f-8dff-ea89fd464943[0m
[1m- Name: [0m[36mTrigger OTP code[0m
[1m- URL: [0m[33mhttps://api.github.com/authorizations[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33mpassword[0m=[32m{{githubPassword}}[0m
  [1m- [0m[33musername[0m=[32m{{githubUsername}}[0m
[1m- Request Method: [0m[33mPOST[0m
[1m- Header: [0m[33mContent-Type[0m: [32mapplication/json[0m[0m
[1m
Request ID [0m[33m8101977-adbdbd73-870e-4a81-8fcf-0cfe084d135b[0m
[1m- Name: [0m[36mDelete repo[0m
[1m- URL: [0m[33mhttps://api.github.com/repos/:owner/:repo[33m[0m
[1m- Authorization: [0m[33mbasic[33m[0m
  [1m- [0m[33mpassword[0m=[32m{{githubPassword}}[0m
  [1m- [0m[33musername[0m=[32m{{githubUsername}}[0m
[1m- Request Method: [0m[33mDELETE[0m
